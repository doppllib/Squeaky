//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/types/EnumStringTypeTest.java
//

#include "AndroidDatabaseSqliteSQLiteDatabase.h"
#include "CoTouchlabDopplTestingDopplContextDelegateTestRunner.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldDatabaseField.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"
#include "CoTouchlabSqueakyFieldTypesEnumStringType.h"
#include "CoTouchlabSqueakyFieldTypesEnumStringTypeTest.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "CoTouchlabSqueakyTableDatabaseTable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3BuilderEqualsBuilder.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"
#include "java/sql/SQLException.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface CoTouchlabSqueakyFieldTypesEnumStringTypeTest () {
 @public
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *helper_;
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesEnumStringTypeTest, helper_, CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)

inline NSString *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_get_ENUM_COLUMN();
static NSString *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_ENUM_COLUMN = @"ourEnum";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesEnumStringTypeTest, ENUM_COLUMN, NSString *)

inline NSString *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_get_TABLE_NAME();
static NSString *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_TABLE_NAME = @"com_j256_ormlite_field_types_EnumStringTypeTest_LocalEnumString";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesEnumStringTypeTest, TABLE_NAME, NSString *)

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_getHelper(CoTouchlabSqueakyFieldTypesEnumStringTypeTest *self);

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString__Annotations$1();

__attribute__((unused)) static void CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_initWithNSString_withInt_(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *self, NSString *__name, jint __ordinal);

@implementation CoTouchlabSqueakyFieldTypesEnumStringTypeTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)before {
  JreStrongAssign(&helper_, CoTouchlabSqueakyFieldTypesEnumStringTypeTest_getHelper(self));
}

- (void)after {
  [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) close];
}

- (void)testEnumString {
  IOSClass *clazz = CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_class_();
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:clazz];
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *val = JreLoadEnum(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum, SECOND);
  NSString *valStr = [((CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *) nil_chk(val)) description];
  NSString *sqlVal = valStr;
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString *foo = create_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_init();
  JreStrongAssign(&foo->ourEnum_, val);
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:foo];
  OrgJunitAssert_assertTrueWithBoolean_(OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(foo, [((id<JavaUtilList>) nil_chk([((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list])) getWithInt:0], [IOSObjectArray arrayWithLength:0 type:NSString_class_()]));
}

- (void)testEnumStringNull {
  IOSClass *clazz = CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_class_();
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:clazz];
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString *foo = create_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_init();
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:foo];
  OrgJunitAssert_assertTrueWithBoolean_(OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(foo, [((id<JavaUtilList>) nil_chk([((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list])) getWithInt:0], [IOSObjectArray arrayWithLength:0 type:NSString_class_()]));
}

- (void)testUnknownEnumValue {
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_class_()];
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString *localEnumString = create_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_init();
  JreStrongAssign(&localEnumString->ourEnum_, JreLoadEnum(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum, FIRST));
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:localEnumString];
  [((AndroidDatabaseSqliteSQLiteDatabase *) nil_chk([((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getWritableDatabase])) execSQLWithNSString:JreStrcat("$$$", @"UPDATE ", CoTouchlabSqueakyFieldTypesEnumStringTypeTest_TABLE_NAME, @" set ourEnum = 'THIRD'")];
  [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list];
}

- (void)testCoverage {
  create_CoTouchlabSqueakyFieldTypesEnumStringType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(JreLoadEnum(CoTouchlabSqueakyFieldSqlType, STRING), [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]);
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper {
  return CoTouchlabSqueakyFieldTypesEnumStringTypeTest_getHelper(self);
}

- (void)dealloc {
  RELEASE_(helper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(before);
  methods[2].selector = @selector(after);
  methods[3].selector = @selector(testEnumString);
  methods[4].selector = @selector(testEnumStringNull);
  methods[5].selector = @selector(testUnknownEnumValue);
  methods[6].selector = @selector(testCoverage);
  methods[7].selector = @selector(getHelper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ENUM_COLUMN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "TABLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "helper_", "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$0, (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$1, "LJavaLangException;", (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$2, (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$3, (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$4, (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$5, &CoTouchlabSqueakyFieldTypesEnumStringTypeTest_ENUM_COLUMN, &CoTouchlabSqueakyFieldTypesEnumStringTypeTest_TABLE_NAME, "LCoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString;LCoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum;", (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$6 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesEnumStringTypeTest = { "EnumStringTypeTest", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, 9, -1, -1, 10 };
  return &_CoTouchlabSqueakyFieldTypesEnumStringTypeTest;
}

@end

void CoTouchlabSqueakyFieldTypesEnumStringTypeTest_init(CoTouchlabSqueakyFieldTypesEnumStringTypeTest *self) {
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_init(self);
}

CoTouchlabSqueakyFieldTypesEnumStringTypeTest *new_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesEnumStringTypeTest, init)
}

CoTouchlabSqueakyFieldTypesEnumStringTypeTest *create_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesEnumStringTypeTest, init)
}

CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_getHelper(CoTouchlabSqueakyFieldTypesEnumStringTypeTest *self) {
  return [self createHelperWithIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_class_() } count:1 type:IOSClass_class_()]];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaSqlSQLException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplContextDelegateTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesEnumStringTypeTest)

@implementation CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(ourEnum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ourEnum_", "LCoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString__Annotations$0, "LCoTouchlabSqueakyFieldTypesEnumStringTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString = { "LocalEnumString", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString;
}

@end

void CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_init(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString *new_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString, init)
}

CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString *create_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"ourEnum", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"com_j256_ormlite_field_types_EnumStringTypeTest_LocalEnumString") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_LocalEnumString)

J2OBJC_INITIALIZED_DEFN(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum)

CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_values_[2];

@implementation CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum

+ (IOSObjectArray *)values {
  return CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_values();
}

+ (CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *)valueOfWithNSString:(NSString *)name {
  return CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LCoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIRST", "LCoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SECOND", "LCoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum, FIRST), &JreEnum(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum, SECOND), "LCoTouchlabSqueakyFieldTypesEnumStringTypeTest;", "Ljava/lang/Enum<Lco/touchlab/squeaky/field/types/EnumStringTypeTest$OurEnum;>;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum = { "OurEnum", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x4018, 2, 2, 4, -1, -1, 5, -1 };
  return &_CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum;
}

+ (void)initialize {
  if (self == [CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 2 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"FIRST", @"SECOND",
    };
    for (jint i = 0; i < 2; i++) {
      (CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum)
  }
}

@end

void CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_initWithNSString_withInt_(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_values() {
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_initialize();
  return [IOSObjectArray arrayWithObjects:CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_values_ count:2 type:CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_class_()];
}

CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_valueOfWithNSString_(NSString *name) {
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_initialize();
  for (int i = 0; i < 2; i++) {
    CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *e = CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum *CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_fromOrdinal(NSUInteger ordinal) {
  CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesEnumStringTypeTest_OurEnum)
