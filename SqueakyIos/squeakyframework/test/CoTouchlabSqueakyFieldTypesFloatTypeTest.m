//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/types/FloatTypeTest.java
//

#include "CoTouchlabDopplTestingDopplContextDelegateTestRunner.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldDatabaseField.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"
#include "CoTouchlabSqueakyFieldTypesFloatType.h"
#include "CoTouchlabSqueakyFieldTypesFloatTypeTest.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "CoTouchlabSqueakyTableDatabaseTable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3BuilderEqualsBuilder.h"
#include "java/lang/Float.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface CoTouchlabSqueakyFieldTypesFloatTypeTest () {
 @public
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *helper_;
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesFloatTypeTest, helper_, CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)

inline NSString *CoTouchlabSqueakyFieldTypesFloatTypeTest_get_FLOAT_COLUMN();
static NSString *CoTouchlabSqueakyFieldTypesFloatTypeTest_FLOAT_COLUMN = @"floatField";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesFloatTypeTest, FLOAT_COLUMN, NSString *)

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesFloatTypeTest_getHelper(CoTouchlabSqueakyFieldTypesFloatTypeTest *self);

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj__Annotations$1();

NSString *CoTouchlabSqueakyFieldTypesFloatTypeTest_TABLE_NAME = @"com_j256_ormlite_field_types_FloatTypeTest_table";

@implementation CoTouchlabSqueakyFieldTypesFloatTypeTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesFloatTypeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)before {
  JreStrongAssign(&helper_, CoTouchlabSqueakyFieldTypesFloatTypeTest_getHelper(self));
}

- (void)after {
  [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) close];
}

- (void)testFloat {
  IOSClass *clazz = CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_class_();
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:clazz];
  jfloat val = 1331.221f;
  NSString *valStr = JavaLangFloat_toStringWithFloat_(val);
  CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat *foo = create_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_init();
  foo->floatField_ = val;
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:foo];
  OrgJunitAssert_assertTrueWithBoolean_(OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(foo, [((id<JavaUtilList>) nil_chk([((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list])) getWithInt:0], [IOSObjectArray arrayWithLength:0 type:NSString_class_()]));
}

- (void)testFloatPrimitiveNull {
  id<CoTouchlabSqueakyDaoDao> objDao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj_class_()];
  CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj *foo = create_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj_init();
  JreStrongAssign(&foo->floatField_, nil);
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(objDao)) createWithId:foo];
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_class_()];
  id<JavaUtilList> all = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) queryForAll])) list];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk(all)) size]);
  OrgJunitAssert_assertEqualsWithFloat_withFloat_withFloat_(0.0f, ((CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat *) nil_chk([all getWithInt:0]))->floatField_, 0.0f);
}

- (void)testCoverage {
  create_CoTouchlabSqueakyFieldTypesFloatType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(JreLoadEnum(CoTouchlabSqueakyFieldSqlType, FLOAT), [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]);
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper {
  return CoTouchlabSqueakyFieldTypesFloatTypeTest_getHelper(self);
}

- (void)dealloc {
  RELEASE_(helper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(before);
  methods[2].selector = @selector(after);
  methods[3].selector = @selector(testFloat);
  methods[4].selector = @selector(testFloatPrimitiveNull);
  methods[5].selector = @selector(testCoverage);
  methods[6].selector = @selector(getHelper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FLOAT_COLUMN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "helper_", "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TABLE_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$0, (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$1, "LJavaLangException;", (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$2, (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$3, (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$4, &CoTouchlabSqueakyFieldTypesFloatTypeTest_FLOAT_COLUMN, &CoTouchlabSqueakyFieldTypesFloatTypeTest_TABLE_NAME, "LCoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat;LCoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj;", (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$5 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesFloatTypeTest = { "FloatTypeTest", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 8, -1, -1, 9 };
  return &_CoTouchlabSqueakyFieldTypesFloatTypeTest;
}

@end

void CoTouchlabSqueakyFieldTypesFloatTypeTest_init(CoTouchlabSqueakyFieldTypesFloatTypeTest *self) {
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_init(self);
}

CoTouchlabSqueakyFieldTypesFloatTypeTest *new_CoTouchlabSqueakyFieldTypesFloatTypeTest_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesFloatTypeTest, init)
}

CoTouchlabSqueakyFieldTypesFloatTypeTest *create_CoTouchlabSqueakyFieldTypesFloatTypeTest_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesFloatTypeTest, init)
}

CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesFloatTypeTest_getHelper(CoTouchlabSqueakyFieldTypesFloatTypeTest *self) {
  return [self createHelperWithIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_class_() } count:1 type:IOSClass_class_()]];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplContextDelegateTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesFloatTypeTest)

@implementation CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "floatField_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat__Annotations$0, "LCoTouchlabSqueakyFieldTypesFloatTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat = { "LocalFloat", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat;
}

@end

void CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_init(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat *new_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat, init)
}

CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat *create_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"floatField", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"com_j256_ormlite_field_types_FloatTypeTest_table") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloat)

@implementation CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(floatField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "floatField_", "LJavaLangFloat;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj__Annotations$0, "LCoTouchlabSqueakyFieldTypesFloatTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj = { "LocalFloatObj", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj;
}

@end

void CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj_init(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj *new_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj, init)
}

CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj *create_CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"floatField", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"com_j256_ormlite_field_types_FloatTypeTest_table") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesFloatTypeTest_LocalFloatObj)
