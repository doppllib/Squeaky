//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/types/IntTypeTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldTypesIntTypeTest")
#ifdef RESTRICT_CoTouchlabSqueakyFieldTypesIntTypeTest
#define INCLUDE_ALL_CoTouchlabSqueakyFieldTypesIntTypeTest 0
#else
#define INCLUDE_ALL_CoTouchlabSqueakyFieldTypesIntTypeTest 1
#endif
#undef RESTRICT_CoTouchlabSqueakyFieldTypesIntTypeTest

#if !defined (CoTouchlabSqueakyFieldTypesIntTypeTest_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldTypesIntTypeTest || defined(INCLUDE_CoTouchlabSqueakyFieldTypesIntTypeTest))
#define CoTouchlabSqueakyFieldTypesIntTypeTest_

#define RESTRICT_CoTouchlabSqueakyFieldTypesBaseTypeTestHide 1
#define INCLUDE_CoTouchlabSqueakyFieldTypesBaseTypeTestHide 1
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"

@interface CoTouchlabSqueakyFieldTypesIntTypeTest : CoTouchlabSqueakyFieldTypesBaseTypeTestHide

#pragma mark Public

- (instancetype)init;

- (void)after;

- (void)before;

- (void)testCoverage;

- (void)testInt;

- (void)testIntPrimitiveNull;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldTypesIntTypeTest)

inline NSString *CoTouchlabSqueakyFieldTypesIntTypeTest_get_TABLE_NAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *CoTouchlabSqueakyFieldTypesIntTypeTest_TABLE_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesIntTypeTest, TABLE_NAME, NSString *)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesIntTypeTest_init(CoTouchlabSqueakyFieldTypesIntTypeTest *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesIntTypeTest *new_CoTouchlabSqueakyFieldTypesIntTypeTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesIntTypeTest *create_CoTouchlabSqueakyFieldTypesIntTypeTest_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldTypesIntTypeTest)

#endif

#if !defined (CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldTypesIntTypeTest || defined(INCLUDE_CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj))
#define CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj_

@class JavaLangInteger;

@interface CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj : NSObject {
 @public
  JavaLangInteger *intField_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj, intField_, JavaLangInteger *)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj_init(CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj *new_CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj *create_CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldTypesIntTypeTest_LocalIntObj)

#endif

#if !defined (CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldTypesIntTypeTest || defined(INCLUDE_CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt))
#define CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt_

@interface CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt : NSObject {
 @public
  jint intField_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt_init(CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt *new_CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt *create_CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldTypesIntTypeTest_LocalInt)

#endif

#pragma pop_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldTypesIntTypeTest")
