//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/InheritanceTest.java
//

#include "CoTouchlabDopplTestingDopplContextDelegateTestRunner.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldDatabaseField.h"
#include "CoTouchlabSqueakyFieldInheritanceTest.h"
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "CoTouchlabSqueakyTableDatabaseTable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3BuilderEqualsBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/Date.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface CoTouchlabSqueakyFieldInheritanceTest () {
 @public
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *helper_;
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldInheritanceTest, helper_, CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldInheritanceTest_getHelper(CoTouchlabSqueakyFieldInheritanceTest *self);

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_Foo__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_Foo__Annotations$1();

@implementation CoTouchlabSqueakyFieldInheritanceTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldInheritanceTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)before {
  JreStrongAssign(&helper_, CoTouchlabSqueakyFieldInheritanceTest_getHelper(self));
}

- (void)after {
  [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) close];
}

- (void)testForeignCollectionEager {
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldInheritanceTest_Foo_class_()];
  CoTouchlabSqueakyFieldInheritanceTest_Foo *foo = create_CoTouchlabSqueakyFieldInheritanceTest_Foo_initWithInt_withInt_withNSString_withJavaUtilDate_(22, 123, @"456", create_JavaUtilDate_init());
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:foo];
  CoTouchlabSqueakyFieldInheritanceTest_Foo *dbVal = [((id<JavaUtilList>) nil_chk([((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list])) getWithInt:0];
  OrgJunitAssert_assertTrueWithBoolean_(OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(foo, dbVal, [IOSObjectArray arrayWithLength:0 type:NSString_class_()]));
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper {
  return CoTouchlabSqueakyFieldInheritanceTest_getHelper(self);
}

- (void)dealloc {
  RELEASE_(helper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(before);
  methods[2].selector = @selector(after);
  methods[3].selector = @selector(testForeignCollectionEager);
  methods[4].selector = @selector(getHelper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "helper_", "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldInheritanceTest__Annotations$0, (void *)&CoTouchlabSqueakyFieldInheritanceTest__Annotations$1, "LJavaLangException;", (void *)&CoTouchlabSqueakyFieldInheritanceTest__Annotations$2, "LCoTouchlabSqueakyFieldInheritanceTest_BaseFoo;LCoTouchlabSqueakyFieldInheritanceTest_Foo;", (void *)&CoTouchlabSqueakyFieldInheritanceTest__Annotations$3 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldInheritanceTest = { "InheritanceTest", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, 4, -1, -1, 5 };
  return &_CoTouchlabSqueakyFieldInheritanceTest;
}

@end

void CoTouchlabSqueakyFieldInheritanceTest_init(CoTouchlabSqueakyFieldInheritanceTest *self) {
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_init(self);
}

CoTouchlabSqueakyFieldInheritanceTest *new_CoTouchlabSqueakyFieldInheritanceTest_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldInheritanceTest, init)
}

CoTouchlabSqueakyFieldInheritanceTest *create_CoTouchlabSqueakyFieldInheritanceTest_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldInheritanceTest, init)
}

CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldInheritanceTest_getHelper(CoTouchlabSqueakyFieldInheritanceTest *self) {
  return [self createHelperWithIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabSqueakyFieldInheritanceTest_Foo_class_() } count:1 type:IOSClass_class_()]];
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplContextDelegateTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldInheritanceTest)

@implementation CoTouchlabSqueakyFieldInheritanceTest_BaseFoo

- (instancetype)initWithInt:(jint)id_
                    withInt:(jint)aval
               withNSString:(NSString *)bval {
  CoTouchlabSqueakyFieldInheritanceTest_BaseFoo_initWithInt_withInt_withNSString_(self, id_, aval, bval);
  return self;
}

- (void)dealloc {
  RELEASE_(bval_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "I", .constantValue.asLong = 0, 0x11, 1, -1, -1, 2 },
    { "aval_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, 3 },
    { "bval_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, 4 },
  };
  static const void *ptrTable[] = { "IILNSString;", "id", (void *)&CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$0, (void *)&CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$1, (void *)&CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$2, "LCoTouchlabSqueakyFieldInheritanceTest;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldInheritanceTest_BaseFoo = { "BaseFoo", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0x408, 1, 3, 5, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyFieldInheritanceTest_BaseFoo;
}

@end

void CoTouchlabSqueakyFieldInheritanceTest_BaseFoo_initWithInt_withInt_withNSString_(CoTouchlabSqueakyFieldInheritanceTest_BaseFoo *self, jint id_, jint aval, NSString *bval) {
  NSObject_init(self);
  self->id__ = id_;
  self->aval_ = aval;
  JreStrongAssign(&self->bval_, bval);
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, true, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_BaseFoo__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldInheritanceTest_BaseFoo)

@implementation CoTouchlabSqueakyFieldInheritanceTest_Foo

- (instancetype)initWithInt:(jint)id_
                    withInt:(jint)aval
               withNSString:(NSString *)bval
           withJavaUtilDate:(JavaUtilDate *)cval {
  CoTouchlabSqueakyFieldInheritanceTest_Foo_initWithInt_withInt_withNSString_withJavaUtilDate_(self, id_, aval, bval, cval);
  return self;
}

- (void)dealloc {
  RELEASE_(cval_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:withNSString:withJavaUtilDate:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cval_", "LJavaUtilDate;", .constantValue.asLong = 0, 0x11, -1, -1, -1, 1 },
  };
  static const void *ptrTable[] = { "IILNSString;LJavaUtilDate;", (void *)&CoTouchlabSqueakyFieldInheritanceTest_Foo__Annotations$0, "LCoTouchlabSqueakyFieldInheritanceTest;", (void *)&CoTouchlabSqueakyFieldInheritanceTest_Foo__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldInheritanceTest_Foo = { "Foo", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0x8, 1, 1, 2, -1, -1, -1, 3 };
  return &_CoTouchlabSqueakyFieldInheritanceTest_Foo;
}

@end

void CoTouchlabSqueakyFieldInheritanceTest_Foo_initWithInt_withInt_withNSString_withJavaUtilDate_(CoTouchlabSqueakyFieldInheritanceTest_Foo *self, jint id_, jint aval, NSString *bval, JavaUtilDate *cval) {
  CoTouchlabSqueakyFieldInheritanceTest_BaseFoo_initWithInt_withInt_withNSString_(self, id_, aval, bval);
  JreStrongAssign(&self->cval_, cval);
}

CoTouchlabSqueakyFieldInheritanceTest_Foo *new_CoTouchlabSqueakyFieldInheritanceTest_Foo_initWithInt_withInt_withNSString_withJavaUtilDate_(jint id_, jint aval, NSString *bval, JavaUtilDate *cval) {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldInheritanceTest_Foo, initWithInt_withInt_withNSString_withJavaUtilDate_, id_, aval, bval, cval)
}

CoTouchlabSqueakyFieldInheritanceTest_Foo *create_CoTouchlabSqueakyFieldInheritanceTest_Foo_initWithInt_withInt_withNSString_withJavaUtilDate_(jint id_, jint aval, NSString *bval, JavaUtilDate *cval) {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldInheritanceTest_Foo, initWithInt_withInt_withNSString_withJavaUtilDate_, id_, aval, bval, cval)
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_Foo__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldInheritanceTest_Foo__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldInheritanceTest_Foo)
