//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/types/DoubleTypeTest.java
//

#include "CoTouchlabDopplTestingDopplContextDelegateTestRunner.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldDatabaseField.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"
#include "CoTouchlabSqueakyFieldTypesDoubleType.h"
#include "CoTouchlabSqueakyFieldTypesDoubleTypeTest.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "CoTouchlabSqueakyTableDatabaseTable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3BuilderEqualsBuilder.h"
#include "java/lang/Double.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface CoTouchlabSqueakyFieldTypesDoubleTypeTest () {
 @public
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *helper_;
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesDoubleTypeTest, helper_, CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)

inline NSString *CoTouchlabSqueakyFieldTypesDoubleTypeTest_get_DOUBLE_COLUMN();
static NSString *CoTouchlabSqueakyFieldTypesDoubleTypeTest_DOUBLE_COLUMN = @"doubleField";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesDoubleTypeTest, DOUBLE_COLUMN, NSString *)

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesDoubleTypeTest_getHelper(CoTouchlabSqueakyFieldTypesDoubleTypeTest *self);

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj__Annotations$1();

NSString *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LOCAL_DOUBLE = @"LocalDouble";

@implementation CoTouchlabSqueakyFieldTypesDoubleTypeTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesDoubleTypeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)before {
  JreStrongAssign(&helper_, CoTouchlabSqueakyFieldTypesDoubleTypeTest_getHelper(self));
}

- (void)after {
  [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) close];
}

- (void)testDouble {
  IOSClass *clazz = CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_class_();
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:clazz];
  jdouble val = 13313323131.221;
  NSString *valStr = JavaLangDouble_toStringWithDouble_(val);
  CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble *foo = create_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_init();
  foo->doubleField_ = val;
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:foo];
  OrgJunitAssert_assertTrueWithBoolean_(OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(foo, [((id<JavaUtilList>) nil_chk([((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list])) getWithInt:0], [IOSObjectArray arrayWithLength:0 type:NSString_class_()]));
}

- (void)testDoublePrimitiveNull {
  id<CoTouchlabSqueakyDaoDao> objDao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj_class_()];
  CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj *foo = create_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj_init();
  JreStrongAssign(&foo->doubleField_, nil);
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(objDao)) createWithId:foo];
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_class_()];
  id<JavaUtilList> all = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) queryForAll])) list];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk(all)) size]);
  OrgJunitAssert_assertEqualsWithDouble_withDouble_withDouble_(0.0f, ((CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble *) nil_chk([all getWithInt:0]))->doubleField_, 0.0f);
}

- (void)testCoverage {
  create_CoTouchlabSqueakyFieldTypesDoubleType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(JreLoadEnum(CoTouchlabSqueakyFieldSqlType, DOUBLE), [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]);
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper {
  return CoTouchlabSqueakyFieldTypesDoubleTypeTest_getHelper(self);
}

- (void)dealloc {
  RELEASE_(helper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 5, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(before);
  methods[2].selector = @selector(after);
  methods[3].selector = @selector(testDouble);
  methods[4].selector = @selector(testDoublePrimitiveNull);
  methods[5].selector = @selector(testCoverage);
  methods[6].selector = @selector(getHelper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DOUBLE_COLUMN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "LOCAL_DOUBLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "helper_", "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$0, (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$1, "LJavaLangException;", (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$2, (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$3, (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$4, &CoTouchlabSqueakyFieldTypesDoubleTypeTest_DOUBLE_COLUMN, &CoTouchlabSqueakyFieldTypesDoubleTypeTest_LOCAL_DOUBLE, "LCoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble;LCoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj;", (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$5 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesDoubleTypeTest = { "DoubleTypeTest", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 8, -1, -1, 9 };
  return &_CoTouchlabSqueakyFieldTypesDoubleTypeTest;
}

@end

void CoTouchlabSqueakyFieldTypesDoubleTypeTest_init(CoTouchlabSqueakyFieldTypesDoubleTypeTest *self) {
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_init(self);
}

CoTouchlabSqueakyFieldTypesDoubleTypeTest *new_CoTouchlabSqueakyFieldTypesDoubleTypeTest_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDoubleTypeTest, init)
}

CoTouchlabSqueakyFieldTypesDoubleTypeTest *create_CoTouchlabSqueakyFieldTypesDoubleTypeTest_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDoubleTypeTest, init)
}

CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesDoubleTypeTest_getHelper(CoTouchlabSqueakyFieldTypesDoubleTypeTest *self) {
  return [self createHelperWithIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_class_() } count:1 type:IOSClass_class_()]];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplContextDelegateTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesDoubleTypeTest)

@implementation CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "doubleField_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble__Annotations$0, "LCoTouchlabSqueakyFieldTypesDoubleTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble = { "LocalDouble", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble;
}

@end

void CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_init(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble *new_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble, init)
}

CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble *create_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"doubleField", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"LocalDouble") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDouble)

@implementation CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(doubleField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "doubleField_", "LJavaLangDouble;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj__Annotations$0, "LCoTouchlabSqueakyFieldTypesDoubleTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj = { "LocalDoubleObj", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj;
}

@end

void CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj_init(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj *new_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj, init)
}

CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj *create_CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"doubleField", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"LocalDouble") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesDoubleTypeTest_LocalDoubleObj)
