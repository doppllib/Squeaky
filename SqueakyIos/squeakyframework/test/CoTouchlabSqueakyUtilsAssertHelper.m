//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/utils/AssertHelper.java
//

#include "CoTouchlabSqueakyUtilsAssertHelper.h"
#include "J2ObjC_source.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "junit/framework/Assert.h"

@implementation CoTouchlabSqueakyUtilsAssertHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyUtilsAssertHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)assertEqualsWithJavaUtilCollection:(id<JavaUtilCollection>)first
                    withJavaUtilCollection:(id<JavaUtilCollection>)second {
  CoTouchlabSqueakyUtilsAssertHelper_assertEqualsWithJavaUtilCollection_withJavaUtilCollection_(first, second);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assertEqualsWithJavaUtilCollection:withJavaUtilCollection:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "assertEquals", "LJavaUtilCollection;LJavaUtilCollection;" };
  static const J2ObjcClassInfo _CoTouchlabSqueakyUtilsAssertHelper = { "AssertHelper", "co.touchlab.squeaky.utils", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_CoTouchlabSqueakyUtilsAssertHelper;
}

@end

void CoTouchlabSqueakyUtilsAssertHelper_init(CoTouchlabSqueakyUtilsAssertHelper *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyUtilsAssertHelper *new_CoTouchlabSqueakyUtilsAssertHelper_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyUtilsAssertHelper, init)
}

CoTouchlabSqueakyUtilsAssertHelper *create_CoTouchlabSqueakyUtilsAssertHelper_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyUtilsAssertHelper, init)
}

void CoTouchlabSqueakyUtilsAssertHelper_assertEqualsWithJavaUtilCollection_withJavaUtilCollection_(id<JavaUtilCollection> first, id<JavaUtilCollection> second) {
  CoTouchlabSqueakyUtilsAssertHelper_initialize();
  id<JavaUtilIterator> firstIter = [((id<JavaUtilCollection>) nil_chk(first)) iterator];
  id<JavaUtilIterator> secondIter = [((id<JavaUtilCollection>) nil_chk(second)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(firstIter)) hasNext]) {
    id a = [firstIter next];
    id b = [((id<JavaUtilIterator>) nil_chk(secondIter)) next];
    JunitFrameworkAssert_assertEqualsWithId_withId_(a, b);
  }
  JunitFrameworkAssert_assertFalseWithBoolean_([((id<JavaUtilIterator>) nil_chk(secondIter)) hasNext]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyUtilsAssertHelper)
