//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/types/BigIntegerTypeTest.java
//

#include "CoTouchlabDopplTestingDopplContextDelegateTestRunner.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldDatabaseField.h"
#include "CoTouchlabSqueakyFieldSqlType.h"
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"
#include "CoTouchlabSqueakyFieldTypesBigIntegerType.h"
#include "CoTouchlabSqueakyFieldTypesBigIntegerTypeTest.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "CoTouchlabSqueakyTableDatabaseTable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3BuilderEqualsBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/math/BigInteger.h"
#include "java/sql/SQLException.h"
#include "java/util/List.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface CoTouchlabSqueakyFieldTypesBigIntegerTypeTest () {
 @public
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *helper_;
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest, helper_, CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)

inline NSString *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_get_BIGINTEGER_COLUMN();
static NSString *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BIGINTEGER_COLUMN = @"bigInteger";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest, BIGINTEGER_COLUMN, NSString *)

inline NSString *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_get_DEFAULT_VALUE();
static NSString *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_DEFAULT_VALUE = @"4724724378237982347983478932478923478934789342473892342789";
J2OBJC_STATIC_FIELD_OBJ_FINAL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest, DEFAULT_VALUE, NSString *)

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_getHelper(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest *self);

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$5();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$6();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault__Annotations$1();

@implementation CoTouchlabSqueakyFieldTypesBigIntegerTypeTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)before {
  JreStrongAssign(&helper_, CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_getHelper(self));
}

- (void)after {
  [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) close];
}

- (void)testBigInteger {
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_class_()];
  JavaMathBigInteger *val = create_JavaMathBigInteger_initWithNSString_(@"324234234234234234234234246467647647463345345435345345345345345345345345345345345346356524234234");
  NSString *valStr = [val description];
  CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger *foo = create_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_init();
  JreStrongAssign(&foo->bigInteger_, val);
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:foo];
  OrgJunitAssert_assertTrueWithBoolean_(OrgApacheCommonsLang3BuilderEqualsBuilder_reflectionEqualsWithId_withId_withNSStringArray_(foo, [((id<JavaUtilList>) nil_chk([((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list])) getWithInt:0], [IOSObjectArray arrayWithLength:0 type:NSString_class_()]));
}

- (void)testBigIntegerNull {
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_class_()];
  CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger *foo = create_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_init();
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) createWithId:foo];
  id<JavaUtilList> results = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([dao queryForAll])) list];
  OrgJunitAssert_assertEqualsWithLong_withLong_(1, [((id<JavaUtilList>) nil_chk(results)) size]);
  OrgJunitAssert_assertNullWithId_(((CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger *) nil_chk([results getWithInt:0]))->bigInteger_);
}

- (void)testBigIntegerInvalidDbValue {
  id<CoTouchlabSqueakyDaoDao> dao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_class_()];
  id<CoTouchlabSqueakyDaoDao> notDao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger_class_()];
  CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger *notFoo = create_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger_init();
  JreStrongAssign(&notFoo->bigInteger_, @"not valid form");
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(notDao)) createWithId:notFoo];
  [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((id<CoTouchlabSqueakyDaoDao>) nil_chk(dao)) queryForAll])) list];
}

- (void)testCoverage {
  create_CoTouchlabSqueakyFieldTypesBigIntegerType_initWithCoTouchlabSqueakyFieldSqlType_withIOSClassArray_(JreLoadEnum(CoTouchlabSqueakyFieldSqlType, BIG_DECIMAL), [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]);
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper {
  return CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_getHelper(self);
}

- (void)dealloc {
  RELEASE_(helper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 4, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 5, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 6, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(before);
  methods[2].selector = @selector(after);
  methods[3].selector = @selector(testBigInteger);
  methods[4].selector = @selector(testBigIntegerNull);
  methods[5].selector = @selector(testBigIntegerInvalidDbValue);
  methods[6].selector = @selector(testCoverage);
  methods[7].selector = @selector(getHelper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BIGINTEGER_COLUMN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "DEFAULT_VALUE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "helper_", "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$0, (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$1, "LJavaLangException;", (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$2, (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$3, (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$4, (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$5, &CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BIGINTEGER_COLUMN, &CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_DEFAULT_VALUE, "LCoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger;LCoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger;LCoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault;", (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$6 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBigIntegerTypeTest = { "BigIntegerTypeTest", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0x1, 8, 3, -1, 9, -1, -1, 10 };
  return &_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest;
}

@end

void CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_init(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest *self) {
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_init(self);
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest *new_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest, init)
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest *create_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest, init)
}

CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_getHelper(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest *self) {
  return [self createHelperWithIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_class_() } count:1 type:IOSClass_class_()]];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(JavaSqlSQLException_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$5() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest__Annotations$6() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplContextDelegateTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest)

@implementation CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(bigInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bigInteger_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger__Annotations$0, "LCoTouchlabSqueakyFieldTypesBigIntegerTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger = { "LocalBigInteger", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger;
}

@end

void CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_init(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger *new_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger, init)
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger *create_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"bigInteger", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"LocalBigInteger") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_LocalBigInteger)

@implementation CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(bigInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bigInteger_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger__Annotations$0, "LCoTouchlabSqueakyFieldTypesBigIntegerTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger = { "NotBigInteger", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger;
}

@end

void CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger_init(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger *new_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger, init)
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger *create_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"bigInteger", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"LocalBigInteger") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_NotBigInteger)

@implementation CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(bigInteger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bigInteger_", "LJavaMathBigInteger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 0 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault__Annotations$0, "LCoTouchlabSqueakyFieldTypesBigIntegerTypeTest;", (void *)&CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault = { "BigIntegerBadDefault", "co.touchlab.squeaky.field.types", ptrTable, methods, fields, 7, 0xc, 1, 1, 1, -1, -1, -1, 2 };
  return &_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault;
}

@end

void CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault_init(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault *new_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault, init)
}

CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault *create_CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"not valid form", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesBigIntegerTypeTest_BigIntegerBadDefault)
