//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/ForeignFieldTest.java
//

#include "CoTouchlabDopplTestingDopplContextDelegateTestRunner.h"
#include "CoTouchlabSqueakyDaoDao.h"
#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldDatabaseField.h"
#include "CoTouchlabSqueakyFieldForeignFieldTest.h"
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"
#include "CoTouchlabSqueakyFieldTypesVoidType.h"
#include "CoTouchlabSqueakyStmtWhere.h"
#include "CoTouchlabSqueakyTableDatabaseTable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/annotation/Annotation.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Random.h"
#include "org/junit/After.h"
#include "org/junit/Assert.h"
#include "org/junit/Before.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

@interface CoTouchlabSqueakyFieldForeignFieldTest () {
 @public
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *helper_;
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper;

@end

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignFieldTest, helper_, CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)

__attribute__((unused)) static CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldForeignFieldTest_getHelper(CoTouchlabSqueakyFieldForeignFieldTest *self);

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$3();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$4();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$3();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$1();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$2();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$3();

NSString *CoTouchlabSqueakyFieldForeignFieldTest_PREFIX = @"Hello ";

@implementation CoTouchlabSqueakyFieldForeignFieldTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldForeignFieldTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)before {
  JreStrongAssign(&helper_, CoTouchlabSqueakyFieldForeignFieldTest_getHelper(self));
}

- (void)after {
  [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) close];
}

- (void)testEagerFetch {
  id<CoTouchlabSqueakyDaoDao> parentDao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldForeignFieldTest_Parent_class_()];
  CoTouchlabSqueakyFieldForeignFieldTest_Parent *parent = create_CoTouchlabSqueakyFieldForeignFieldTest_Parent_init();
  JreStrongAssign(&parent->name_, @"test");
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(parentDao)) createWithId:parent];
  id<CoTouchlabSqueakyDaoDao> childDao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldForeignFieldTest_ChildEager_class_()];
  JavaUtilRandom *random = create_JavaUtilRandom_init();
  id<JavaUtilList> children = create_JavaUtilArrayList_init();
  for (jint i = 0; i < 20; i++) {
    CoTouchlabSqueakyFieldForeignFieldTest_ChildEager *child = create_CoTouchlabSqueakyFieldForeignFieldTest_ChildEager_init();
    JreStrongAssign(&child->asdf_, JreStrcat("$I", CoTouchlabSqueakyFieldForeignFieldTest_PREFIX, [random nextIntWithInt:10000]));
    JreStrongAssign(&child->parent_, parent);
    [((id<CoTouchlabSqueakyDaoDao>) nil_chk(childDao)) createWithId:child];
    [children addWithId:child];
  }
  id<JavaUtilList> childEagers = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((id<CoTouchlabSqueakyDaoDao>) nil_chk(childDao)) queryForAll])) list];
  for (CoTouchlabSqueakyFieldForeignFieldTest_ChildEager * __strong childEager in nil_chk(childEagers)) {
    OrgJunitAssert_assertTrueWithBoolean_([((NSString *) nil_chk(((CoTouchlabSqueakyFieldForeignFieldTest_ChildEager *) nil_chk(childEager))->asdf_)) hasPrefix:CoTouchlabSqueakyFieldForeignFieldTest_PREFIX]);
  }
}

- (void)testForeignCollection {
  id<CoTouchlabSqueakyDaoDao> parentDao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldForeignFieldTest_Parent_class_()];
  CoTouchlabSqueakyFieldForeignFieldTest_Parent *parent = create_CoTouchlabSqueakyFieldForeignFieldTest_Parent_init();
  JreStrongAssign(&parent->name_, @"test");
  [((id<CoTouchlabSqueakyDaoDao>) nil_chk(parentDao)) createWithId:parent];
  id<CoTouchlabSqueakyDaoDao> childDao = [((CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *) nil_chk(helper_)) getDaoWithIOSClass:CoTouchlabSqueakyFieldForeignFieldTest_Child_class_()];
  JavaUtilRandom *random = create_JavaUtilRandom_init();
  id<JavaUtilList> children = create_JavaUtilArrayList_init();
  for (jint i = 0; i < 20; i++) {
    CoTouchlabSqueakyFieldForeignFieldTest_Child *child = create_CoTouchlabSqueakyFieldForeignFieldTest_Child_init();
    JreStrongAssign(&child->asdf_, JreStrcat("$I", CoTouchlabSqueakyFieldForeignFieldTest_PREFIX, [random nextIntWithInt:10000]));
    JreStrongAssign(&child->parent_, parent);
    [((id<CoTouchlabSqueakyDaoDao>) nil_chk(childDao)) createWithId:child];
    [children addWithId:child];
  }
  id<JavaUtilList> statements = create_JavaUtilArrayList_init();
  {
    CoTouchlabSqueakyStmtWhere *where = create_CoTouchlabSqueakyStmtWhere_initWithCoTouchlabSqueakyDaoDao_(childDao);
    CoTouchlabSqueakyStmtWhere *subwhere = [where eqWithNSString:@"parent" withId:parent];
    [statements addWithId:[((CoTouchlabSqueakyStmtWhere *) nil_chk(subwhere)) getWhereStatementWithBoolean:true]];
    id<JavaUtilList> childList = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([((id<CoTouchlabSqueakyDaoDao>) nil_chk(childDao)) queryWithCoTouchlabSqueakyDaoQuery:subwhere])) list];
    OrgJunitAssert_assertEqualsWithLong_withLong_([((id<JavaUtilList>) nil_chk(childList)) size], 20);
  }
  {
    CoTouchlabSqueakyStmtWhere *where = create_CoTouchlabSqueakyStmtWhere_initWithCoTouchlabSqueakyDaoDao_(childDao);
    CoTouchlabSqueakyStmtWhere *subwhere = [where eqWithNSString:@"parent_id" withId:JavaLangInteger_valueOfWithInt_(parent->id__)];
    [statements addWithId:[((CoTouchlabSqueakyStmtWhere *) nil_chk(subwhere)) getWhereStatementWithBoolean:true]];
    id<JavaUtilList> childList = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([childDao queryWithCoTouchlabSqueakyDaoQuery:subwhere])) list];
    OrgJunitAssert_assertEqualsWithLong_withLong_([((id<JavaUtilList>) nil_chk(childList)) size], 20);
  }
  {
    CoTouchlabSqueakyStmtWhere *where = create_CoTouchlabSqueakyStmtWhere_initWithCoTouchlabSqueakyDaoDao_(childDao);
    CoTouchlabSqueakyStmtWhere *subwhere = [where eqWithNSString:@"parent_id" withId:parent];
    [statements addWithId:[((CoTouchlabSqueakyStmtWhere *) nil_chk(subwhere)) getWhereStatementWithBoolean:true]];
    id<JavaUtilList> childList = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([childDao queryWithCoTouchlabSqueakyDaoQuery:subwhere])) list];
    OrgJunitAssert_assertEqualsWithLong_withLong_([((id<JavaUtilList>) nil_chk(childList)) size], 20);
  }
  {
    CoTouchlabSqueakyStmtWhere *where = create_CoTouchlabSqueakyStmtWhere_initWithCoTouchlabSqueakyDaoDao_(childDao);
    CoTouchlabSqueakyStmtWhere *subwhere = [where eqWithNSString:@"parent" withId:JavaLangInteger_valueOfWithInt_(parent->id__)];
    [statements addWithId:[((CoTouchlabSqueakyStmtWhere *) nil_chk(subwhere)) getWhereStatementWithBoolean:true]];
    id<JavaUtilList> childList = [((id<CoTouchlabSqueakyDaoDao_QueryModifiers>) nil_chk([childDao queryWithCoTouchlabSqueakyDaoQuery:subwhere])) list];
    OrgJunitAssert_assertEqualsWithLong_withLong_([((id<JavaUtilList>) nil_chk(childList)) size], 20);
  }
  NSString *check = nil;
  for (NSString * __strong statement in statements) {
    if (check == nil) {
      check = statement == nil ? @"whoops" : statement;
    }
    else {
      OrgJunitAssert_assertEqualsWithId_withId_(check, statement);
    }
  }
}

- (CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *)getHelper {
  return CoTouchlabSqueakyFieldForeignFieldTest_getHelper(self);
}

- (void)dealloc {
  RELEASE_(helper_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 1, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 3, -1 },
    { NULL, "V", 0x1, -1, -1, 2, -1, 4, -1 },
    { NULL, "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(before);
  methods[2].selector = @selector(after);
  methods[3].selector = @selector(testEagerFetch);
  methods[4].selector = @selector(testForeignCollection);
  methods[5].selector = @selector(getHelper);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "helper_", "LCoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldForeignFieldTest__Annotations$0, (void *)&CoTouchlabSqueakyFieldForeignFieldTest__Annotations$1, "LJavaLangException;", (void *)&CoTouchlabSqueakyFieldForeignFieldTest__Annotations$2, (void *)&CoTouchlabSqueakyFieldForeignFieldTest__Annotations$3, &CoTouchlabSqueakyFieldForeignFieldTest_PREFIX, "LCoTouchlabSqueakyFieldForeignFieldTest_Parent;LCoTouchlabSqueakyFieldForeignFieldTest_Child;LCoTouchlabSqueakyFieldForeignFieldTest_ChildEager;", (void *)&CoTouchlabSqueakyFieldForeignFieldTest__Annotations$4 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldForeignFieldTest = { "ForeignFieldTest", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, 6, -1, -1, 7 };
  return &_CoTouchlabSqueakyFieldForeignFieldTest;
}

@end

void CoTouchlabSqueakyFieldForeignFieldTest_init(CoTouchlabSqueakyFieldForeignFieldTest *self) {
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_init(self);
}

CoTouchlabSqueakyFieldForeignFieldTest *new_CoTouchlabSqueakyFieldForeignFieldTest_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldForeignFieldTest, init)
}

CoTouchlabSqueakyFieldForeignFieldTest *create_CoTouchlabSqueakyFieldForeignFieldTest_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldForeignFieldTest, init)
}

CoTouchlabSqueakyFieldTypesBaseTypeTestHide_SimpleHelper *CoTouchlabSqueakyFieldForeignFieldTest_getHelper(CoTouchlabSqueakyFieldForeignFieldTest *self) {
  return [self createHelperWithIOSClassArray:[IOSObjectArray arrayWithObjects:(id[]){ CoTouchlabSqueakyFieldForeignFieldTest_Child_class_(), CoTouchlabSqueakyFieldForeignFieldTest_ChildEager_class_(), CoTouchlabSqueakyFieldForeignFieldTest_Parent_class_() } count:3 type:IOSClass_class_()]];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitBefore() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitAfter() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest__Annotations$4() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplContextDelegateTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldForeignFieldTest)

@implementation CoTouchlabSqueakyFieldForeignFieldTest_Parent

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldForeignFieldTest_Parent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(name_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "I", .constantValue.asLong = 0, 0x0, 0, -1, -1, 1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 2 },
  };
  static const void *ptrTable[] = { "id", (void *)&CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$0, (void *)&CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$1, "LCoTouchlabSqueakyFieldForeignFieldTest;", (void *)&CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$2 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldForeignFieldTest_Parent = { "Parent", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0xc, 1, 2, 3, -1, -1, -1, 4 };
  return &_CoTouchlabSqueakyFieldForeignFieldTest_Parent;
}

@end

void CoTouchlabSqueakyFieldForeignFieldTest_Parent_init(CoTouchlabSqueakyFieldForeignFieldTest_Parent *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldForeignFieldTest_Parent *new_CoTouchlabSqueakyFieldForeignFieldTest_Parent_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldForeignFieldTest_Parent, init)
}

CoTouchlabSqueakyFieldForeignFieldTest_Parent *create_CoTouchlabSqueakyFieldForeignFieldTest_Parent_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldForeignFieldTest_Parent, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", true, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Parent__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldForeignFieldTest_Parent)

@implementation CoTouchlabSqueakyFieldForeignFieldTest_Child

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldForeignFieldTest_Child_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(asdf_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "I", .constantValue.asLong = 0, 0x0, 0, -1, -1, 1 },
    { "asdf_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 2 },
    { "parent_", "LCoTouchlabSqueakyFieldForeignFieldTest_Parent;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 3 },
  };
  static const void *ptrTable[] = { "id", (void *)&CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$0, (void *)&CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$1, (void *)&CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$2, "LCoTouchlabSqueakyFieldForeignFieldTest;", (void *)&CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$3 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldForeignFieldTest_Child = { "Child", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0xc, 1, 3, 4, -1, -1, -1, 5 };
  return &_CoTouchlabSqueakyFieldForeignFieldTest_Child;
}

@end

void CoTouchlabSqueakyFieldForeignFieldTest_Child_init(CoTouchlabSqueakyFieldForeignFieldTest_Child *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldForeignFieldTest_Child *new_CoTouchlabSqueakyFieldForeignFieldTest_Child_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldForeignFieldTest_Child, init)
}

CoTouchlabSqueakyFieldForeignFieldTest_Child *create_CoTouchlabSqueakyFieldForeignFieldTest_Child_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldForeignFieldTest_Child, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", true, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", true, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_Child__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldForeignFieldTest_Child)

@implementation CoTouchlabSqueakyFieldForeignFieldTest_ChildEager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldForeignFieldTest_ChildEager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(asdf_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "id__", "I", .constantValue.asLong = 0, 0x0, 0, -1, -1, 1 },
    { "asdf_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 2 },
    { "parent_", "LCoTouchlabSqueakyFieldForeignFieldTest_Parent;", .constantValue.asLong = 0, 0x0, -1, -1, -1, 3 },
  };
  static const void *ptrTable[] = { "id", (void *)&CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$0, (void *)&CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$1, (void *)&CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$2, "LCoTouchlabSqueakyFieldForeignFieldTest;", (void *)&CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$3 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldForeignFieldTest_ChildEager = { "ChildEager", "co.touchlab.squeaky.field", ptrTable, methods, fields, 7, 0xc, 1, 3, 4, -1, -1, -1, 5 };
  return &_CoTouchlabSqueakyFieldForeignFieldTest_ChildEager;
}

@end

void CoTouchlabSqueakyFieldForeignFieldTest_ChildEager_init(CoTouchlabSqueakyFieldForeignFieldTest_ChildEager *self) {
  NSObject_init(self);
}

CoTouchlabSqueakyFieldForeignFieldTest_ChildEager *new_CoTouchlabSqueakyFieldForeignFieldTest_ChildEager_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldForeignFieldTest_ChildEager, init)
}

CoTouchlabSqueakyFieldForeignFieldTest_ChildEager *create_CoTouchlabSqueakyFieldForeignFieldTest_ChildEager_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldForeignFieldTest_ChildEager, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", true, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", false, false, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyFieldDatabaseField(true, @"", JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN), @"__ormlite__ no default value string was specified", true, true, @"", false, false, false, @"", CoTouchlabSqueakyFieldTypesVoidType_class_(), false, false, false, @"", false) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldForeignFieldTest_ChildEager__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_CoTouchlabSqueakyTableDatabaseTable(@"") } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldForeignFieldTest_ChildEager)
