//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/ForeignCollectionTest.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest")
#ifdef RESTRICT_CoTouchlabSqueakyFieldForeignCollectionTest
#define INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest 0
#else
#define INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest 1
#endif
#undef RESTRICT_CoTouchlabSqueakyFieldForeignCollectionTest

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest))
#define CoTouchlabSqueakyFieldForeignCollectionTest_

#define RESTRICT_CoTouchlabSqueakyFieldTypesBaseTypeTestHide 1
#define INCLUDE_CoTouchlabSqueakyFieldTypesBaseTypeTestHide 1
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"

@interface CoTouchlabSqueakyFieldForeignCollectionTest : CoTouchlabSqueakyFieldTypesBaseTypeTestHide

#pragma mark Public

- (instancetype)init;

- (void)after;

- (void)before;

- (void)testForeignCollectionEager;

- (void)testForeignCollectionLazy;

- (void)testForeignCollectionOrder;

- (void)testForeignCollectionString;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_init(CoTouchlabSqueakyFieldForeignCollectionTest *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest *new_CoTouchlabSqueakyFieldForeignCollectionTest_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest *create_CoTouchlabSqueakyFieldForeignCollectionTest_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager_

@protocol JavaUtilList;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager : NSObject {
 @public
  jint id__;
  NSString *name_;
  id<JavaUtilList> children_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager, name_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager, children_, id<JavaUtilList>)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager_init(CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager *new_CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager *create_CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager_

@class CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager : NSObject {
 @public
  jint id__;
  NSString *asdf_;
  CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager *parent_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager, asdf_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager, parent_, CoTouchlabSqueakyFieldForeignCollectionTest_ParentEager *)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager_init(CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager *new_CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager *create_CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildEager)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy_

@protocol JavaUtilList;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy : NSObject {
 @public
  jint id__;
  NSString *name_;
  id<JavaUtilList> children_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy, name_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy, children_, id<JavaUtilList>)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy_init(CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy *new_CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy *create_CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy_

@class CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy : NSObject {
 @public
  jint id__;
  NSString *asdf_;
  CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy *parent_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy, asdf_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy, parent_, CoTouchlabSqueakyFieldForeignCollectionTest_ParentLazy *)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy_init(CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy *new_CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy *create_CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildLazy)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ParentString_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ParentString))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ParentString_

@protocol JavaUtilList;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ParentString : NSObject {
 @public
  NSString *id__;
  NSString *name_;
  id<JavaUtilList> children_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ParentString)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentString, id__, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentString, name_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentString, children_, id<JavaUtilList>)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ParentString_init(CoTouchlabSqueakyFieldForeignCollectionTest_ParentString *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentString *new_CoTouchlabSqueakyFieldForeignCollectionTest_ParentString_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentString *create_CoTouchlabSqueakyFieldForeignCollectionTest_ParentString_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentString)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ChildString_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ChildString))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ChildString_

@class CoTouchlabSqueakyFieldForeignCollectionTest_ParentString;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ChildString : NSObject {
 @public
  NSString *id__;
  NSString *asdf_;
  CoTouchlabSqueakyFieldForeignCollectionTest_ParentString *parent_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ChildString)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildString, id__, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildString, asdf_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildString, parent_, CoTouchlabSqueakyFieldForeignCollectionTest_ParentString *)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ChildString_init(CoTouchlabSqueakyFieldForeignCollectionTest_ChildString *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildString *new_CoTouchlabSqueakyFieldForeignCollectionTest_ChildString_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildString *create_CoTouchlabSqueakyFieldForeignCollectionTest_ChildString_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildString)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder_

@protocol JavaUtilList;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder : NSObject {
 @public
  jint id__;
  NSString *name_;
  id<JavaUtilList> children_;
}

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder, name_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder, children_, id<JavaUtilList>)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder_init(CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder *new_CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder *create_CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder)

#endif

#if !defined (CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder_) && (INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest || defined(INCLUDE_CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder))
#define CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder_

@class CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder;

@interface CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder : NSObject {
 @public
  jint id__;
  NSString *asdf_;
  CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder *parent_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

#pragma mark Protected

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder)

J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder, asdf_, NSString *)
J2OBJC_FIELD_SETTER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder, parent_, CoTouchlabSqueakyFieldForeignCollectionTest_ParentOrder *)

FOUNDATION_EXPORT void CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder_init(CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder *self);

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder *new_CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder *create_CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder_init();

J2OBJC_TYPE_LITERAL_HEADER(CoTouchlabSqueakyFieldForeignCollectionTest_ChildOrder)

#endif

#pragma pop_macro("INCLUDE_ALL_CoTouchlabSqueakyFieldForeignCollectionTest")
