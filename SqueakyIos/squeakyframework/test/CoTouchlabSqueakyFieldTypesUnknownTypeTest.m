//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/Squeaky-doppl/tests/src/test/java/co/touchlab/squeaky/field/types/UnknownTypeTest.java
//

#include "CoTouchlabDopplTestingDopplContextDelegateTestRunner.h"
#include "CoTouchlabSqueakyFieldDataPersister.h"
#include "CoTouchlabSqueakyFieldDataType.h"
#include "CoTouchlabSqueakyFieldTypesBaseTypeTestHide.h"
#include "CoTouchlabSqueakyFieldTypesUnknownTypeTest.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Assert.h"
#include "org/junit/Test.h"
#include "org/junit/runner/RunWith.h"

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesUnknownTypeTest__Annotations$0();

__attribute__((unused)) static IOSObjectArray *CoTouchlabSqueakyFieldTypesUnknownTypeTest__Annotations$1();

@implementation CoTouchlabSqueakyFieldTypesUnknownTypeTest

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CoTouchlabSqueakyFieldTypesUnknownTypeTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)testUnknownGetResult {
  CoTouchlabSqueakyFieldDataType *dataType = JreLoadEnum(CoTouchlabSqueakyFieldDataType, UNKNOWN);
  OrgJunitAssert_assertNullWithId_([((CoTouchlabSqueakyFieldDataType *) nil_chk(dataType)) getDataPersister]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, 0, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(testUnknownGetResult);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { (void *)&CoTouchlabSqueakyFieldTypesUnknownTypeTest__Annotations$0, (void *)&CoTouchlabSqueakyFieldTypesUnknownTypeTest__Annotations$1 };
  static const J2ObjcClassInfo _CoTouchlabSqueakyFieldTypesUnknownTypeTest = { "UnknownTypeTest", "co.touchlab.squeaky.field.types", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, 1 };
  return &_CoTouchlabSqueakyFieldTypesUnknownTypeTest;
}

@end

void CoTouchlabSqueakyFieldTypesUnknownTypeTest_init(CoTouchlabSqueakyFieldTypesUnknownTypeTest *self) {
  CoTouchlabSqueakyFieldTypesBaseTypeTestHide_init(self);
}

CoTouchlabSqueakyFieldTypesUnknownTypeTest *new_CoTouchlabSqueakyFieldTypesUnknownTypeTest_init() {
  J2OBJC_NEW_IMPL(CoTouchlabSqueakyFieldTypesUnknownTypeTest, init)
}

CoTouchlabSqueakyFieldTypesUnknownTypeTest *create_CoTouchlabSqueakyFieldTypesUnknownTypeTest_init() {
  J2OBJC_CREATE_IMPL(CoTouchlabSqueakyFieldTypesUnknownTypeTest, init)
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesUnknownTypeTest__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *CoTouchlabSqueakyFieldTypesUnknownTypeTest__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_OrgJunitRunnerRunWith(CoTouchlabDopplTestingDopplContextDelegateTestRunner_class_()) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CoTouchlabSqueakyFieldTypesUnknownTypeTest)
