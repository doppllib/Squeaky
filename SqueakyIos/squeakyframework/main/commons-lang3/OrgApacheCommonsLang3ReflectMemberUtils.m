//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3ClassUtils.h"
#include "OrgApacheCommonsLang3ReflectMemberUtils.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/AccessibleObject.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Member.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"

@class OrgApacheCommonsLang3ReflectMemberUtils_Executable;

@interface OrgApacheCommonsLang3ReflectMemberUtils ()

+ (jint)compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)left
                             withOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)right
                                                                  withIOSClassArray:(IOSObjectArray *)actual;

+ (jfloat)getTotalTransformationCostWithIOSClassArray:(IOSObjectArray *)srcArgs
withOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)executable;

+ (jfloat)getObjectTransformationCostWithIOSClass:(IOSClass *)srcClass
                                     withIOSClass:(IOSClass *)destClass;

+ (jfloat)getPrimitivePromotionCostWithIOSClass:(IOSClass *)srcClass
                                   withIOSClass:(IOSClass *)destClass;

+ (jboolean)isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)method
                                                                     withIOSClassArray:(IOSObjectArray *)parameterTypes;

@end

inline jint OrgApacheCommonsLang3ReflectMemberUtils_get_ACCESS_TEST();
#define OrgApacheCommonsLang3ReflectMemberUtils_ACCESS_TEST 7
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3ReflectMemberUtils, ACCESS_TEST, jint)

inline IOSObjectArray *OrgApacheCommonsLang3ReflectMemberUtils_get_ORDERED_PRIMITIVE_TYPES();
static IOSObjectArray *OrgApacheCommonsLang3ReflectMemberUtils_ORDERED_PRIMITIVE_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ReflectMemberUtils, ORDERED_PRIMITIVE_TYPES, IOSObjectArray *)

__attribute__((unused)) static jint OrgApacheCommonsLang3ReflectMemberUtils_compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *left, OrgApacheCommonsLang3ReflectMemberUtils_Executable *right, IOSObjectArray *actual);

__attribute__((unused)) static jfloat OrgApacheCommonsLang3ReflectMemberUtils_getTotalTransformationCostWithIOSClassArray_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_(IOSObjectArray *srcArgs, OrgApacheCommonsLang3ReflectMemberUtils_Executable *executable);

__attribute__((unused)) static jfloat OrgApacheCommonsLang3ReflectMemberUtils_getObjectTransformationCostWithIOSClass_withIOSClass_(IOSClass *srcClass, IOSClass *destClass);

__attribute__((unused)) static jfloat OrgApacheCommonsLang3ReflectMemberUtils_getPrimitivePromotionCostWithIOSClass_withIOSClass_(IOSClass *srcClass, IOSClass *destClass);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ReflectMemberUtils_isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *method, IOSObjectArray *parameterTypes);

@interface OrgApacheCommonsLang3ReflectMemberUtils_Executable : NSObject {
 @public
  IOSObjectArray *parameterTypes_;
  jboolean isVarArgs_;
}

+ (OrgApacheCommonsLang3ReflectMemberUtils_Executable *)ofWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

+ (OrgApacheCommonsLang3ReflectMemberUtils_Executable *)ofWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor;

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method;

- (instancetype)initWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor;

- (IOSObjectArray *)getParameterTypes;

- (jboolean)isVarArgs;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ReflectMemberUtils_Executable)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ReflectMemberUtils_Executable, parameterTypes_, IOSObjectArray *)

__attribute__((unused)) static OrgApacheCommonsLang3ReflectMemberUtils_Executable *OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectMethod_(JavaLangReflectMethod *method);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectMemberUtils_Executable *OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor);

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *self, JavaLangReflectMethod *method);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectMemberUtils_Executable *new_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ReflectMemberUtils_Executable *create_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method);

__attribute__((unused)) static void OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *self, JavaLangReflectConstructor *constructor);

__attribute__((unused)) static OrgApacheCommonsLang3ReflectMemberUtils_Executable *new_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ReflectMemberUtils_Executable *create_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectMemberUtils_Executable)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ReflectMemberUtils)

@implementation OrgApacheCommonsLang3ReflectMemberUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ReflectMemberUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)setAccessibleWorkaroundWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)o {
  return OrgApacheCommonsLang3ReflectMemberUtils_setAccessibleWorkaroundWithJavaLangReflectAccessibleObject_(o);
}

+ (jboolean)isPackageAccessWithInt:(jint)modifiers {
  return OrgApacheCommonsLang3ReflectMemberUtils_isPackageAccessWithInt_(modifiers);
}

+ (jboolean)isAccessibleWithJavaLangReflectMember:(id<JavaLangReflectMember>)m {
  return OrgApacheCommonsLang3ReflectMemberUtils_isAccessibleWithJavaLangReflectMember_(m);
}

+ (jint)compareConstructorFitWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)left
                             withJavaLangReflectConstructor:(JavaLangReflectConstructor *)right
                                          withIOSClassArray:(IOSObjectArray *)actual {
  return OrgApacheCommonsLang3ReflectMemberUtils_compareConstructorFitWithJavaLangReflectConstructor_withJavaLangReflectConstructor_withIOSClassArray_(left, right, actual);
}

+ (jint)compareMethodFitWithJavaLangReflectMethod:(JavaLangReflectMethod *)left
                        withJavaLangReflectMethod:(JavaLangReflectMethod *)right
                                withIOSClassArray:(IOSObjectArray *)actual {
  return OrgApacheCommonsLang3ReflectMemberUtils_compareMethodFitWithJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClassArray_(left, right, actual);
}

+ (jint)compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)left
                             withOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)right
                                                                  withIOSClassArray:(IOSObjectArray *)actual {
  return OrgApacheCommonsLang3ReflectMemberUtils_compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(left, right, actual);
}

+ (jfloat)getTotalTransformationCostWithIOSClassArray:(IOSObjectArray *)srcArgs
withOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)executable {
  return OrgApacheCommonsLang3ReflectMemberUtils_getTotalTransformationCostWithIOSClassArray_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_(srcArgs, executable);
}

+ (jfloat)getObjectTransformationCostWithIOSClass:(IOSClass *)srcClass
                                     withIOSClass:(IOSClass *)destClass {
  return OrgApacheCommonsLang3ReflectMemberUtils_getObjectTransformationCostWithIOSClass_withIOSClass_(srcClass, destClass);
}

+ (jfloat)getPrimitivePromotionCostWithIOSClass:(IOSClass *)srcClass
                                   withIOSClass:(IOSClass *)destClass {
  return OrgApacheCommonsLang3ReflectMemberUtils_getPrimitivePromotionCostWithIOSClass_withIOSClass_(srcClass, destClass);
}

+ (jboolean)isMatchingMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
                                    withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMemberUtils_isMatchingMethodWithJavaLangReflectMethod_withIOSClassArray_(method, parameterTypes);
}

+ (jboolean)isMatchingConstructorWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)method
                                              withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMemberUtils_isMatchingConstructorWithJavaLangReflectConstructor_withIOSClassArray_(method, parameterTypes);
}

+ (jboolean)isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable:(OrgApacheCommonsLang3ReflectMemberUtils_Executable *)method
                                                                     withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMemberUtils_isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(method, parameterTypes);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 6, 7, -1, 8, -1, -1 },
    { NULL, "I", 0x8, 9, 10, -1, 11, -1, -1 },
    { NULL, "I", 0xa, 12, 13, -1, 14, -1, -1 },
    { NULL, "F", 0xa, 15, 16, -1, 17, -1, -1 },
    { NULL, "F", 0xa, 18, 19, -1, 20, -1, -1 },
    { NULL, "F", 0xa, 21, 19, -1, 20, -1, -1 },
    { NULL, "Z", 0x8, 22, 23, -1, 24, -1, -1 },
    { NULL, "Z", 0x8, 25, 26, -1, 27, -1, -1 },
    { NULL, "Z", 0xa, 28, 29, -1, 30, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setAccessibleWorkaroundWithJavaLangReflectAccessibleObject:);
  methods[2].selector = @selector(isPackageAccessWithInt:);
  methods[3].selector = @selector(isAccessibleWithJavaLangReflectMember:);
  methods[4].selector = @selector(compareConstructorFitWithJavaLangReflectConstructor:withJavaLangReflectConstructor:withIOSClassArray:);
  methods[5].selector = @selector(compareMethodFitWithJavaLangReflectMethod:withJavaLangReflectMethod:withIOSClassArray:);
  methods[6].selector = @selector(compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable:withOrgApacheCommonsLang3ReflectMemberUtils_Executable:withIOSClassArray:);
  methods[7].selector = @selector(getTotalTransformationCostWithIOSClassArray:withOrgApacheCommonsLang3ReflectMemberUtils_Executable:);
  methods[8].selector = @selector(getObjectTransformationCostWithIOSClass:withIOSClass:);
  methods[9].selector = @selector(getPrimitivePromotionCostWithIOSClass:withIOSClass:);
  methods[10].selector = @selector(isMatchingMethodWithJavaLangReflectMethod:withIOSClassArray:);
  methods[11].selector = @selector(isMatchingConstructorWithJavaLangReflectConstructor:withIOSClassArray:);
  methods[12].selector = @selector(isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable:withIOSClassArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ACCESS_TEST", "I", .constantValue.asInt = OrgApacheCommonsLang3ReflectMemberUtils_ACCESS_TEST, 0x1a, -1, -1, -1, -1 },
    { "ORDERED_PRIMITIVE_TYPES", "[LIOSClass;", .constantValue.asLong = 0, 0x1a, -1, 31, 32, -1 },
  };
  static const void *ptrTable[] = { "setAccessibleWorkaround", "LJavaLangReflectAccessibleObject;", "isPackageAccess", "I", "isAccessible", "LJavaLangReflectMember;", "compareConstructorFit", "LJavaLangReflectConstructor;LJavaLangReflectConstructor;[LIOSClass;", "(Ljava/lang/reflect/Constructor<*>;Ljava/lang/reflect/Constructor<*>;[Ljava/lang/Class<*>;)I", "compareMethodFit", "LJavaLangReflectMethod;LJavaLangReflectMethod;[LIOSClass;", "(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;[Ljava/lang/Class<*>;)I", "compareParameterTypes", "LOrgApacheCommonsLang3ReflectMemberUtils_Executable;LOrgApacheCommonsLang3ReflectMemberUtils_Executable;[LIOSClass;", "(Lorg/apache/commons/lang3/reflect/MemberUtils$Executable;Lorg/apache/commons/lang3/reflect/MemberUtils$Executable;[Ljava/lang/Class<*>;)I", "getTotalTransformationCost", "[LIOSClass;LOrgApacheCommonsLang3ReflectMemberUtils_Executable;", "([Ljava/lang/Class<*>;Lorg/apache/commons/lang3/reflect/MemberUtils$Executable;)F", "getObjectTransformationCost", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<*>;)F", "getPrimitivePromotionCost", "isMatchingMethod", "LJavaLangReflectMethod;[LIOSClass;", "(Ljava/lang/reflect/Method;[Ljava/lang/Class<*>;)Z", "isMatchingConstructor", "LJavaLangReflectConstructor;[LIOSClass;", "(Ljava/lang/reflect/Constructor<*>;[Ljava/lang/Class<*>;)Z", "isMatchingExecutable", "LOrgApacheCommonsLang3ReflectMemberUtils_Executable;[LIOSClass;", "(Lorg/apache/commons/lang3/reflect/MemberUtils$Executable;[Ljava/lang/Class<*>;)Z", &OrgApacheCommonsLang3ReflectMemberUtils_ORDERED_PRIMITIVE_TYPES, "[Ljava/lang/Class<*>;", "LOrgApacheCommonsLang3ReflectMemberUtils_Executable;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectMemberUtils = { "MemberUtils", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x400, 13, 2, -1, 33, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ReflectMemberUtils;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ReflectMemberUtils class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3ReflectMemberUtils_ORDERED_PRIMITIVE_TYPES, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(JavaLangByte, TYPE), JreLoadStatic(JavaLangShort, TYPE), JreLoadStatic(JavaLangCharacter, TYPE), JreLoadStatic(JavaLangInteger, TYPE), JreLoadStatic(JavaLangLong, TYPE), JreLoadStatic(JavaLangFloat, TYPE), JreLoadStatic(JavaLangDouble, TYPE) } count:7 type:IOSClass_class_()]);
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ReflectMemberUtils)
  }
}

@end

void OrgApacheCommonsLang3ReflectMemberUtils_init(OrgApacheCommonsLang3ReflectMemberUtils *self) {
  NSObject_init(self);
}

jboolean OrgApacheCommonsLang3ReflectMemberUtils_setAccessibleWorkaroundWithJavaLangReflectAccessibleObject_(JavaLangReflectAccessibleObject *o) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  if (o == nil || [o isAccessible]) {
    return false;
  }
  id<JavaLangReflectMember> m = (id<JavaLangReflectMember>) cast_check(o, JavaLangReflectMember_class_());
  if (![o isAccessible] && JavaLangReflectModifier_isPublicWithInt_([m getModifiers]) && OrgApacheCommonsLang3ReflectMemberUtils_isPackageAccessWithInt_([((IOSClass *) nil_chk([m getDeclaringClass])) getModifiers])) {
    @try {
      [o setAccessibleWithBoolean:true];
      return true;
    }
    @catch (JavaLangSecurityException *e) {
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3ReflectMemberUtils_isPackageAccessWithInt_(jint modifiers) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  return (modifiers & OrgApacheCommonsLang3ReflectMemberUtils_ACCESS_TEST) == 0;
}

jboolean OrgApacheCommonsLang3ReflectMemberUtils_isAccessibleWithJavaLangReflectMember_(id<JavaLangReflectMember> m) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  return m != nil && JavaLangReflectModifier_isPublicWithInt_([m getModifiers]) && ![m isSynthetic];
}

jint OrgApacheCommonsLang3ReflectMemberUtils_compareConstructorFitWithJavaLangReflectConstructor_withJavaLangReflectConstructor_withIOSClassArray_(JavaLangReflectConstructor *left, JavaLangReflectConstructor *right, IOSObjectArray *actual) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  return OrgApacheCommonsLang3ReflectMemberUtils_compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectConstructor_(left), OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectConstructor_(right), actual);
}

jint OrgApacheCommonsLang3ReflectMemberUtils_compareMethodFitWithJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClassArray_(JavaLangReflectMethod *left, JavaLangReflectMethod *right, IOSObjectArray *actual) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  return OrgApacheCommonsLang3ReflectMemberUtils_compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectMethod_(left), OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectMethod_(right), actual);
}

jint OrgApacheCommonsLang3ReflectMemberUtils_compareParameterTypesWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *left, OrgApacheCommonsLang3ReflectMemberUtils_Executable *right, IOSObjectArray *actual) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  jfloat leftCost = OrgApacheCommonsLang3ReflectMemberUtils_getTotalTransformationCostWithIOSClassArray_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_(actual, left);
  jfloat rightCost = OrgApacheCommonsLang3ReflectMemberUtils_getTotalTransformationCostWithIOSClassArray_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_(actual, right);
  return leftCost < rightCost ? -1 : rightCost < leftCost ? 1 : 0;
}

jfloat OrgApacheCommonsLang3ReflectMemberUtils_getTotalTransformationCostWithIOSClassArray_withOrgApacheCommonsLang3ReflectMemberUtils_Executable_(IOSObjectArray *srcArgs, OrgApacheCommonsLang3ReflectMemberUtils_Executable *executable) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  IOSObjectArray *destArgs = [((OrgApacheCommonsLang3ReflectMemberUtils_Executable *) nil_chk(executable)) getParameterTypes];
  jboolean isVarArgs = [executable isVarArgs];
  jfloat totalCost = 0.0f;
  jlong normalArgsLen = isVarArgs ? ((IOSObjectArray *) nil_chk(destArgs))->size_ - 1 : ((IOSObjectArray *) nil_chk(destArgs))->size_;
  if (((IOSObjectArray *) nil_chk(srcArgs))->size_ < normalArgsLen) {
    return JavaLangFloat_MAX_VALUE;
  }
  for (jint i = 0; i < normalArgsLen; i++) {
    JrePlusAssignFloatF(&totalCost, OrgApacheCommonsLang3ReflectMemberUtils_getObjectTransformationCostWithIOSClass_withIOSClass_(IOSObjectArray_Get(srcArgs, i), IOSObjectArray_Get(destArgs, i)));
  }
  if (isVarArgs) {
    jboolean noVarArgsPassed = srcArgs->size_ < destArgs->size_;
    jboolean explicitArrayForVarags = srcArgs->size_ == destArgs->size_ && [((IOSClass *) nil_chk(IOSObjectArray_Get(srcArgs, srcArgs->size_ - 1))) isArray];
    jfloat varArgsCost = 0.001f;
    IOSClass *destClass = [((IOSClass *) nil_chk(IOSObjectArray_Get(destArgs, destArgs->size_ - 1))) getComponentType];
    if (noVarArgsPassed) {
      JrePlusAssignFloatF(&totalCost, OrgApacheCommonsLang3ReflectMemberUtils_getObjectTransformationCostWithIOSClass_withIOSClass_(destClass, NSObject_class_()) + varArgsCost);
    }
    else if (explicitArrayForVarags) {
      IOSClass *sourceClass = [((IOSClass *) nil_chk(IOSObjectArray_Get(srcArgs, srcArgs->size_ - 1))) getComponentType];
      JrePlusAssignFloatF(&totalCost, OrgApacheCommonsLang3ReflectMemberUtils_getObjectTransformationCostWithIOSClass_withIOSClass_(sourceClass, destClass) + varArgsCost);
    }
    else {
      for (jint i = destArgs->size_ - 1; i < srcArgs->size_; i++) {
        IOSClass *srcClass = IOSObjectArray_Get(srcArgs, i);
        JrePlusAssignFloatF(&totalCost, OrgApacheCommonsLang3ReflectMemberUtils_getObjectTransformationCostWithIOSClass_withIOSClass_(srcClass, destClass) + varArgsCost);
      }
    }
  }
  return totalCost;
}

jfloat OrgApacheCommonsLang3ReflectMemberUtils_getObjectTransformationCostWithIOSClass_withIOSClass_(IOSClass *srcClass, IOSClass *destClass) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  if ([((IOSClass *) nil_chk(destClass)) isPrimitive]) {
    return OrgApacheCommonsLang3ReflectMemberUtils_getPrimitivePromotionCostWithIOSClass_withIOSClass_(srcClass, destClass);
  }
  jfloat cost = 0.0f;
  while (srcClass != nil && ![destClass isEqual:srcClass]) {
    if ([destClass isInterface] && OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_(srcClass, destClass)) {
      JrePlusAssignFloatF(&cost, 0.25f);
      break;
    }
    cost++;
    srcClass = [srcClass getSuperclass];
  }
  if (srcClass == nil) {
    JrePlusAssignFloatF(&cost, 1.5f);
  }
  return cost;
}

jfloat OrgApacheCommonsLang3ReflectMemberUtils_getPrimitivePromotionCostWithIOSClass_withIOSClass_(IOSClass *srcClass, IOSClass *destClass) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  jfloat cost = 0.0f;
  IOSClass *cls = srcClass;
  if (![((IOSClass *) nil_chk(cls)) isPrimitive]) {
    JrePlusAssignFloatF(&cost, 0.1f);
    cls = OrgApacheCommonsLang3ClassUtils_wrapperToPrimitiveWithIOSClass_(cls);
  }
  for (jint i = 0; cls != destClass && i < ((IOSObjectArray *) nil_chk(OrgApacheCommonsLang3ReflectMemberUtils_ORDERED_PRIMITIVE_TYPES))->size_; i++) {
    if (cls == IOSObjectArray_Get(nil_chk(OrgApacheCommonsLang3ReflectMemberUtils_ORDERED_PRIMITIVE_TYPES), i)) {
      JrePlusAssignFloatF(&cost, 0.1f);
      if (i < OrgApacheCommonsLang3ReflectMemberUtils_ORDERED_PRIMITIVE_TYPES->size_ - 1) {
        cls = IOSObjectArray_Get(OrgApacheCommonsLang3ReflectMemberUtils_ORDERED_PRIMITIVE_TYPES, i + 1);
      }
    }
  }
  return cost;
}

jboolean OrgApacheCommonsLang3ReflectMemberUtils_isMatchingMethodWithJavaLangReflectMethod_withIOSClassArray_(JavaLangReflectMethod *method, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  return OrgApacheCommonsLang3ReflectMemberUtils_isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectMethod_(method), parameterTypes);
}

jboolean OrgApacheCommonsLang3ReflectMemberUtils_isMatchingConstructorWithJavaLangReflectConstructor_withIOSClassArray_(JavaLangReflectConstructor *method, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  return OrgApacheCommonsLang3ReflectMemberUtils_isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectConstructor_(method), parameterTypes);
}

jboolean OrgApacheCommonsLang3ReflectMemberUtils_isMatchingExecutableWithOrgApacheCommonsLang3ReflectMemberUtils_Executable_withIOSClassArray_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *method, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMemberUtils_initialize();
  IOSObjectArray *methodParameterTypes = [((OrgApacheCommonsLang3ReflectMemberUtils_Executable *) nil_chk(method)) getParameterTypes];
  if ([method isVarArgs]) {
    jint i;
    for (i = 0; i < ((IOSObjectArray *) nil_chk(methodParameterTypes))->size_ - 1 && i < ((IOSObjectArray *) nil_chk(parameterTypes))->size_; i++) {
      if (!OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(IOSObjectArray_Get(nil_chk(parameterTypes), i), IOSObjectArray_Get(methodParameterTypes, i), true)) {
        return false;
      }
    }
    IOSClass *varArgParameterType = [((IOSClass *) nil_chk(IOSObjectArray_Get(methodParameterTypes, methodParameterTypes->size_ - 1))) getComponentType];
    for (; i < ((IOSObjectArray *) nil_chk(parameterTypes))->size_; i++) {
      if (!OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(IOSObjectArray_Get(parameterTypes, i), varArgParameterType, true)) {
        return false;
      }
    }
    return true;
  }
  return OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_withBoolean_(parameterTypes, methodParameterTypes, true);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectMemberUtils)

@implementation OrgApacheCommonsLang3ReflectMemberUtils_Executable

+ (OrgApacheCommonsLang3ReflectMemberUtils_Executable *)ofWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectMethod_(method);
}

+ (OrgApacheCommonsLang3ReflectMemberUtils_Executable *)ofWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor {
  return OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectConstructor_(constructor);
}

- (instancetype)initWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(self, method);
  return self;
}

- (instancetype)initWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)constructor {
  OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(self, constructor);
  return self;
}

- (IOSObjectArray *)getParameterTypes {
  return parameterTypes_;
}

- (jboolean)isVarArgs {
  return isVarArgs_;
}

- (void)dealloc {
  RELEASE_(parameterTypes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgApacheCommonsLang3ReflectMemberUtils_Executable;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ReflectMemberUtils_Executable;", 0xa, 0, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, 4, -1, -1 },
    { NULL, "[LIOSClass;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(ofWithJavaLangReflectMethod:);
  methods[1].selector = @selector(ofWithJavaLangReflectConstructor:);
  methods[2].selector = @selector(initWithJavaLangReflectMethod:);
  methods[3].selector = @selector(initWithJavaLangReflectConstructor:);
  methods[4].selector = @selector(getParameterTypes);
  methods[5].selector = @selector(isVarArgs);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parameterTypes_", "[LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
    { "isVarArgs_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "of", "LJavaLangReflectMethod;", "LJavaLangReflectConstructor;", "(Ljava/lang/reflect/Constructor<*>;)Lorg/apache/commons/lang3/reflect/MemberUtils$Executable;", "(Ljava/lang/reflect/Constructor<*>;)V", "()[Ljava/lang/Class<*>;", "[Ljava/lang/Class<*>;", "LOrgApacheCommonsLang3ReflectMemberUtils;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectMemberUtils_Executable = { "Executable", "org.apache.commons.lang3.reflect", ptrTable, methods, fields, 7, 0x1a, 6, 2, 7, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ReflectMemberUtils_Executable;
}

@end

OrgApacheCommonsLang3ReflectMemberUtils_Executable *OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  OrgApacheCommonsLang3ReflectMemberUtils_Executable_initialize();
  return create_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(method);
}

OrgApacheCommonsLang3ReflectMemberUtils_Executable *OrgApacheCommonsLang3ReflectMemberUtils_Executable_ofWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor) {
  OrgApacheCommonsLang3ReflectMemberUtils_Executable_initialize();
  return create_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(constructor);
}

void OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *self, JavaLangReflectMethod *method) {
  NSObject_init(self);
  JreStrongAssign(&self->parameterTypes_, [((JavaLangReflectMethod *) nil_chk(method)) getParameterTypes]);
  self->isVarArgs_ = [method isVarArgs];
}

OrgApacheCommonsLang3ReflectMemberUtils_Executable *new_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectMemberUtils_Executable, initWithJavaLangReflectMethod_, method)
}

OrgApacheCommonsLang3ReflectMemberUtils_Executable *create_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectMemberUtils_Executable, initWithJavaLangReflectMethod_, method)
}

void OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(OrgApacheCommonsLang3ReflectMemberUtils_Executable *self, JavaLangReflectConstructor *constructor) {
  NSObject_init(self);
  JreStrongAssign(&self->parameterTypes_, [((JavaLangReflectConstructor *) nil_chk(constructor)) getParameterTypes]);
  self->isVarArgs_ = [constructor isVarArgs];
}

OrgApacheCommonsLang3ReflectMemberUtils_Executable *new_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectMemberUtils_Executable, initWithJavaLangReflectConstructor_, constructor)
}

OrgApacheCommonsLang3ReflectMemberUtils_Executable *create_OrgApacheCommonsLang3ReflectMemberUtils_Executable_initWithJavaLangReflectConstructor_(JavaLangReflectConstructor *constructor) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectMemberUtils_Executable, initWithJavaLangReflectConstructor_, constructor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectMemberUtils_Executable)
