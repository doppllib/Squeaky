//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/concurrent/ThresholdCircuitBreaker.java
//

#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker.h"
#include "OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker.h"
#include "java/lang/Long.h"
#include "java/util/concurrent/atomic/AtomicLong.h"

@interface OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker () {
 @public
  jlong threshold_;
  JavaUtilConcurrentAtomicAtomicLong *used_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker, used_, JavaUtilConcurrentAtomicAtomicLong *)

inline jlong OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_get_INITIAL_COUNT();
#define OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_INITIAL_COUNT 0LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker, INITIAL_COUNT, jlong)

@implementation OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker

- (instancetype)initWithLong:(jlong)threshold {
  OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_initWithLong_(self, threshold);
  return self;
}

- (jlong)getThreshold {
  return threshold_;
}

- (jboolean)checkState {
  return [self isOpen];
}

- (void)close {
  [super close];
  [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->used_)) setWithLong:OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_INITIAL_COUNT];
}

- (jboolean)incrementAndCheckStateWithId:(JavaLangLong *)increment {
  if (threshold_ == 0) {
    [self open];
  }
  jlong used = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->used_)) addAndGetWithLong:[((JavaLangLong *) nil_chk(increment)) longLongValue]];
  if (used > threshold_) {
    [self open];
  }
  return [self checkState];
}

- (void)dealloc {
  RELEASE_(used_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithLong:);
  methods[1].selector = @selector(getThreshold);
  methods[2].selector = @selector(checkState);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(incrementAndCheckStateWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INITIAL_COUNT", "J", .constantValue.asLong = OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_INITIAL_COUNT, 0x1a, -1, -1, -1, -1 },
    { "threshold_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "used_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "J", "LOrgApacheCommonsLang3ConcurrentCircuitBreakingException;", "incrementAndCheckState", "LJavaLangLong;", "Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Long;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker = { "ThresholdCircuitBreaker", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, 4, -1 };
  return &_OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker;
}

@end

void OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_initWithLong_(OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker *self, jlong threshold) {
  OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_init(self);
  JreStrongAssignAndConsume(&self->used_, new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_(OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_INITIAL_COUNT));
  self->threshold_ = threshold;
}

OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker *new_OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_initWithLong_(jlong threshold) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker, initWithLong_, threshold)
}

OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker *create_OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker_initWithLong_(jlong threshold) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker, initWithLong_, threshold)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentThresholdCircuitBreaker)
