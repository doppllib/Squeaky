//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3ArrayUtils.h"
#include "OrgApacheCommonsLang3ClassUtils.h"
#include "OrgApacheCommonsLang3ReflectMemberUtils.h"
#include "OrgApacheCommonsLang3ReflectMethodUtils.h"
#include "OrgApacheCommonsLang3ReflectTypeUtils.h"
#include "OrgApacheCommonsLang3Validate.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Iterable.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/System.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface OrgApacheCommonsLang3ReflectMethodUtils ()

+ (IOSObjectArray *)toVarArgsWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
                                     withNSObjectArray:(IOSObjectArray *)args;

+ (JavaLangReflectMethod *)getAccessibleMethodFromSuperclassWithIOSClass:(IOSClass *)cls
                                                            withNSString:(NSString *)methodName
                                                       withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (JavaLangReflectMethod *)getAccessibleMethodFromInterfaceNestWithIOSClass:(IOSClass *)cls
                                                               withNSString:(NSString *)methodName
                                                          withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (jint)distanceWithIOSClassArray:(IOSObjectArray *)classArray
                withIOSClassArray:(IOSObjectArray *)toClassArray;

@end

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3ReflectMethodUtils_toVarArgsWithJavaLangReflectMethod_withNSObjectArray_(JavaLangReflectMethod *method, IOSObjectArray *args);

__attribute__((unused)) static JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromSuperclassWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes);

__attribute__((unused)) static JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromInterfaceNestWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes);

__attribute__((unused)) static jint OrgApacheCommonsLang3ReflectMethodUtils_distanceWithIOSClassArray_withIOSClassArray_(IOSObjectArray *classArray, IOSObjectArray *toClassArray);

@implementation OrgApacheCommonsLang3ReflectMethodUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ReflectMethodUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_(object, methodName);
}

+ (id)invokeMethodWithId:(id)object
             withBoolean:(jboolean)forceAccess
            withNSString:(NSString *)methodName {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_(object, forceAccess, methodName);
}

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_(object, methodName, args);
}

+ (id)invokeMethodWithId:(id)object
             withBoolean:(jboolean)forceAccess
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_withNSObjectArray_(object, forceAccess, methodName, args);
}

+ (id)invokeMethodWithId:(id)object
             withBoolean:(jboolean)forceAccess
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args
       withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_withNSObjectArray_withIOSClassArray_(object, forceAccess, methodName, args, parameterTypes);
}

+ (id)invokeMethodWithId:(id)object
            withNSString:(NSString *)methodName
       withNSObjectArray:(IOSObjectArray *)args
       withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(object, methodName, args, parameterTypes);
}

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_(object, methodName);
}

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName
            withNSObjectArray:(IOSObjectArray *)args {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_(object, methodName, args);
}

+ (id)invokeExactMethodWithId:(id)object
                 withNSString:(NSString *)methodName
            withNSObjectArray:(IOSObjectArray *)args
            withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(object, methodName, args, parameterTypes);
}

+ (id)invokeExactStaticMethodWithIOSClass:(IOSClass *)cls
                             withNSString:(NSString *)methodName
                        withNSObjectArray:(IOSObjectArray *)args
                        withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(cls, methodName, args, parameterTypes);
}

+ (id)invokeStaticMethodWithIOSClass:(IOSClass *)cls
                        withNSString:(NSString *)methodName
                   withNSObjectArray:(IOSObjectArray *)args {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeStaticMethodWithIOSClass_withNSString_withNSObjectArray_(cls, methodName, args);
}

+ (id)invokeStaticMethodWithIOSClass:(IOSClass *)cls
                        withNSString:(NSString *)methodName
                   withNSObjectArray:(IOSObjectArray *)args
                   withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(cls, methodName, args, parameterTypes);
}

+ (IOSObjectArray *)toVarArgsWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
                                     withNSObjectArray:(IOSObjectArray *)args {
  return OrgApacheCommonsLang3ReflectMethodUtils_toVarArgsWithJavaLangReflectMethod_withNSObjectArray_(method, args);
}

+ (IOSObjectArray *)getVarArgsWithNSObjectArray:(IOSObjectArray *)args
                              withIOSClassArray:(IOSObjectArray *)methodParameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_getVarArgsWithNSObjectArray_withIOSClassArray_(args, methodParameterTypes);
}

+ (id)invokeExactStaticMethodWithIOSClass:(IOSClass *)cls
                             withNSString:(NSString *)methodName
                        withNSObjectArray:(IOSObjectArray *)args {
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactStaticMethodWithIOSClass_withNSString_withNSObjectArray_(cls, methodName, args);
}

+ (JavaLangReflectMethod *)getAccessibleMethodWithIOSClass:(IOSClass *)cls
                                              withNSString:(NSString *)methodName
                                         withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
}

+ (JavaLangReflectMethod *)getAccessibleMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method {
  return OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithJavaLangReflectMethod_(method);
}

+ (JavaLangReflectMethod *)getAccessibleMethodFromSuperclassWithIOSClass:(IOSClass *)cls
                                                            withNSString:(NSString *)methodName
                                                       withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromSuperclassWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
}

+ (JavaLangReflectMethod *)getAccessibleMethodFromInterfaceNestWithIOSClass:(IOSClass *)cls
                                                               withNSString:(NSString *)methodName
                                                          withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromInterfaceNestWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
}

+ (JavaLangReflectMethod *)getMatchingAccessibleMethodWithIOSClass:(IOSClass *)cls
                                                      withNSString:(NSString *)methodName
                                                 withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_getMatchingAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
}

+ (JavaLangReflectMethod *)getMatchingMethodWithIOSClass:(IOSClass *)cls
                                            withNSString:(NSString *)methodName
                                       withIOSClassArray:(IOSObjectArray *)parameterTypes {
  return OrgApacheCommonsLang3ReflectMethodUtils_getMatchingMethodWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
}

+ (jint)distanceWithIOSClassArray:(IOSObjectArray *)classArray
                withIOSClassArray:(IOSObjectArray *)toClassArray {
  return OrgApacheCommonsLang3ReflectMethodUtils_distanceWithIOSClassArray_withIOSClassArray_(classArray, toClassArray);
}

+ (id<JavaUtilSet>)getOverrideHierarchyWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
                  withOrgApacheCommonsLang3ClassUtils_Interfaces:(OrgApacheCommonsLang3ClassUtils_Interfaces *)interfacesBehavior {
  return OrgApacheCommonsLang3ReflectMethodUtils_getOverrideHierarchyWithJavaLangReflectMethod_withOrgApacheCommonsLang3ClassUtils_Interfaces_(method, interfacesBehavior);
}

+ (IOSObjectArray *)getMethodsWithAnnotationWithIOSClass:(IOSClass *)cls
                                            withIOSClass:(IOSClass *)annotationCls {
  return OrgApacheCommonsLang3ReflectMethodUtils_getMethodsWithAnnotationWithIOSClass_withIOSClass_(cls, annotationCls);
}

+ (id<JavaUtilList>)getMethodsListWithAnnotationWithIOSClass:(IOSClass *)cls
                                                withIOSClass:(IOSClass *)annotationCls {
  return OrgApacheCommonsLang3ReflectMethodUtils_getMethodsListWithAnnotationWithIOSClass_withIOSClass_(cls, annotationCls);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 3, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x89, 0, 4, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x89, 0, 5, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 6, 2, 7, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 8, 2, 9, -1, -1 },
    { NULL, "LNSObject;", 0x9, 10, 1, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x89, 10, 4, 2, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 10, 8, 2, 9, -1, -1 },
    { NULL, "LNSObject;", 0x9, 11, 12, 2, 13, -1, -1 },
    { NULL, "LNSObject;", 0x89, 14, 15, 2, 16, -1, -1 },
    { NULL, "LNSObject;", 0x9, 14, 12, 2, 13, -1, -1 },
    { NULL, "[LNSObject;", 0xa, 17, 18, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x8, 19, 20, -1, 21, -1, -1 },
    { NULL, "LNSObject;", 0x89, 11, 15, 2, 16, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x89, 22, 23, -1, 24, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x9, 22, 25, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x8a, 26, 23, -1, 24, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x8a, 27, 23, -1, 24, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x89, 28, 23, -1, 24, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x89, 29, 23, -1, 24, -1, -1 },
    { NULL, "I", 0xa, 30, 31, -1, 32, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 33, 34, -1, 35, -1, -1 },
    { NULL, "[LJavaLangReflectMethod;", 0x9, 36, 37, -1, 38, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 39, 37, -1, 40, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(invokeMethodWithId:withNSString:);
  methods[2].selector = @selector(invokeMethodWithId:withBoolean:withNSString:);
  methods[3].selector = @selector(invokeMethodWithId:withNSString:withNSObjectArray:);
  methods[4].selector = @selector(invokeMethodWithId:withBoolean:withNSString:withNSObjectArray:);
  methods[5].selector = @selector(invokeMethodWithId:withBoolean:withNSString:withNSObjectArray:withIOSClassArray:);
  methods[6].selector = @selector(invokeMethodWithId:withNSString:withNSObjectArray:withIOSClassArray:);
  methods[7].selector = @selector(invokeExactMethodWithId:withNSString:);
  methods[8].selector = @selector(invokeExactMethodWithId:withNSString:withNSObjectArray:);
  methods[9].selector = @selector(invokeExactMethodWithId:withNSString:withNSObjectArray:withIOSClassArray:);
  methods[10].selector = @selector(invokeExactStaticMethodWithIOSClass:withNSString:withNSObjectArray:withIOSClassArray:);
  methods[11].selector = @selector(invokeStaticMethodWithIOSClass:withNSString:withNSObjectArray:);
  methods[12].selector = @selector(invokeStaticMethodWithIOSClass:withNSString:withNSObjectArray:withIOSClassArray:);
  methods[13].selector = @selector(toVarArgsWithJavaLangReflectMethod:withNSObjectArray:);
  methods[14].selector = @selector(getVarArgsWithNSObjectArray:withIOSClassArray:);
  methods[15].selector = @selector(invokeExactStaticMethodWithIOSClass:withNSString:withNSObjectArray:);
  methods[16].selector = @selector(getAccessibleMethodWithIOSClass:withNSString:withIOSClassArray:);
  methods[17].selector = @selector(getAccessibleMethodWithJavaLangReflectMethod:);
  methods[18].selector = @selector(getAccessibleMethodFromSuperclassWithIOSClass:withNSString:withIOSClassArray:);
  methods[19].selector = @selector(getAccessibleMethodFromInterfaceNestWithIOSClass:withNSString:withIOSClassArray:);
  methods[20].selector = @selector(getMatchingAccessibleMethodWithIOSClass:withNSString:withIOSClassArray:);
  methods[21].selector = @selector(getMatchingMethodWithIOSClass:withNSString:withIOSClassArray:);
  methods[22].selector = @selector(distanceWithIOSClassArray:withIOSClassArray:);
  methods[23].selector = @selector(getOverrideHierarchyWithJavaLangReflectMethod:withOrgApacheCommonsLang3ClassUtils_Interfaces:);
  methods[24].selector = @selector(getMethodsWithAnnotationWithIOSClass:withIOSClass:);
  methods[25].selector = @selector(getMethodsListWithAnnotationWithIOSClass:withIOSClass:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "invokeMethod", "LNSObject;LNSString;", "LJavaLangNoSuchMethodException;LJavaLangIllegalAccessException;LJavaLangReflectInvocationTargetException;", "LNSObject;ZLNSString;", "LNSObject;LNSString;[LNSObject;", "LNSObject;ZLNSString;[LNSObject;", "LNSObject;ZLNSString;[LNSObject;[LIOSClass;", "(Ljava/lang/Object;ZLjava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class<*>;)Ljava/lang/Object;", "LNSObject;LNSString;[LNSObject;[LIOSClass;", "(Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class<*>;)Ljava/lang/Object;", "invokeExactMethod", "invokeExactStaticMethod", "LIOSClass;LNSString;[LNSObject;[LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/Class<*>;)Ljava/lang/Object;", "invokeStaticMethod", "LIOSClass;LNSString;[LNSObject;", "(Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/Object;", "toVarArgs", "LJavaLangReflectMethod;[LNSObject;", "getVarArgs", "[LNSObject;[LIOSClass;", "([Ljava/lang/Object;[Ljava/lang/Class<*>;)[Ljava/lang/Object;", "getAccessibleMethod", "LIOSClass;LNSString;[LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/String;[Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;", "LJavaLangReflectMethod;", "getAccessibleMethodFromSuperclass", "getAccessibleMethodFromInterfaceNest", "getMatchingAccessibleMethod", "getMatchingMethod", "distance", "[LIOSClass;[LIOSClass;", "([Ljava/lang/Class<*>;[Ljava/lang/Class<*>;)I", "getOverrideHierarchy", "LJavaLangReflectMethod;LOrgApacheCommonsLang3ClassUtils_Interfaces;", "(Ljava/lang/reflect/Method;Lorg/apache/commons/lang3/ClassUtils$Interfaces;)Ljava/util/Set<Ljava/lang/reflect/Method;>;", "getMethodsWithAnnotation", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<*>;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)[Ljava/lang/reflect/Method;", "getMethodsListWithAnnotation", "(Ljava/lang/Class<*>;Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Ljava/util/List<Ljava/lang/reflect/Method;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ReflectMethodUtils = { "MethodUtils", "org.apache.commons.lang3.reflect", ptrTable, methods, NULL, 7, 0x1, 26, 0, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ReflectMethodUtils;
}

@end

void OrgApacheCommonsLang3ReflectMethodUtils_init(OrgApacheCommonsLang3ReflectMethodUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3ReflectMethodUtils *new_OrgApacheCommonsLang3ReflectMethodUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ReflectMethodUtils, init)
}

OrgApacheCommonsLang3ReflectMethodUtils *create_OrgApacheCommonsLang3ReflectMethodUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ReflectMethodUtils, init)
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_(id object, NSString *methodName) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(object, methodName, JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_OBJECT_ARRAY), nil);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_(id object, jboolean forceAccess, NSString *methodName) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_withNSObjectArray_withIOSClassArray_(object, forceAccess, methodName, JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_OBJECT_ARRAY), nil);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_(id object, NSString *methodName, IOSObjectArray *args) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  IOSObjectArray *parameterTypes = OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(args);
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(object, methodName, args, parameterTypes);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_withNSObjectArray_(id object, jboolean forceAccess, NSString *methodName, IOSObjectArray *args) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  IOSObjectArray *parameterTypes = OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(args);
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_withNSObjectArray_withIOSClassArray_(object, forceAccess, methodName, args, parameterTypes);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_withNSObjectArray_withIOSClassArray_(id object, jboolean forceAccess, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  parameterTypes = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithIOSClassArray_(parameterTypes);
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  NSString *messagePrefix;
  JavaLangReflectMethod *method = nil;
  jboolean isOriginallyAccessible = false;
  id result = nil;
  @try {
    if (forceAccess) {
      messagePrefix = @"No such method: ";
      method = OrgApacheCommonsLang3ReflectMethodUtils_getMatchingMethodWithIOSClass_withNSString_withIOSClassArray_([nil_chk(object) java_getClass], methodName, parameterTypes);
      if (method != nil) {
        isOriginallyAccessible = [method isAccessible];
        if (!isOriginallyAccessible) {
          [method setAccessibleWithBoolean:true];
        }
      }
    }
    else {
      messagePrefix = @"No such accessible method: ";
      method = OrgApacheCommonsLang3ReflectMethodUtils_getMatchingAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_([nil_chk(object) java_getClass], methodName, parameterTypes);
    }
    if (method == nil) {
      @throw create_JavaLangNoSuchMethodException_initWithNSString_(JreStrcat("$$$$", messagePrefix, methodName, @"() on object: ", [[object java_getClass] getName]));
    }
    args = OrgApacheCommonsLang3ReflectMethodUtils_toVarArgsWithJavaLangReflectMethod_withNSObjectArray_(method, args);
    result = [method invokeWithId:object withNSObjectArray:args];
  }
  @finally {
    if (method != nil && forceAccess && [method isAccessible] != isOriginallyAccessible) {
      [method setAccessibleWithBoolean:isOriginallyAccessible];
    }
  }
  return result;
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(id object, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeMethodWithId_withBoolean_withNSString_withNSObjectArray_withIOSClassArray_(object, false, methodName, args, parameterTypes);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_(id object, NSString *methodName) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(object, methodName, JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_OBJECT_ARRAY), nil);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_(id object, NSString *methodName, IOSObjectArray *args) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  IOSObjectArray *parameterTypes = OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(args);
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(object, methodName, args, parameterTypes);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactMethodWithId_withNSString_withNSObjectArray_withIOSClassArray_(id object, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  parameterTypes = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithIOSClassArray_(parameterTypes);
  JavaLangReflectMethod *method = OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_([nil_chk(object) java_getClass], methodName, parameterTypes);
  if (method == nil) {
    @throw create_JavaLangNoSuchMethodException_initWithNSString_(JreStrcat("$$$$", @"No such accessible method: ", methodName, @"() on object: ", [[object java_getClass] getName]));
  }
  return [method invokeWithId:object withNSObjectArray:args];
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  parameterTypes = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithIOSClassArray_(parameterTypes);
  JavaLangReflectMethod *method = OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
  if (method == nil) {
    @throw create_JavaLangNoSuchMethodException_initWithNSString_(JreStrcat("$$$$", @"No such accessible method: ", methodName, @"() on class: ", [((IOSClass *) nil_chk(cls)) getName]));
  }
  return [method invokeWithId:nil withNSObjectArray:args];
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeStaticMethodWithIOSClass_withNSString_withNSObjectArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  IOSObjectArray *parameterTypes = OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(args);
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(cls, methodName, args, parameterTypes);
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  parameterTypes = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithIOSClassArray_(parameterTypes);
  JavaLangReflectMethod *method = OrgApacheCommonsLang3ReflectMethodUtils_getMatchingAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
  if (method == nil) {
    @throw create_JavaLangNoSuchMethodException_initWithNSString_(JreStrcat("$$$$", @"No such accessible method: ", methodName, @"() on class: ", [((IOSClass *) nil_chk(cls)) getName]));
  }
  args = OrgApacheCommonsLang3ReflectMethodUtils_toVarArgsWithJavaLangReflectMethod_withNSObjectArray_(method, args);
  return [method invokeWithId:nil withNSObjectArray:args];
}

IOSObjectArray *OrgApacheCommonsLang3ReflectMethodUtils_toVarArgsWithJavaLangReflectMethod_withNSObjectArray_(JavaLangReflectMethod *method, IOSObjectArray *args) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  if ([((JavaLangReflectMethod *) nil_chk(method)) isVarArgs]) {
    IOSObjectArray *methodParameterTypes = [method getParameterTypes];
    args = OrgApacheCommonsLang3ReflectMethodUtils_getVarArgsWithNSObjectArray_withIOSClassArray_(args, methodParameterTypes);
  }
  return args;
}

IOSObjectArray *OrgApacheCommonsLang3ReflectMethodUtils_getVarArgsWithNSObjectArray_withIOSClassArray_(IOSObjectArray *args, IOSObjectArray *methodParameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  if (((IOSObjectArray *) nil_chk(args))->size_ == ((IOSObjectArray *) nil_chk(methodParameterTypes))->size_ && [[nil_chk(IOSObjectArray_Get(args, args->size_ - 1)) java_getClass] isEqual:IOSObjectArray_Get(methodParameterTypes, methodParameterTypes->size_ - 1)]) {
    return args;
  }
  IOSObjectArray *newArgs = [IOSObjectArray arrayWithLength:methodParameterTypes->size_ type:NSObject_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(args, 0, newArgs, 0, methodParameterTypes->size_ - 1);
  IOSClass *varArgComponentType = [((IOSClass *) nil_chk(IOSObjectArray_Get(methodParameterTypes, methodParameterTypes->size_ - 1))) getComponentType];
  jint varArgLength = args->size_ - methodParameterTypes->size_ + 1;
  id varArgsArray = JavaLangReflectArray_newInstanceWithIOSClass_withInt_(OrgApacheCommonsLang3ClassUtils_primitiveToWrapperWithIOSClass_(varArgComponentType), varArgLength);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(args, methodParameterTypes->size_ - 1, varArgsArray, 0, varArgLength);
  if ([((IOSClass *) nil_chk(varArgComponentType)) isPrimitive]) {
    varArgsArray = OrgApacheCommonsLang3ArrayUtils_toPrimitiveWithId_(varArgsArray);
  }
  IOSObjectArray_Set(newArgs, methodParameterTypes->size_ - 1, varArgsArray);
  return newArgs;
}

id OrgApacheCommonsLang3ReflectMethodUtils_invokeExactStaticMethodWithIOSClass_withNSString_withNSObjectArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *args) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  args = OrgApacheCommonsLang3ArrayUtils_nullToEmptyWithNSObjectArray_(args);
  IOSObjectArray *parameterTypes = OrgApacheCommonsLang3ClassUtils_toClassWithNSObjectArray_(args);
  return OrgApacheCommonsLang3ReflectMethodUtils_invokeExactStaticMethodWithIOSClass_withNSString_withNSObjectArray_withIOSClassArray_(cls, methodName, args, parameterTypes);
}

JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  @try {
    return OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithJavaLangReflectMethod_([((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:parameterTypes]);
  }
  @catch (JavaLangNoSuchMethodException *e) {
    return nil;
  }
}

JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithJavaLangReflectMethod_(JavaLangReflectMethod *method) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  if (!OrgApacheCommonsLang3ReflectMemberUtils_isAccessibleWithJavaLangReflectMember_(method)) {
    return nil;
  }
  IOSClass *cls = [((JavaLangReflectMethod *) nil_chk(method)) getDeclaringClass];
  if (JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk(cls)) getModifiers])) {
    return method;
  }
  NSString *methodName = [method getName];
  IOSObjectArray *parameterTypes = [method getParameterTypes];
  method = OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromInterfaceNestWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
  if (method == nil) {
    method = OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromSuperclassWithIOSClass_withNSString_withIOSClassArray_(cls, methodName, parameterTypes);
  }
  return method;
}

JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromSuperclassWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  IOSClass *parentClass = [((IOSClass *) nil_chk(cls)) getSuperclass];
  while (parentClass != nil) {
    if (JavaLangReflectModifier_isPublicWithInt_([parentClass getModifiers])) {
      @try {
        return [parentClass getMethod:methodName parameterTypes:parameterTypes];
      }
      @catch (JavaLangNoSuchMethodException *e) {
        return nil;
      }
    }
    parentClass = [parentClass getSuperclass];
  }
  return nil;
}

JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromInterfaceNestWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  for (; cls != nil; cls = [cls getSuperclass]) {
    IOSObjectArray *interfaces = [cls getInterfaces];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(interfaces))->size_; i++) {
      if (!JavaLangReflectModifier_isPublicWithInt_([((IOSClass *) nil_chk(IOSObjectArray_Get(interfaces, i))) getModifiers])) {
        continue;
      }
      @try {
        return [((IOSClass *) nil_chk(IOSObjectArray_Get(interfaces, i))) getDeclaredMethod:methodName parameterTypes:parameterTypes];
      }
      @catch (JavaLangNoSuchMethodException *e) {
      }
      JavaLangReflectMethod *method = OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodFromInterfaceNestWithIOSClass_withNSString_withIOSClassArray_(IOSObjectArray_Get(interfaces, i), methodName, parameterTypes);
      if (method != nil) {
        return method;
      }
    }
  }
  return nil;
}

JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getMatchingAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  @try {
    JavaLangReflectMethod *method = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:parameterTypes];
    OrgApacheCommonsLang3ReflectMemberUtils_setAccessibleWorkaroundWithJavaLangReflectAccessibleObject_(method);
    return method;
  }
  @catch (JavaLangNoSuchMethodException *e) {
  }
  JavaLangReflectMethod *bestMatch = nil;
  IOSObjectArray *methods = [cls getMethods];
  {
    IOSObjectArray *a__ = methods;
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      if ([((NSString *) nil_chk([((JavaLangReflectMethod *) nil_chk(method)) getName])) isEqual:methodName] && OrgApacheCommonsLang3ReflectMemberUtils_isMatchingMethodWithJavaLangReflectMethod_withIOSClassArray_(method, parameterTypes)) {
        JavaLangReflectMethod *accessibleMethod = OrgApacheCommonsLang3ReflectMethodUtils_getAccessibleMethodWithJavaLangReflectMethod_(method);
        if (accessibleMethod != nil && (bestMatch == nil || OrgApacheCommonsLang3ReflectMemberUtils_compareMethodFitWithJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClassArray_(accessibleMethod, bestMatch, parameterTypes) < 0)) {
          bestMatch = accessibleMethod;
        }
      }
    }
  }
  if (bestMatch != nil) {
    OrgApacheCommonsLang3ReflectMemberUtils_setAccessibleWorkaroundWithJavaLangReflectAccessibleObject_(bestMatch);
  }
  return bestMatch;
}

JavaLangReflectMethod *OrgApacheCommonsLang3ReflectMethodUtils_getMatchingMethodWithIOSClass_withNSString_withIOSClassArray_(IOSClass *cls, NSString *methodName, IOSObjectArray *parameterTypes) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_withNSString_withNSObjectArray_(cls, @"Null class not allowed.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  OrgApacheCommonsLang3Validate_notEmptyWithJavaLangCharSequence_withNSString_withNSObjectArray_(methodName, @"Null or blank methodName not allowed.", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  IOSObjectArray *methodArray = [((IOSClass *) nil_chk(cls)) getDeclaredMethods];
  id<JavaUtilList> superclassList = OrgApacheCommonsLang3ClassUtils_getAllSuperclassesWithIOSClass_(cls);
  for (IOSClass * __strong klass in nil_chk(superclassList)) {
    methodArray = OrgApacheCommonsLang3ArrayUtils_addAllWithNSObjectArray_withNSObjectArray_(methodArray, [((IOSClass *) nil_chk(klass)) getDeclaredMethods]);
  }
  JavaLangReflectMethod *inexactMatch = nil;
  {
    IOSObjectArray *a__ = methodArray;
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      if ([((NSString *) nil_chk(methodName)) isEqual:[((JavaLangReflectMethod *) nil_chk(method)) getName]] && OrgApacheCommonsLang3ArrayUtils_isEqualsWithId_withId_(parameterTypes, [method getParameterTypes])) {
        return method;
      }
      else if ([methodName isEqual:[method getName]] && OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_withBoolean_(parameterTypes, [method getParameterTypes], true)) {
        if (inexactMatch == nil) {
          inexactMatch = method;
        }
        else if (OrgApacheCommonsLang3ReflectMethodUtils_distanceWithIOSClassArray_withIOSClassArray_(parameterTypes, [method getParameterTypes]) < OrgApacheCommonsLang3ReflectMethodUtils_distanceWithIOSClassArray_withIOSClassArray_(parameterTypes, [inexactMatch getParameterTypes])) {
          inexactMatch = method;
        }
      }
    }
  }
  return inexactMatch;
}

jint OrgApacheCommonsLang3ReflectMethodUtils_distanceWithIOSClassArray_withIOSClassArray_(IOSObjectArray *classArray, IOSObjectArray *toClassArray) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  jint answer = 0;
  if (!OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClassArray_withIOSClassArray_withBoolean_(classArray, toClassArray, true)) {
    return -1;
  }
  for (jint offset = 0; offset < ((IOSObjectArray *) nil_chk(classArray))->size_; offset++) {
    if ([((IOSClass *) nil_chk(IOSObjectArray_Get(classArray, offset))) isEqual:IOSObjectArray_Get(nil_chk(toClassArray), offset)]) {
      continue;
    }
    else if (OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(IOSObjectArray_Get(classArray, offset), IOSObjectArray_Get(toClassArray, offset), true) && !OrgApacheCommonsLang3ClassUtils_isAssignableWithIOSClass_withIOSClass_withBoolean_(IOSObjectArray_Get(classArray, offset), IOSObjectArray_Get(toClassArray, offset), false)) {
      answer++;
    }
    else {
      answer = answer + 2;
    }
  }
  return answer;
}

id<JavaUtilSet> OrgApacheCommonsLang3ReflectMethodUtils_getOverrideHierarchyWithJavaLangReflectMethod_withOrgApacheCommonsLang3ClassUtils_Interfaces_(JavaLangReflectMethod *method, OrgApacheCommonsLang3ClassUtils_Interfaces *interfacesBehavior) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  OrgApacheCommonsLang3Validate_notNullWithId_(method);
  id<JavaUtilSet> result = create_JavaUtilLinkedHashSet_init();
  [result addWithId:method];
  IOSObjectArray *parameterTypes = [((JavaLangReflectMethod *) nil_chk(method)) getParameterTypes];
  IOSClass *declaringClass = [method getDeclaringClass];
  id<JavaUtilIterator> hierarchy = [((id<JavaLangIterable>) nil_chk(OrgApacheCommonsLang3ClassUtils_hierarchyWithIOSClass_withOrgApacheCommonsLang3ClassUtils_Interfaces_(declaringClass, interfacesBehavior))) iterator];
  [((id<JavaUtilIterator>) nil_chk(hierarchy)) next];
  while ([hierarchy hasNext]) {
    {
      IOSClass *c = [hierarchy next];
      JavaLangReflectMethod *m = OrgApacheCommonsLang3ReflectMethodUtils_getMatchingAccessibleMethodWithIOSClass_withNSString_withIOSClassArray_(c, [method getName], parameterTypes);
      if (m == nil) {
        continue;
      }
      if (JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_([m getParameterTypes], parameterTypes)) {
        [result addWithId:m];
        continue;
      }
      id<JavaUtilMap> typeArguments = OrgApacheCommonsLang3ReflectTypeUtils_getTypeArgumentsWithJavaLangReflectType_withIOSClass_(declaringClass, [m getDeclaringClass]);
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parameterTypes))->size_; i++) {
        id<JavaLangReflectType> childType = OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(typeArguments, IOSObjectArray_Get(nil_chk([method getGenericParameterTypes]), i));
        id<JavaLangReflectType> parentType = OrgApacheCommonsLang3ReflectTypeUtils_unrollVariablesWithJavaUtilMap_withJavaLangReflectType_(typeArguments, IOSObjectArray_Get(nil_chk([m getGenericParameterTypes]), i));
        if (!OrgApacheCommonsLang3ReflectTypeUtils_equalsWithJavaLangReflectType_withJavaLangReflectType_(childType, parentType)) {
          goto continue_hierarchyTraversal;
        }
      }
      [result addWithId:m];
    }
    continue_hierarchyTraversal: ;
  }
  return result;
}

IOSObjectArray *OrgApacheCommonsLang3ReflectMethodUtils_getMethodsWithAnnotationWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *annotationCls) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  id<JavaUtilList> annotatedMethodsList = OrgApacheCommonsLang3ReflectMethodUtils_getMethodsListWithAnnotationWithIOSClass_withIOSClass_(cls, annotationCls);
  return [((id<JavaUtilList>) nil_chk(annotatedMethodsList)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[annotatedMethodsList size] type:JavaLangReflectMethod_class_()]];
}

id<JavaUtilList> OrgApacheCommonsLang3ReflectMethodUtils_getMethodsListWithAnnotationWithIOSClass_withIOSClass_(IOSClass *cls, IOSClass *annotationCls) {
  OrgApacheCommonsLang3ReflectMethodUtils_initialize();
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(cls != nil, @"The class must not be null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  OrgApacheCommonsLang3Validate_isTrueWithBoolean_withNSString_withNSObjectArray_(annotationCls != nil, @"The annotation class must not be null", [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  IOSObjectArray *allMethods = [((IOSClass *) nil_chk(cls)) getMethods];
  id<JavaUtilList> annotatedMethods = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = allMethods;
    JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaLangReflectMethod * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaLangReflectMethod *method = *b__++;
      if ([((JavaLangReflectMethod *) nil_chk(method)) getAnnotationWithIOSClass:annotationCls] != nil) {
        [annotatedMethods addWithId:method];
      }
    }
  }
  return annotatedMethods;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ReflectMethodUtils)
