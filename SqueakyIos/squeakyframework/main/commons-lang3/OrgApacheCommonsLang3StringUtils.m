//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/StringUtils.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3ArrayUtils.h"
#include "OrgApacheCommonsLang3CharSequenceUtils.h"
#include "OrgApacheCommonsLang3CharUtils.h"
#include "OrgApacheCommonsLang3ObjectUtils.h"
#include "OrgApacheCommonsLang3StringUtils.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/annotation/Annotation.h"
#include "java/nio/charset/Charset.h"
#include "java/text/Normalizer.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface OrgApacheCommonsLang3StringUtils ()

+ (void)convertRemainingAccentCharactersWithJavaLangStringBuilder:(JavaLangStringBuilder *)decomposed;

+ (jint)ordinalIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                       withInt:(jint)ordinal
                                   withBoolean:(jboolean)lastIndex;

+ (IOSObjectArray *)splitByWholeSeparatorWorkerWithNSString:(NSString *)str
                                               withNSString:(NSString *)separator
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)preserveAllTokens;

+ (IOSObjectArray *)splitWorkerWithNSString:(NSString *)str
                                   withChar:(jchar)separatorChar
                                withBoolean:(jboolean)preserveAllTokens;

+ (IOSObjectArray *)splitWorkerWithNSString:(NSString *)str
                               withNSString:(NSString *)separatorChars
                                    withInt:(jint)max
                                withBoolean:(jboolean)preserveAllTokens;

+ (IOSObjectArray *)splitByCharacterTypeWithNSString:(NSString *)str
                                         withBoolean:(jboolean)camelCase;

+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)searchString
                     withNSString:(NSString *)replacement
                          withInt:(jint)max
                      withBoolean:(jboolean)ignoreCase;

+ (NSString *)replaceEachWithNSString:(NSString *)text
                    withNSStringArray:(IOSObjectArray *)searchList
                    withNSStringArray:(IOSObjectArray *)replacementList
                          withBoolean:(jboolean)repeat
                              withInt:(jint)timeToLive;

+ (IOSIntArray *)matchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)first
                        withJavaLangCharSequence:(id<JavaLangCharSequence>)second;

+ (jboolean)startsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
                                   withBoolean:(jboolean)ignoreCase;

+ (jboolean)endsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
                                 withBoolean:(jboolean)ignoreCase;

+ (NSString *)appendIfMissingWithNSString:(NSString *)str
                 withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
                              withBoolean:(jboolean)ignoreCase
            withJavaLangCharSequenceArray:(IOSObjectArray *)suffixes;

+ (NSString *)prependIfMissingWithNSString:(NSString *)str
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
                               withBoolean:(jboolean)ignoreCase
             withJavaLangCharSequenceArray:(IOSObjectArray *)prefixes;

@end

inline jint OrgApacheCommonsLang3StringUtils_get_PAD_LIMIT();
#define OrgApacheCommonsLang3StringUtils_PAD_LIMIT 8192
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3StringUtils, PAD_LIMIT, jint)

__attribute__((unused)) static void OrgApacheCommonsLang3StringUtils_convertRemainingAccentCharactersWithJavaLangStringBuilder_(JavaLangStringBuilder *decomposed);

__attribute__((unused)) static jint OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withBoolean_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint ordinal, jboolean lastIndex);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWorkerWithNSString_withNSString_withInt_withBoolean_(NSString *str, NSString *separator, jint max, jboolean preserveAllTokens);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withChar_withBoolean_(NSString *str, jchar separatorChar, jboolean preserveAllTokens);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(NSString *str, NSString *separatorChars, jint max, jboolean preserveAllTokens);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_withBoolean_(NSString *str, jboolean camelCase);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_withBoolean_(NSString *text, NSString *searchString, NSString *replacement, jint max, jboolean ignoreCase);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_withBoolean_withInt_(NSString *text, IOSObjectArray *searchList, IOSObjectArray *replacementList, jboolean repeat, jint timeToLive);

__attribute__((unused)) static IOSIntArray *OrgApacheCommonsLang3StringUtils_matchesWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> first, id<JavaLangCharSequence> second);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> prefix, jboolean ignoreCase);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> suffix, jboolean ignoreCase);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> suffix, jboolean ignoreCase, IOSObjectArray *suffixes);

__attribute__((unused)) static NSString *OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> prefix, jboolean ignoreCase, IOSObjectArray *prefixes);

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3StringUtils__Annotations$0();

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsLang3StringUtils__Annotations$1();

NSString *OrgApacheCommonsLang3StringUtils_SPACE = @" ";
NSString *OrgApacheCommonsLang3StringUtils_EMPTY = @"";
NSString *OrgApacheCommonsLang3StringUtils_LF = @"\n";
NSString *OrgApacheCommonsLang3StringUtils_CR = @"\x0d";

@implementation OrgApacheCommonsLang3StringUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3StringUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs);
}

+ (jboolean)isNotEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isNotEmptyWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAnyEmptyWithJavaLangCharSequenceArray:(IOSObjectArray *)css {
  return OrgApacheCommonsLang3StringUtils_isAnyEmptyWithJavaLangCharSequenceArray_(css);
}

+ (jboolean)isNoneEmptyWithJavaLangCharSequenceArray:(IOSObjectArray *)css {
  return OrgApacheCommonsLang3StringUtils_isNoneEmptyWithJavaLangCharSequenceArray_(css);
}

+ (jboolean)isBlankWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(cs);
}

+ (jboolean)isNotBlankWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isNotBlankWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAnyBlankWithJavaLangCharSequenceArray:(IOSObjectArray *)css {
  return OrgApacheCommonsLang3StringUtils_isAnyBlankWithJavaLangCharSequenceArray_(css);
}

+ (jboolean)isNoneBlankWithJavaLangCharSequenceArray:(IOSObjectArray *)css {
  return OrgApacheCommonsLang3StringUtils_isNoneBlankWithJavaLangCharSequenceArray_(css);
}

+ (NSString *)trimWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_trimWithNSString_(str);
}

+ (NSString *)trimToNullWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_trimToNullWithNSString_(str);
}

+ (NSString *)trimToEmptyWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_trimToEmptyWithNSString_(str);
}

+ (NSString *)truncateWithNSString:(NSString *)str
                           withInt:(jint)maxWidth {
  return OrgApacheCommonsLang3StringUtils_truncateWithNSString_withInt_(str, maxWidth);
}

+ (NSString *)truncateWithNSString:(NSString *)str
                           withInt:(jint)offset
                           withInt:(jint)maxWidth {
  return OrgApacheCommonsLang3StringUtils_truncateWithNSString_withInt_withInt_(str, offset, maxWidth);
}

+ (NSString *)stripWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_stripWithNSString_(str);
}

+ (NSString *)stripToNullWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_stripToNullWithNSString_(str);
}

+ (NSString *)stripToEmptyWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_stripToEmptyWithNSString_(str);
}

+ (NSString *)stripWithNSString:(NSString *)str
                   withNSString:(NSString *)stripChars {
  return OrgApacheCommonsLang3StringUtils_stripWithNSString_withNSString_(str, stripChars);
}

+ (NSString *)stripStartWithNSString:(NSString *)str
                        withNSString:(NSString *)stripChars {
  return OrgApacheCommonsLang3StringUtils_stripStartWithNSString_withNSString_(str, stripChars);
}

+ (NSString *)stripEndWithNSString:(NSString *)str
                      withNSString:(NSString *)stripChars {
  return OrgApacheCommonsLang3StringUtils_stripEndWithNSString_withNSString_(str, stripChars);
}

+ (IOSObjectArray *)stripAllWithNSStringArray:(IOSObjectArray *)strs {
  return OrgApacheCommonsLang3StringUtils_stripAllWithNSStringArray_(strs);
}

+ (IOSObjectArray *)stripAllWithNSStringArray:(IOSObjectArray *)strs
                                 withNSString:(NSString *)stripChars {
  return OrgApacheCommonsLang3StringUtils_stripAllWithNSStringArray_withNSString_(strs, stripChars);
}

+ (NSString *)stripAccentsWithNSString:(NSString *)input {
  return OrgApacheCommonsLang3StringUtils_stripAccentsWithNSString_(input);
}

+ (void)convertRemainingAccentCharactersWithJavaLangStringBuilder:(JavaLangStringBuilder *)decomposed {
  OrgApacheCommonsLang3StringUtils_convertRemainingAccentCharactersWithJavaLangStringBuilder_(decomposed);
}

+ (jboolean)equalsWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs1
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)cs2 {
  return OrgApacheCommonsLang3StringUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(cs1, cs2);
}

+ (jboolean)equalsIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str1
                            withJavaLangCharSequence:(id<JavaLangCharSequence>)str2 {
  return OrgApacheCommonsLang3StringUtils_equalsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str1, str2);
}

+ (jint)compareWithNSString:(NSString *)str1
               withNSString:(NSString *)str2 {
  return OrgApacheCommonsLang3StringUtils_compareWithNSString_withNSString_(str1, str2);
}

+ (jint)compareWithNSString:(NSString *)str1
               withNSString:(NSString *)str2
                withBoolean:(jboolean)nullIsLess {
  return OrgApacheCommonsLang3StringUtils_compareWithNSString_withNSString_withBoolean_(str1, str2, nullIsLess);
}

+ (jint)compareIgnoreCaseWithNSString:(NSString *)str1
                         withNSString:(NSString *)str2 {
  return OrgApacheCommonsLang3StringUtils_compareIgnoreCaseWithNSString_withNSString_(str1, str2);
}

+ (jint)compareIgnoreCaseWithNSString:(NSString *)str1
                         withNSString:(NSString *)str2
                          withBoolean:(jboolean)nullIsLess {
  return OrgApacheCommonsLang3StringUtils_compareIgnoreCaseWithNSString_withNSString_withBoolean_(str1, str2, nullIsLess);
}

+ (jboolean)equalsAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)string
                withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrings {
  return OrgApacheCommonsLang3StringUtils_equalsAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(string, searchStrings);
}

+ (jboolean)equalsAnyIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)string
                          withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrings {
  return OrgApacheCommonsLang3StringUtils_equalsAnyIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequenceArray_(string, searchStrings);
}

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                withInt:(jint)searchChar {
  return OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withInt_(seq, searchChar);
}

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                withInt:(jint)searchChar
                                withInt:(jint)startPos {
  return OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(seq, searchChar, startPos);
}

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
               withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq {
  return OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_(seq, searchSeq);
}

+ (jint)indexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
               withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq
                                withInt:(jint)startPos {
  return OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(seq, searchSeq, startPos);
}

+ (jint)ordinalIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                       withInt:(jint)ordinal {
  return OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, ordinal);
}

+ (jint)ordinalIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                       withInt:(jint)ordinal
                                   withBoolean:(jboolean)lastIndex {
  return OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withBoolean_(str, searchStr, ordinal, lastIndex);
}

+ (jint)indexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr {
  return OrgApacheCommonsLang3StringUtils_indexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str, searchStr);
}

+ (jint)indexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                          withInt:(jint)startPos {
  return OrgApacheCommonsLang3StringUtils_indexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, startPos);
}

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)searchChar {
  return OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withInt_(seq, searchChar);
}

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                    withInt:(jint)searchChar
                                    withInt:(jint)startPos {
  return OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withInt_withInt_(seq, searchChar, startPos);
}

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                   withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq {
  return OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_(seq, searchSeq);
}

+ (jint)lastOrdinalIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                          withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                           withInt:(jint)ordinal {
  return OrgApacheCommonsLang3StringUtils_lastOrdinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, ordinal);
}

+ (jint)lastIndexOfWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                   withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq
                                    withInt:(jint)startPos {
  return OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(seq, searchSeq, startPos);
}

+ (jint)lastIndexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr {
  return OrgApacheCommonsLang3StringUtils_lastIndexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str, searchStr);
}

+ (jint)lastIndexOfIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                             withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr
                                              withInt:(jint)startPos {
  return OrgApacheCommonsLang3StringUtils_lastIndexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, startPos);
}

+ (jboolean)containsWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                                     withInt:(jint)searchChar {
  return OrgApacheCommonsLang3StringUtils_containsWithJavaLangCharSequence_withInt_(seq, searchChar);
}

+ (jboolean)containsWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)searchSeq {
  return OrgApacheCommonsLang3StringUtils_containsWithJavaLangCharSequence_withJavaLangCharSequence_(seq, searchSeq);
}

+ (jboolean)containsIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)searchStr {
  return OrgApacheCommonsLang3StringUtils_containsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str, searchStr);
}

+ (jboolean)containsWhitespaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq {
  return OrgApacheCommonsLang3StringUtils_containsWhitespaceWithJavaLangCharSequence_(seq);
}

+ (jint)indexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                             withCharArray:(IOSCharArray *)searchChars {
  return OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withCharArray_(cs, searchChars);
}

+ (jint)indexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                              withNSString:(NSString *)searchChars {
  return OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withNSString_(cs, searchChars);
}

+ (jboolean)containsAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                  withCharArray:(IOSCharArray *)searchChars {
  return OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withCharArray_(cs, searchChars);
}

+ (jboolean)containsAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                       withJavaLangCharSequence:(id<JavaLangCharSequence>)searchChars {
  return OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withJavaLangCharSequence_(cs, searchChars);
}

+ (jboolean)containsAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                  withJavaLangCharSequenceArray:(IOSObjectArray *)searchCharSequences {
  return OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(cs, searchCharSequences);
}

+ (jint)indexOfAnyButWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                withCharArray:(IOSCharArray *)searchChars {
  return OrgApacheCommonsLang3StringUtils_indexOfAnyButWithJavaLangCharSequence_withCharArray_(cs, searchChars);
}

+ (jint)indexOfAnyButWithJavaLangCharSequence:(id<JavaLangCharSequence>)seq
                     withJavaLangCharSequence:(id<JavaLangCharSequence>)searchChars {
  return OrgApacheCommonsLang3StringUtils_indexOfAnyButWithJavaLangCharSequence_withJavaLangCharSequence_(seq, searchChars);
}

+ (jboolean)containsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                   withCharArray:(IOSCharArray *)valid {
  return OrgApacheCommonsLang3StringUtils_containsOnlyWithJavaLangCharSequence_withCharArray_(cs, valid);
}

+ (jboolean)containsOnlyWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withNSString:(NSString *)validChars {
  return OrgApacheCommonsLang3StringUtils_containsOnlyWithJavaLangCharSequence_withNSString_(cs, validChars);
}

+ (jboolean)containsNoneWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                   withCharArray:(IOSCharArray *)searchChars {
  return OrgApacheCommonsLang3StringUtils_containsNoneWithJavaLangCharSequence_withCharArray_(cs, searchChars);
}

+ (jboolean)containsNoneWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withNSString:(NSString *)invalidChars {
  return OrgApacheCommonsLang3StringUtils_containsNoneWithJavaLangCharSequence_withNSString_(cs, invalidChars);
}

+ (jint)indexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
             withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrs {
  return OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(str, searchStrs);
}

+ (jint)lastIndexOfAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                 withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrs {
  return OrgApacheCommonsLang3StringUtils_lastIndexOfAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(str, searchStrs);
}

+ (NSString *)substringWithNSString:(NSString *)str
                            withInt:(jint)start {
  return OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_(str, start);
}

+ (NSString *)substringWithNSString:(NSString *)str
                            withInt:(jint)start
                            withInt:(jint)end {
  return OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_withInt_(str, start, end);
}

+ (NSString *)leftWithNSString:(NSString *)str
                       withInt:(jint)len {
  return OrgApacheCommonsLang3StringUtils_leftWithNSString_withInt_(str, len);
}

+ (NSString *)rightWithNSString:(NSString *)str
                        withInt:(jint)len {
  return OrgApacheCommonsLang3StringUtils_rightWithNSString_withInt_(str, len);
}

+ (NSString *)midWithNSString:(NSString *)str
                      withInt:(jint)pos
                      withInt:(jint)len {
  return OrgApacheCommonsLang3StringUtils_midWithNSString_withInt_withInt_(str, pos, len);
}

+ (NSString *)substringBeforeWithNSString:(NSString *)str
                             withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_substringBeforeWithNSString_withNSString_(str, separator);
}

+ (NSString *)substringAfterWithNSString:(NSString *)str
                            withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_substringAfterWithNSString_withNSString_(str, separator);
}

+ (NSString *)substringBeforeLastWithNSString:(NSString *)str
                                 withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_substringBeforeLastWithNSString_withNSString_(str, separator);
}

+ (NSString *)substringAfterLastWithNSString:(NSString *)str
                                withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_substringAfterLastWithNSString_withNSString_(str, separator);
}

+ (NSString *)substringBetweenWithNSString:(NSString *)str
                              withNSString:(NSString *)tag {
  return OrgApacheCommonsLang3StringUtils_substringBetweenWithNSString_withNSString_(str, tag);
}

+ (NSString *)substringBetweenWithNSString:(NSString *)str
                              withNSString:(NSString *)open
                              withNSString:(NSString *)close {
  return OrgApacheCommonsLang3StringUtils_substringBetweenWithNSString_withNSString_withNSString_(str, open, close);
}

+ (IOSObjectArray *)substringsBetweenWithNSString:(NSString *)str
                                     withNSString:(NSString *)open
                                     withNSString:(NSString *)close {
  return OrgApacheCommonsLang3StringUtils_substringsBetweenWithNSString_withNSString_withNSString_(str, open, close);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_splitWithNSString_(str);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)str
                             withChar:(jchar)separatorChar {
  return OrgApacheCommonsLang3StringUtils_splitWithNSString_withChar_(str, separatorChar);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)str
                         withNSString:(NSString *)separatorChars {
  return OrgApacheCommonsLang3StringUtils_splitWithNSString_withNSString_(str, separatorChars);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)str
                         withNSString:(NSString *)separatorChars
                              withInt:(jint)max {
  return OrgApacheCommonsLang3StringUtils_splitWithNSString_withNSString_withInt_(str, separatorChars, max);
}

+ (IOSObjectArray *)splitByWholeSeparatorWithNSString:(NSString *)str
                                         withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWithNSString_withNSString_(str, separator);
}

+ (IOSObjectArray *)splitByWholeSeparatorWithNSString:(NSString *)str
                                         withNSString:(NSString *)separator
                                              withInt:(jint)max {
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWithNSString_withNSString_withInt_(str, separator, max);
}

+ (IOSObjectArray *)splitByWholeSeparatorPreserveAllTokensWithNSString:(NSString *)str
                                                          withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorPreserveAllTokensWithNSString_withNSString_(str, separator);
}

+ (IOSObjectArray *)splitByWholeSeparatorPreserveAllTokensWithNSString:(NSString *)str
                                                          withNSString:(NSString *)separator
                                                               withInt:(jint)max {
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorPreserveAllTokensWithNSString_withNSString_withInt_(str, separator, max);
}

+ (IOSObjectArray *)splitByWholeSeparatorWorkerWithNSString:(NSString *)str
                                               withNSString:(NSString *)separator
                                                    withInt:(jint)max
                                                withBoolean:(jboolean)preserveAllTokens {
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWorkerWithNSString_withNSString_withInt_withBoolean_(str, separator, max, preserveAllTokens);
}

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_(str);
}

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str
                                              withChar:(jchar)separatorChar {
  return OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withChar_(str, separatorChar);
}

+ (IOSObjectArray *)splitWorkerWithNSString:(NSString *)str
                                   withChar:(jchar)separatorChar
                                withBoolean:(jboolean)preserveAllTokens {
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withChar_withBoolean_(str, separatorChar, preserveAllTokens);
}

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str
                                          withNSString:(NSString *)separatorChars {
  return OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withNSString_(str, separatorChars);
}

+ (IOSObjectArray *)splitPreserveAllTokensWithNSString:(NSString *)str
                                          withNSString:(NSString *)separatorChars
                                               withInt:(jint)max {
  return OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withNSString_withInt_(str, separatorChars, max);
}

+ (IOSObjectArray *)splitWorkerWithNSString:(NSString *)str
                               withNSString:(NSString *)separatorChars
                                    withInt:(jint)max
                                withBoolean:(jboolean)preserveAllTokens {
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(str, separatorChars, max, preserveAllTokens);
}

+ (IOSObjectArray *)splitByCharacterTypeWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_(str);
}

+ (IOSObjectArray *)splitByCharacterTypeCamelCaseWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_splitByCharacterTypeCamelCaseWithNSString_(str);
}

+ (IOSObjectArray *)splitByCharacterTypeWithNSString:(NSString *)str
                                         withBoolean:(jboolean)camelCase {
  return OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_withBoolean_(str, camelCase);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)elements {
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_(elements);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                           withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_(array, separator);
}

+ (NSString *)joinWithLongArray:(IOSLongArray *)array
                       withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithLongArray_withChar_(array, separator);
}

+ (NSString *)joinWithIntArray:(IOSIntArray *)array
                      withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithIntArray_withChar_(array, separator);
}

+ (NSString *)joinWithShortArray:(IOSShortArray *)array
                        withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithShortArray_withChar_(array, separator);
}

+ (NSString *)joinWithByteArray:(IOSByteArray *)array
                       withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithByteArray_withChar_(array, separator);
}

+ (NSString *)joinWithCharArray:(IOSCharArray *)array
                       withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithCharArray_withChar_(array, separator);
}

+ (NSString *)joinWithFloatArray:(IOSFloatArray *)array
                        withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithFloatArray_withChar_(array, separator);
}

+ (NSString *)joinWithDoubleArray:(IOSDoubleArray *)array
                         withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithDoubleArray_withChar_(array, separator);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                           withChar:(jchar)separator
                            withInt:(jint)startIndex
                            withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithLongArray:(IOSLongArray *)array
                       withChar:(jchar)separator
                        withInt:(jint)startIndex
                        withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithLongArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithIntArray:(IOSIntArray *)array
                      withChar:(jchar)separator
                       withInt:(jint)startIndex
                       withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithIntArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithByteArray:(IOSByteArray *)array
                       withChar:(jchar)separator
                        withInt:(jint)startIndex
                        withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithByteArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithShortArray:(IOSShortArray *)array
                        withChar:(jchar)separator
                         withInt:(jint)startIndex
                         withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithShortArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithCharArray:(IOSCharArray *)array
                       withChar:(jchar)separator
                        withInt:(jint)startIndex
                        withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithCharArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithDoubleArray:(IOSDoubleArray *)array
                         withChar:(jchar)separator
                          withInt:(jint)startIndex
                          withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithDoubleArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithFloatArray:(IOSFloatArray *)array
                        withChar:(jchar)separator
                         withInt:(jint)startIndex
                         withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithFloatArray_withChar_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                       withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_(array, separator);
}

+ (NSString *)joinWithNSObjectArray:(IOSObjectArray *)array
                       withNSString:(NSString *)separator
                            withInt:(jint)startIndex
                            withInt:(jint)endIndex {
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_withInt_withInt_(array, separator, startIndex, endIndex);
}

+ (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                              withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withChar_(iterator, separator);
}

+ (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                          withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withNSString_(iterator, separator);
}

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)iterable
                              withChar:(jchar)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithJavaLangIterable_withChar_(iterable, separator);
}

+ (NSString *)joinWithJavaLangIterable:(id<JavaLangIterable>)iterable
                          withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_joinWithJavaLangIterable_withNSString_(iterable, separator);
}

+ (NSString *)joinWithWithNSString:(NSString *)separator
                 withNSObjectArray:(IOSObjectArray *)objects {
  return OrgApacheCommonsLang3StringUtils_joinWithWithNSString_withNSObjectArray_(separator, objects);
}

+ (NSString *)deleteWhitespaceWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_deleteWhitespaceWithNSString_(str);
}

+ (NSString *)removeStartWithNSString:(NSString *)str
                         withNSString:(NSString *)remove {
  return OrgApacheCommonsLang3StringUtils_removeStartWithNSString_withNSString_(str, remove);
}

+ (NSString *)removeStartIgnoreCaseWithNSString:(NSString *)str
                                   withNSString:(NSString *)remove {
  return OrgApacheCommonsLang3StringUtils_removeStartIgnoreCaseWithNSString_withNSString_(str, remove);
}

+ (NSString *)removeEndWithNSString:(NSString *)str
                       withNSString:(NSString *)remove {
  return OrgApacheCommonsLang3StringUtils_removeEndWithNSString_withNSString_(str, remove);
}

+ (NSString *)removeEndIgnoreCaseWithNSString:(NSString *)str
                                 withNSString:(NSString *)remove {
  return OrgApacheCommonsLang3StringUtils_removeEndIgnoreCaseWithNSString_withNSString_(str, remove);
}

+ (NSString *)removeWithNSString:(NSString *)str
                    withNSString:(NSString *)remove {
  return OrgApacheCommonsLang3StringUtils_removeWithNSString_withNSString_(str, remove);
}

+ (NSString *)removeIgnoreCaseWithNSString:(NSString *)str
                              withNSString:(NSString *)remove {
  return OrgApacheCommonsLang3StringUtils_removeIgnoreCaseWithNSString_withNSString_(str, remove);
}

+ (NSString *)removeWithNSString:(NSString *)str
                        withChar:(jchar)remove {
  return OrgApacheCommonsLang3StringUtils_removeWithNSString_withChar_(str, remove);
}

+ (NSString *)removeAllWithNSString:(NSString *)text
                       withNSString:(NSString *)regex {
  return OrgApacheCommonsLang3StringUtils_removeAllWithNSString_withNSString_(text, regex);
}

+ (NSString *)removeFirstWithNSString:(NSString *)text
                         withNSString:(NSString *)regex {
  return OrgApacheCommonsLang3StringUtils_removeFirstWithNSString_withNSString_(text, regex);
}

+ (NSString *)replaceOnceWithNSString:(NSString *)text
                         withNSString:(NSString *)searchString
                         withNSString:(NSString *)replacement {
  return OrgApacheCommonsLang3StringUtils_replaceOnceWithNSString_withNSString_withNSString_(text, searchString, replacement);
}

+ (NSString *)replaceOnceIgnoreCaseWithNSString:(NSString *)text
                                   withNSString:(NSString *)searchString
                                   withNSString:(NSString *)replacement {
  return OrgApacheCommonsLang3StringUtils_replaceOnceIgnoreCaseWithNSString_withNSString_withNSString_(text, searchString, replacement);
}

+ (NSString *)replacePatternWithNSString:(NSString *)source
                            withNSString:(NSString *)regex
                            withNSString:(NSString *)replacement {
  return OrgApacheCommonsLang3StringUtils_replacePatternWithNSString_withNSString_withNSString_(source, regex, replacement);
}

+ (NSString *)removePatternWithNSString:(NSString *)source
                           withNSString:(NSString *)regex {
  return OrgApacheCommonsLang3StringUtils_removePatternWithNSString_withNSString_(source, regex);
}

+ (NSString *)replaceAllWithNSString:(NSString *)text
                        withNSString:(NSString *)regex
                        withNSString:(NSString *)replacement {
  return OrgApacheCommonsLang3StringUtils_replaceAllWithNSString_withNSString_withNSString_(text, regex, replacement);
}

+ (NSString *)replaceFirstWithNSString:(NSString *)text
                          withNSString:(NSString *)regex
                          withNSString:(NSString *)replacement {
  return OrgApacheCommonsLang3StringUtils_replaceFirstWithNSString_withNSString_withNSString_(text, regex, replacement);
}

+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)searchString
                     withNSString:(NSString *)replacement {
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_(text, searchString, replacement);
}

+ (NSString *)replaceIgnoreCaseWithNSString:(NSString *)text
                               withNSString:(NSString *)searchString
                               withNSString:(NSString *)replacement {
  return OrgApacheCommonsLang3StringUtils_replaceIgnoreCaseWithNSString_withNSString_withNSString_(text, searchString, replacement);
}

+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)searchString
                     withNSString:(NSString *)replacement
                          withInt:(jint)max {
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_(text, searchString, replacement, max);
}

+ (NSString *)replaceWithNSString:(NSString *)text
                     withNSString:(NSString *)searchString
                     withNSString:(NSString *)replacement
                          withInt:(jint)max
                      withBoolean:(jboolean)ignoreCase {
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_withBoolean_(text, searchString, replacement, max, ignoreCase);
}

+ (NSString *)replaceIgnoreCaseWithNSString:(NSString *)text
                               withNSString:(NSString *)searchString
                               withNSString:(NSString *)replacement
                                    withInt:(jint)max {
  return OrgApacheCommonsLang3StringUtils_replaceIgnoreCaseWithNSString_withNSString_withNSString_withInt_(text, searchString, replacement, max);
}

+ (NSString *)replaceEachWithNSString:(NSString *)text
                    withNSStringArray:(IOSObjectArray *)searchList
                    withNSStringArray:(IOSObjectArray *)replacementList {
  return OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_(text, searchList, replacementList);
}

+ (NSString *)replaceEachRepeatedlyWithNSString:(NSString *)text
                              withNSStringArray:(IOSObjectArray *)searchList
                              withNSStringArray:(IOSObjectArray *)replacementList {
  return OrgApacheCommonsLang3StringUtils_replaceEachRepeatedlyWithNSString_withNSStringArray_withNSStringArray_(text, searchList, replacementList);
}

+ (NSString *)replaceEachWithNSString:(NSString *)text
                    withNSStringArray:(IOSObjectArray *)searchList
                    withNSStringArray:(IOSObjectArray *)replacementList
                          withBoolean:(jboolean)repeat
                              withInt:(jint)timeToLive {
  return OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_withBoolean_withInt_(text, searchList, replacementList, repeat, timeToLive);
}

+ (NSString *)replaceCharsWithNSString:(NSString *)str
                              withChar:(jchar)searchChar
                              withChar:(jchar)replaceChar {
  return OrgApacheCommonsLang3StringUtils_replaceCharsWithNSString_withChar_withChar_(str, searchChar, replaceChar);
}

+ (NSString *)replaceCharsWithNSString:(NSString *)str
                          withNSString:(NSString *)searchChars
                          withNSString:(NSString *)replaceChars {
  return OrgApacheCommonsLang3StringUtils_replaceCharsWithNSString_withNSString_withNSString_(str, searchChars, replaceChars);
}

+ (NSString *)overlayWithNSString:(NSString *)str
                     withNSString:(NSString *)overlay
                          withInt:(jint)start
                          withInt:(jint)end {
  return OrgApacheCommonsLang3StringUtils_overlayWithNSString_withNSString_withInt_withInt_(str, overlay, start, end);
}

+ (NSString *)chompWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_chompWithNSString_(str);
}

+ (NSString *)chompWithNSString:(NSString *)str
                   withNSString:(NSString *)separator {
  return OrgApacheCommonsLang3StringUtils_chompWithNSString_withNSString_(str, separator);
}

+ (NSString *)chopWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_chopWithNSString_(str);
}

+ (NSString *)repeatWithNSString:(NSString *)str
                         withInt:(jint)repeat {
  return OrgApacheCommonsLang3StringUtils_repeatWithNSString_withInt_(str, repeat);
}

+ (NSString *)repeatWithNSString:(NSString *)str
                    withNSString:(NSString *)separator
                         withInt:(jint)repeat {
  return OrgApacheCommonsLang3StringUtils_repeatWithNSString_withNSString_withInt_(str, separator, repeat);
}

+ (NSString *)repeatWithChar:(jchar)ch
                     withInt:(jint)repeat {
  return OrgApacheCommonsLang3StringUtils_repeatWithChar_withInt_(ch, repeat);
}

+ (NSString *)rightPadWithNSString:(NSString *)str
                           withInt:(jint)size {
  return OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_(str, size);
}

+ (NSString *)rightPadWithNSString:(NSString *)str
                           withInt:(jint)size
                          withChar:(jchar)padChar {
  return OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withChar_(str, size, padChar);
}

+ (NSString *)rightPadWithNSString:(NSString *)str
                           withInt:(jint)size
                      withNSString:(NSString *)padStr {
  return OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withNSString_(str, size, padStr);
}

+ (NSString *)leftPadWithNSString:(NSString *)str
                          withInt:(jint)size {
  return OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_(str, size);
}

+ (NSString *)leftPadWithNSString:(NSString *)str
                          withInt:(jint)size
                         withChar:(jchar)padChar {
  return OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withChar_(str, size, padChar);
}

+ (NSString *)leftPadWithNSString:(NSString *)str
                          withInt:(jint)size
                     withNSString:(NSString *)padStr {
  return OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withNSString_(str, size, padStr);
}

+ (jint)lengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_lengthWithJavaLangCharSequence_(cs);
}

+ (NSString *)centerWithNSString:(NSString *)str
                         withInt:(jint)size {
  return OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_(str, size);
}

+ (NSString *)centerWithNSString:(NSString *)str
                         withInt:(jint)size
                        withChar:(jchar)padChar {
  return OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_withChar_(str, size, padChar);
}

+ (NSString *)centerWithNSString:(NSString *)str
                         withInt:(jint)size
                    withNSString:(NSString *)padStr {
  return OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_withNSString_(str, size, padStr);
}

+ (NSString *)upperCaseWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_upperCaseWithNSString_(str);
}

+ (NSString *)upperCaseWithNSString:(NSString *)str
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3StringUtils_upperCaseWithNSString_withJavaUtilLocale_(str, locale);
}

+ (NSString *)lowerCaseWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_lowerCaseWithNSString_(str);
}

+ (NSString *)lowerCaseWithNSString:(NSString *)str
                 withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3StringUtils_lowerCaseWithNSString_withJavaUtilLocale_(str, locale);
}

+ (NSString *)capitalizeWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_capitalizeWithNSString_(str);
}

+ (NSString *)uncapitalizeWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_uncapitalizeWithNSString_(str);
}

+ (NSString *)swapCaseWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_swapCaseWithNSString_(str);
}

+ (jint)countMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)sub {
  return OrgApacheCommonsLang3StringUtils_countMatchesWithJavaLangCharSequence_withJavaLangCharSequence_(str, sub);
}

+ (jint)countMatchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                    withChar:(jchar)ch {
  return OrgApacheCommonsLang3StringUtils_countMatchesWithJavaLangCharSequence_withChar_(str, ch);
}

+ (jboolean)isAlphaWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isAlphaWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAlphaSpaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isAlphaSpaceWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAlphanumericWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isAlphanumericWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAlphanumericSpaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isAlphanumericSpaceWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAsciiPrintableWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isAsciiPrintableWithJavaLangCharSequence_(cs);
}

+ (jboolean)isNumericWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isNumericWithJavaLangCharSequence_(cs);
}

+ (jboolean)isNumericSpaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isNumericSpaceWithJavaLangCharSequence_(cs);
}

+ (jboolean)isWhitespaceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isWhitespaceWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAllLowerCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isAllLowerCaseWithJavaLangCharSequence_(cs);
}

+ (jboolean)isAllUpperCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs {
  return OrgApacheCommonsLang3StringUtils_isAllUpperCaseWithJavaLangCharSequence_(cs);
}

+ (NSString *)defaultStringWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_(str);
}

+ (NSString *)defaultStringWithNSString:(NSString *)str
                           withNSString:(NSString *)defaultStr {
  return OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_withNSString_(str, defaultStr);
}

+ (id<JavaLangCharSequence>)defaultIfBlankWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                          withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultStr {
  return OrgApacheCommonsLang3StringUtils_defaultIfBlankWithJavaLangCharSequence_withJavaLangCharSequence_(str, defaultStr);
}

+ (id<JavaLangCharSequence>)defaultIfEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                          withJavaLangCharSequence:(id<JavaLangCharSequence>)defaultStr {
  return OrgApacheCommonsLang3StringUtils_defaultIfEmptyWithJavaLangCharSequence_withJavaLangCharSequence_(str, defaultStr);
}

+ (NSString *)rotateWithNSString:(NSString *)str
                         withInt:(jint)shift {
  return OrgApacheCommonsLang3StringUtils_rotateWithNSString_withInt_(str, shift);
}

+ (NSString *)reverseWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_reverseWithNSString_(str);
}

+ (NSString *)reverseDelimitedWithNSString:(NSString *)str
                                  withChar:(jchar)separatorChar {
  return OrgApacheCommonsLang3StringUtils_reverseDelimitedWithNSString_withChar_(str, separatorChar);
}

+ (NSString *)abbreviateWithNSString:(NSString *)str
                             withInt:(jint)maxWidth {
  return OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_(str, maxWidth);
}

+ (NSString *)abbreviateWithNSString:(NSString *)str
                             withInt:(jint)offset
                             withInt:(jint)maxWidth {
  return OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_withInt_(str, offset, maxWidth);
}

+ (NSString *)abbreviateMiddleWithNSString:(NSString *)str
                              withNSString:(NSString *)middle
                                   withInt:(jint)length {
  return OrgApacheCommonsLang3StringUtils_abbreviateMiddleWithNSString_withNSString_withInt_(str, middle, length);
}

+ (NSString *)differenceWithNSString:(NSString *)str1
                        withNSString:(NSString *)str2 {
  return OrgApacheCommonsLang3StringUtils_differenceWithNSString_withNSString_(str1, str2);
}

+ (jint)indexOfDifferenceWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs1
                         withJavaLangCharSequence:(id<JavaLangCharSequence>)cs2 {
  return OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequence_withJavaLangCharSequence_(cs1, cs2);
}

+ (jint)indexOfDifferenceWithJavaLangCharSequenceArray:(IOSObjectArray *)css {
  return OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequenceArray_(css);
}

+ (NSString *)getCommonPrefixWithNSStringArray:(IOSObjectArray *)strs {
  return OrgApacheCommonsLang3StringUtils_getCommonPrefixWithNSStringArray_(strs);
}

+ (jint)getLevenshteinDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)t {
  return OrgApacheCommonsLang3StringUtils_getLevenshteinDistanceWithJavaLangCharSequence_withJavaLangCharSequence_(s, t);
}

+ (jint)getLevenshteinDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)t
                                               withInt:(jint)threshold {
  return OrgApacheCommonsLang3StringUtils_getLevenshteinDistanceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(s, t, threshold);
}

+ (jdouble)getJaroWinklerDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)first
                                 withJavaLangCharSequence:(id<JavaLangCharSequence>)second {
  return OrgApacheCommonsLang3StringUtils_getJaroWinklerDistanceWithJavaLangCharSequence_withJavaLangCharSequence_(first, second);
}

+ (IOSIntArray *)matchesWithJavaLangCharSequence:(id<JavaLangCharSequence>)first
                        withJavaLangCharSequence:(id<JavaLangCharSequence>)second {
  return OrgApacheCommonsLang3StringUtils_matchesWithJavaLangCharSequence_withJavaLangCharSequence_(first, second);
}

+ (jint)getFuzzyDistanceWithJavaLangCharSequence:(id<JavaLangCharSequence>)term
                        withJavaLangCharSequence:(id<JavaLangCharSequence>)query
                              withJavaUtilLocale:(JavaUtilLocale *)locale {
  return OrgApacheCommonsLang3StringUtils_getFuzzyDistanceWithJavaLangCharSequence_withJavaLangCharSequence_withJavaUtilLocale_(term, query, locale);
}

+ (jboolean)startsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix {
  return OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(str, prefix);
}

+ (jboolean)startsWithIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                                withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix {
  return OrgApacheCommonsLang3StringUtils_startsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str, prefix);
}

+ (jboolean)startsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                      withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
                                   withBoolean:(jboolean)ignoreCase {
  return OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, prefix, ignoreCase);
}

+ (jboolean)startsWithAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                    withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrings {
  return OrgApacheCommonsLang3StringUtils_startsWithAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(sequence, searchStrings);
}

+ (jboolean)endsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix {
  return OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(str, suffix);
}

+ (jboolean)endsWithIgnoreCaseWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                              withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix {
  return OrgApacheCommonsLang3StringUtils_endsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str, suffix);
}

+ (jboolean)endsWithWithJavaLangCharSequence:(id<JavaLangCharSequence>)str
                    withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
                                 withBoolean:(jboolean)ignoreCase {
  return OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, suffix, ignoreCase);
}

+ (NSString *)normalizeSpaceWithNSString:(NSString *)str {
  return OrgApacheCommonsLang3StringUtils_normalizeSpaceWithNSString_(str);
}

+ (jboolean)endsWithAnyWithJavaLangCharSequence:(id<JavaLangCharSequence>)sequence
                  withJavaLangCharSequenceArray:(IOSObjectArray *)searchStrings {
  return OrgApacheCommonsLang3StringUtils_endsWithAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(sequence, searchStrings);
}

+ (NSString *)appendIfMissingWithNSString:(NSString *)str
                 withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
                              withBoolean:(jboolean)ignoreCase
            withJavaLangCharSequenceArray:(IOSObjectArray *)suffixes {
  return OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(str, suffix, ignoreCase, suffixes);
}

+ (NSString *)appendIfMissingWithNSString:(NSString *)str
                 withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
            withJavaLangCharSequenceArray:(IOSObjectArray *)suffixes {
  return OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(str, suffix, suffixes);
}

+ (NSString *)appendIfMissingIgnoreCaseWithNSString:(NSString *)str
                           withJavaLangCharSequence:(id<JavaLangCharSequence>)suffix
                      withJavaLangCharSequenceArray:(IOSObjectArray *)suffixes {
  return OrgApacheCommonsLang3StringUtils_appendIfMissingIgnoreCaseWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(str, suffix, suffixes);
}

+ (NSString *)prependIfMissingWithNSString:(NSString *)str
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
                               withBoolean:(jboolean)ignoreCase
             withJavaLangCharSequenceArray:(IOSObjectArray *)prefixes {
  return OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(str, prefix, ignoreCase, prefixes);
}

+ (NSString *)prependIfMissingWithNSString:(NSString *)str
                  withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
             withJavaLangCharSequenceArray:(IOSObjectArray *)prefixes {
  return OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(str, prefix, prefixes);
}

+ (NSString *)prependIfMissingIgnoreCaseWithNSString:(NSString *)str
                            withJavaLangCharSequence:(id<JavaLangCharSequence>)prefix
                       withJavaLangCharSequenceArray:(IOSObjectArray *)prefixes {
  return OrgApacheCommonsLang3StringUtils_prependIfMissingIgnoreCaseWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(str, prefix, prefixes);
}

+ (NSString *)toStringWithByteArray:(IOSByteArray *)bytes
                       withNSString:(NSString *)charsetName {
  return OrgApacheCommonsLang3StringUtils_toStringWithByteArray_withNSString_(bytes, charsetName);
}

+ (NSString *)toEncodedStringWithByteArray:(IOSByteArray *)bytes
                 withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset {
  return OrgApacheCommonsLang3StringUtils_toEncodedStringWithByteArray_withJavaNioCharsetCharset_(bytes, charset);
}

+ (NSString *)wrapWithNSString:(NSString *)str
                      withChar:(jchar)wrapWith {
  return OrgApacheCommonsLang3StringUtils_wrapWithNSString_withChar_(str, wrapWith);
}

+ (NSString *)wrapWithNSString:(NSString *)str
                  withNSString:(NSString *)wrapWith {
  return OrgApacheCommonsLang3StringUtils_wrapWithNSString_withNSString_(str, wrapWith);
}

+ (NSString *)wrapIfMissingWithNSString:(NSString *)str
                               withChar:(jchar)wrapWith {
  return OrgApacheCommonsLang3StringUtils_wrapIfMissingWithNSString_withChar_(str, wrapWith);
}

+ (NSString *)wrapIfMissingWithNSString:(NSString *)str
                           withNSString:(NSString *)wrapWith {
  return OrgApacheCommonsLang3StringUtils_wrapIfMissingWithNSString_withNSString_(str, wrapWith);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 8, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 14, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 17, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 18, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 19, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 17, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 22, 20, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x89, 23, 24, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 23, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 26, 11, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 31, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 32, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 34, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 34, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 37, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 38, 40, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 38, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 38, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 42, 41, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 44, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 44, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 45, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 45, 40, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 45, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 46, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 45, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 47, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 47, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 48, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 48, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 49, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 50, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 51, 52, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 51, 53, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 54, 52, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 54, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 54, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 55, 52, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 55, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 56, 52, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 56, 53, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 57, 52, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 57, 53, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 51, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 58, 36, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 59, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 59, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 60, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 61, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 62, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 63, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 64, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 65, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 66, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 67, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 67, 68, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 69, 68, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 70, 11, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 70, 71, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 70, 20, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 70, 72, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 73, 20, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 73, 72, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 74, 20, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 74, 72, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 75, 76, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 77, 11, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 77, 71, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 78, 79, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 77, 20, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 77, 72, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 78, 76, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 80, 11, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 81, 11, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 80, 82, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 83, 84, -1, 85, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 86, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 87, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 88, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 89, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 90, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 91, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 92, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 93, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 94, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 95, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 96, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 97, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 98, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 99, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 100, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 101, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 102, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 103, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 104, -1, 105, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 106, -1, 107, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 108, -1, 109, -1, -1 },
    { NULL, "LNSString;", 0x9, 83, 110, -1, 111, -1, -1 },
    { NULL, "LNSString;", 0x89, 112, 113, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 114, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 115, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 116, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 117, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 118, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 119, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 120, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 119, 71, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 121, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 122, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 123, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 124, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 125, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 126, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 127, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 128, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 129, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 130, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 129, 131, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 129, 132, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 130, 131, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 133, 134, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 135, 134, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 133, 136, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 137, 138, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 137, 68, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 139, 140, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 141, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 141, 20, -1, -1, 142, -1 },
    { NULL, "LNSString;", 0x9, 143, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 144, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 144, 72, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 144, 145, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 146, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 146, 147, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 146, 148, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 149, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 149, 147, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 149, 148, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 150, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 151, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 151, 147, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 151, 148, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 152, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 152, 153, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 154, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 154, 153, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 155, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 156, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 157, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 158, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 158, 159, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 160, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 161, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 162, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 163, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 164, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 165, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 166, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 167, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 168, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 169, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 170, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 170, 20, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x9, 171, 30, -1, 172, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x9, 173, 30, -1, 172, -1, -1 },
    { NULL, "LNSString;", 0x9, 174, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 175, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 176, 71, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 177, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 177, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 178, 72, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 179, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 180, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x89, 180, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 181, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 182, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 182, 41, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 183, 30, -1, -1, -1, -1 },
    { NULL, "[I", 0xa, 184, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 185, 186, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 187, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 188, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 187, 189, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 190, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 191, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 192, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 191, 189, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 193, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x89, 194, 36, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8a, 195, 196, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 195, 197, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 198, 197, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8a, 199, 196, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 199, 197, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x89, 200, 197, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 201, 202, 203, -1, 204, -1 },
    { NULL, "LNSString;", 0x9, 205, 206, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 207, 71, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 207, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 208, 71, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 208, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isEmptyWithJavaLangCharSequence:);
  methods[2].selector = @selector(isNotEmptyWithJavaLangCharSequence:);
  methods[3].selector = @selector(isAnyEmptyWithJavaLangCharSequenceArray:);
  methods[4].selector = @selector(isNoneEmptyWithJavaLangCharSequenceArray:);
  methods[5].selector = @selector(isBlankWithJavaLangCharSequence:);
  methods[6].selector = @selector(isNotBlankWithJavaLangCharSequence:);
  methods[7].selector = @selector(isAnyBlankWithJavaLangCharSequenceArray:);
  methods[8].selector = @selector(isNoneBlankWithJavaLangCharSequenceArray:);
  methods[9].selector = @selector(trimWithNSString:);
  methods[10].selector = @selector(trimToNullWithNSString:);
  methods[11].selector = @selector(trimToEmptyWithNSString:);
  methods[12].selector = @selector(truncateWithNSString:withInt:);
  methods[13].selector = @selector(truncateWithNSString:withInt:withInt:);
  methods[14].selector = @selector(stripWithNSString:);
  methods[15].selector = @selector(stripToNullWithNSString:);
  methods[16].selector = @selector(stripToEmptyWithNSString:);
  methods[17].selector = @selector(stripWithNSString:withNSString:);
  methods[18].selector = @selector(stripStartWithNSString:withNSString:);
  methods[19].selector = @selector(stripEndWithNSString:withNSString:);
  methods[20].selector = @selector(stripAllWithNSStringArray:);
  methods[21].selector = @selector(stripAllWithNSStringArray:withNSString:);
  methods[22].selector = @selector(stripAccentsWithNSString:);
  methods[23].selector = @selector(convertRemainingAccentCharactersWithJavaLangStringBuilder:);
  methods[24].selector = @selector(equalsWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[25].selector = @selector(equalsIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[26].selector = @selector(compareWithNSString:withNSString:);
  methods[27].selector = @selector(compareWithNSString:withNSString:withBoolean:);
  methods[28].selector = @selector(compareIgnoreCaseWithNSString:withNSString:);
  methods[29].selector = @selector(compareIgnoreCaseWithNSString:withNSString:withBoolean:);
  methods[30].selector = @selector(equalsAnyWithJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[31].selector = @selector(equalsAnyIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[32].selector = @selector(indexOfWithJavaLangCharSequence:withInt:);
  methods[33].selector = @selector(indexOfWithJavaLangCharSequence:withInt:withInt:);
  methods[34].selector = @selector(indexOfWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[35].selector = @selector(indexOfWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[36].selector = @selector(ordinalIndexOfWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[37].selector = @selector(ordinalIndexOfWithJavaLangCharSequence:withJavaLangCharSequence:withInt:withBoolean:);
  methods[38].selector = @selector(indexOfIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[39].selector = @selector(indexOfIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[40].selector = @selector(lastIndexOfWithJavaLangCharSequence:withInt:);
  methods[41].selector = @selector(lastIndexOfWithJavaLangCharSequence:withInt:withInt:);
  methods[42].selector = @selector(lastIndexOfWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[43].selector = @selector(lastOrdinalIndexOfWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[44].selector = @selector(lastIndexOfWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[45].selector = @selector(lastIndexOfIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[46].selector = @selector(lastIndexOfIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[47].selector = @selector(containsWithJavaLangCharSequence:withInt:);
  methods[48].selector = @selector(containsWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[49].selector = @selector(containsIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[50].selector = @selector(containsWhitespaceWithJavaLangCharSequence:);
  methods[51].selector = @selector(indexOfAnyWithJavaLangCharSequence:withCharArray:);
  methods[52].selector = @selector(indexOfAnyWithJavaLangCharSequence:withNSString:);
  methods[53].selector = @selector(containsAnyWithJavaLangCharSequence:withCharArray:);
  methods[54].selector = @selector(containsAnyWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[55].selector = @selector(containsAnyWithJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[56].selector = @selector(indexOfAnyButWithJavaLangCharSequence:withCharArray:);
  methods[57].selector = @selector(indexOfAnyButWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[58].selector = @selector(containsOnlyWithJavaLangCharSequence:withCharArray:);
  methods[59].selector = @selector(containsOnlyWithJavaLangCharSequence:withNSString:);
  methods[60].selector = @selector(containsNoneWithJavaLangCharSequence:withCharArray:);
  methods[61].selector = @selector(containsNoneWithJavaLangCharSequence:withNSString:);
  methods[62].selector = @selector(indexOfAnyWithJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[63].selector = @selector(lastIndexOfAnyWithJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[64].selector = @selector(substringWithNSString:withInt:);
  methods[65].selector = @selector(substringWithNSString:withInt:withInt:);
  methods[66].selector = @selector(leftWithNSString:withInt:);
  methods[67].selector = @selector(rightWithNSString:withInt:);
  methods[68].selector = @selector(midWithNSString:withInt:withInt:);
  methods[69].selector = @selector(substringBeforeWithNSString:withNSString:);
  methods[70].selector = @selector(substringAfterWithNSString:withNSString:);
  methods[71].selector = @selector(substringBeforeLastWithNSString:withNSString:);
  methods[72].selector = @selector(substringAfterLastWithNSString:withNSString:);
  methods[73].selector = @selector(substringBetweenWithNSString:withNSString:);
  methods[74].selector = @selector(substringBetweenWithNSString:withNSString:withNSString:);
  methods[75].selector = @selector(substringsBetweenWithNSString:withNSString:withNSString:);
  methods[76].selector = @selector(splitWithNSString:);
  methods[77].selector = @selector(splitWithNSString:withChar:);
  methods[78].selector = @selector(splitWithNSString:withNSString:);
  methods[79].selector = @selector(splitWithNSString:withNSString:withInt:);
  methods[80].selector = @selector(splitByWholeSeparatorWithNSString:withNSString:);
  methods[81].selector = @selector(splitByWholeSeparatorWithNSString:withNSString:withInt:);
  methods[82].selector = @selector(splitByWholeSeparatorPreserveAllTokensWithNSString:withNSString:);
  methods[83].selector = @selector(splitByWholeSeparatorPreserveAllTokensWithNSString:withNSString:withInt:);
  methods[84].selector = @selector(splitByWholeSeparatorWorkerWithNSString:withNSString:withInt:withBoolean:);
  methods[85].selector = @selector(splitPreserveAllTokensWithNSString:);
  methods[86].selector = @selector(splitPreserveAllTokensWithNSString:withChar:);
  methods[87].selector = @selector(splitWorkerWithNSString:withChar:withBoolean:);
  methods[88].selector = @selector(splitPreserveAllTokensWithNSString:withNSString:);
  methods[89].selector = @selector(splitPreserveAllTokensWithNSString:withNSString:withInt:);
  methods[90].selector = @selector(splitWorkerWithNSString:withNSString:withInt:withBoolean:);
  methods[91].selector = @selector(splitByCharacterTypeWithNSString:);
  methods[92].selector = @selector(splitByCharacterTypeCamelCaseWithNSString:);
  methods[93].selector = @selector(splitByCharacterTypeWithNSString:withBoolean:);
  methods[94].selector = @selector(joinWithNSObjectArray:);
  methods[95].selector = @selector(joinWithNSObjectArray:withChar:);
  methods[96].selector = @selector(joinWithLongArray:withChar:);
  methods[97].selector = @selector(joinWithIntArray:withChar:);
  methods[98].selector = @selector(joinWithShortArray:withChar:);
  methods[99].selector = @selector(joinWithByteArray:withChar:);
  methods[100].selector = @selector(joinWithCharArray:withChar:);
  methods[101].selector = @selector(joinWithFloatArray:withChar:);
  methods[102].selector = @selector(joinWithDoubleArray:withChar:);
  methods[103].selector = @selector(joinWithNSObjectArray:withChar:withInt:withInt:);
  methods[104].selector = @selector(joinWithLongArray:withChar:withInt:withInt:);
  methods[105].selector = @selector(joinWithIntArray:withChar:withInt:withInt:);
  methods[106].selector = @selector(joinWithByteArray:withChar:withInt:withInt:);
  methods[107].selector = @selector(joinWithShortArray:withChar:withInt:withInt:);
  methods[108].selector = @selector(joinWithCharArray:withChar:withInt:withInt:);
  methods[109].selector = @selector(joinWithDoubleArray:withChar:withInt:withInt:);
  methods[110].selector = @selector(joinWithFloatArray:withChar:withInt:withInt:);
  methods[111].selector = @selector(joinWithNSObjectArray:withNSString:);
  methods[112].selector = @selector(joinWithNSObjectArray:withNSString:withInt:withInt:);
  methods[113].selector = @selector(joinWithJavaUtilIterator:withChar:);
  methods[114].selector = @selector(joinWithJavaUtilIterator:withNSString:);
  methods[115].selector = @selector(joinWithJavaLangIterable:withChar:);
  methods[116].selector = @selector(joinWithJavaLangIterable:withNSString:);
  methods[117].selector = @selector(joinWithWithNSString:withNSObjectArray:);
  methods[118].selector = @selector(deleteWhitespaceWithNSString:);
  methods[119].selector = @selector(removeStartWithNSString:withNSString:);
  methods[120].selector = @selector(removeStartIgnoreCaseWithNSString:withNSString:);
  methods[121].selector = @selector(removeEndWithNSString:withNSString:);
  methods[122].selector = @selector(removeEndIgnoreCaseWithNSString:withNSString:);
  methods[123].selector = @selector(removeWithNSString:withNSString:);
  methods[124].selector = @selector(removeIgnoreCaseWithNSString:withNSString:);
  methods[125].selector = @selector(removeWithNSString:withChar:);
  methods[126].selector = @selector(removeAllWithNSString:withNSString:);
  methods[127].selector = @selector(removeFirstWithNSString:withNSString:);
  methods[128].selector = @selector(replaceOnceWithNSString:withNSString:withNSString:);
  methods[129].selector = @selector(replaceOnceIgnoreCaseWithNSString:withNSString:withNSString:);
  methods[130].selector = @selector(replacePatternWithNSString:withNSString:withNSString:);
  methods[131].selector = @selector(removePatternWithNSString:withNSString:);
  methods[132].selector = @selector(replaceAllWithNSString:withNSString:withNSString:);
  methods[133].selector = @selector(replaceFirstWithNSString:withNSString:withNSString:);
  methods[134].selector = @selector(replaceWithNSString:withNSString:withNSString:);
  methods[135].selector = @selector(replaceIgnoreCaseWithNSString:withNSString:withNSString:);
  methods[136].selector = @selector(replaceWithNSString:withNSString:withNSString:withInt:);
  methods[137].selector = @selector(replaceWithNSString:withNSString:withNSString:withInt:withBoolean:);
  methods[138].selector = @selector(replaceIgnoreCaseWithNSString:withNSString:withNSString:withInt:);
  methods[139].selector = @selector(replaceEachWithNSString:withNSStringArray:withNSStringArray:);
  methods[140].selector = @selector(replaceEachRepeatedlyWithNSString:withNSStringArray:withNSStringArray:);
  methods[141].selector = @selector(replaceEachWithNSString:withNSStringArray:withNSStringArray:withBoolean:withInt:);
  methods[142].selector = @selector(replaceCharsWithNSString:withChar:withChar:);
  methods[143].selector = @selector(replaceCharsWithNSString:withNSString:withNSString:);
  methods[144].selector = @selector(overlayWithNSString:withNSString:withInt:withInt:);
  methods[145].selector = @selector(chompWithNSString:);
  methods[146].selector = @selector(chompWithNSString:withNSString:);
  methods[147].selector = @selector(chopWithNSString:);
  methods[148].selector = @selector(repeatWithNSString:withInt:);
  methods[149].selector = @selector(repeatWithNSString:withNSString:withInt:);
  methods[150].selector = @selector(repeatWithChar:withInt:);
  methods[151].selector = @selector(rightPadWithNSString:withInt:);
  methods[152].selector = @selector(rightPadWithNSString:withInt:withChar:);
  methods[153].selector = @selector(rightPadWithNSString:withInt:withNSString:);
  methods[154].selector = @selector(leftPadWithNSString:withInt:);
  methods[155].selector = @selector(leftPadWithNSString:withInt:withChar:);
  methods[156].selector = @selector(leftPadWithNSString:withInt:withNSString:);
  methods[157].selector = @selector(lengthWithJavaLangCharSequence:);
  methods[158].selector = @selector(centerWithNSString:withInt:);
  methods[159].selector = @selector(centerWithNSString:withInt:withChar:);
  methods[160].selector = @selector(centerWithNSString:withInt:withNSString:);
  methods[161].selector = @selector(upperCaseWithNSString:);
  methods[162].selector = @selector(upperCaseWithNSString:withJavaUtilLocale:);
  methods[163].selector = @selector(lowerCaseWithNSString:);
  methods[164].selector = @selector(lowerCaseWithNSString:withJavaUtilLocale:);
  methods[165].selector = @selector(capitalizeWithNSString:);
  methods[166].selector = @selector(uncapitalizeWithNSString:);
  methods[167].selector = @selector(swapCaseWithNSString:);
  methods[168].selector = @selector(countMatchesWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[169].selector = @selector(countMatchesWithJavaLangCharSequence:withChar:);
  methods[170].selector = @selector(isAlphaWithJavaLangCharSequence:);
  methods[171].selector = @selector(isAlphaSpaceWithJavaLangCharSequence:);
  methods[172].selector = @selector(isAlphanumericWithJavaLangCharSequence:);
  methods[173].selector = @selector(isAlphanumericSpaceWithJavaLangCharSequence:);
  methods[174].selector = @selector(isAsciiPrintableWithJavaLangCharSequence:);
  methods[175].selector = @selector(isNumericWithJavaLangCharSequence:);
  methods[176].selector = @selector(isNumericSpaceWithJavaLangCharSequence:);
  methods[177].selector = @selector(isWhitespaceWithJavaLangCharSequence:);
  methods[178].selector = @selector(isAllLowerCaseWithJavaLangCharSequence:);
  methods[179].selector = @selector(isAllUpperCaseWithJavaLangCharSequence:);
  methods[180].selector = @selector(defaultStringWithNSString:);
  methods[181].selector = @selector(defaultStringWithNSString:withNSString:);
  methods[182].selector = @selector(defaultIfBlankWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[183].selector = @selector(defaultIfEmptyWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[184].selector = @selector(rotateWithNSString:withInt:);
  methods[185].selector = @selector(reverseWithNSString:);
  methods[186].selector = @selector(reverseDelimitedWithNSString:withChar:);
  methods[187].selector = @selector(abbreviateWithNSString:withInt:);
  methods[188].selector = @selector(abbreviateWithNSString:withInt:withInt:);
  methods[189].selector = @selector(abbreviateMiddleWithNSString:withNSString:withInt:);
  methods[190].selector = @selector(differenceWithNSString:withNSString:);
  methods[191].selector = @selector(indexOfDifferenceWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[192].selector = @selector(indexOfDifferenceWithJavaLangCharSequenceArray:);
  methods[193].selector = @selector(getCommonPrefixWithNSStringArray:);
  methods[194].selector = @selector(getLevenshteinDistanceWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[195].selector = @selector(getLevenshteinDistanceWithJavaLangCharSequence:withJavaLangCharSequence:withInt:);
  methods[196].selector = @selector(getJaroWinklerDistanceWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[197].selector = @selector(matchesWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[198].selector = @selector(getFuzzyDistanceWithJavaLangCharSequence:withJavaLangCharSequence:withJavaUtilLocale:);
  methods[199].selector = @selector(startsWithWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[200].selector = @selector(startsWithIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[201].selector = @selector(startsWithWithJavaLangCharSequence:withJavaLangCharSequence:withBoolean:);
  methods[202].selector = @selector(startsWithAnyWithJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[203].selector = @selector(endsWithWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[204].selector = @selector(endsWithIgnoreCaseWithJavaLangCharSequence:withJavaLangCharSequence:);
  methods[205].selector = @selector(endsWithWithJavaLangCharSequence:withJavaLangCharSequence:withBoolean:);
  methods[206].selector = @selector(normalizeSpaceWithNSString:);
  methods[207].selector = @selector(endsWithAnyWithJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[208].selector = @selector(appendIfMissingWithNSString:withJavaLangCharSequence:withBoolean:withJavaLangCharSequenceArray:);
  methods[209].selector = @selector(appendIfMissingWithNSString:withJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[210].selector = @selector(appendIfMissingIgnoreCaseWithNSString:withJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[211].selector = @selector(prependIfMissingWithNSString:withJavaLangCharSequence:withBoolean:withJavaLangCharSequenceArray:);
  methods[212].selector = @selector(prependIfMissingWithNSString:withJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[213].selector = @selector(prependIfMissingIgnoreCaseWithNSString:withJavaLangCharSequence:withJavaLangCharSequenceArray:);
  methods[214].selector = @selector(toStringWithByteArray:withNSString:);
  methods[215].selector = @selector(toEncodedStringWithByteArray:withJavaNioCharsetCharset:);
  methods[216].selector = @selector(wrapWithNSString:withChar:);
  methods[217].selector = @selector(wrapWithNSString:withNSString:);
  methods[218].selector = @selector(wrapIfMissingWithNSString:withChar:);
  methods[219].selector = @selector(wrapIfMissingWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SPACE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 209, -1, -1 },
    { "EMPTY", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 210, -1, -1 },
    { "LF", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 211, -1, -1 },
    { "CR", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 212, -1, -1 },
    { "INDEX_NOT_FOUND", "I", .constantValue.asInt = OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND, 0x19, -1, -1, -1, -1 },
    { "PAD_LIMIT", "I", .constantValue.asInt = OrgApacheCommonsLang3StringUtils_PAD_LIMIT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isEmpty", "LJavaLangCharSequence;", "isNotEmpty", "isAnyEmpty", "[LJavaLangCharSequence;", "isNoneEmpty", "isBlank", "isNotBlank", "isAnyBlank", "isNoneBlank", "trim", "LNSString;", "trimToNull", "trimToEmpty", "truncate", "LNSString;I", "LNSString;II", "strip", "stripToNull", "stripToEmpty", "LNSString;LNSString;", "stripStart", "stripEnd", "stripAll", "[LNSString;", "[LNSString;LNSString;", "stripAccents", "convertRemainingAccentCharacters", "LJavaLangStringBuilder;", "equals", "LJavaLangCharSequence;LJavaLangCharSequence;", "equalsIgnoreCase", "compare", "LNSString;LNSString;Z", "compareIgnoreCase", "equalsAny", "LJavaLangCharSequence;[LJavaLangCharSequence;", "equalsAnyIgnoreCase", "indexOf", "LJavaLangCharSequence;I", "LJavaLangCharSequence;II", "LJavaLangCharSequence;LJavaLangCharSequence;I", "ordinalIndexOf", "LJavaLangCharSequence;LJavaLangCharSequence;IZ", "indexOfIgnoreCase", "lastIndexOf", "lastOrdinalIndexOf", "lastIndexOfIgnoreCase", "contains", "containsIgnoreCase", "containsWhitespace", "indexOfAny", "LJavaLangCharSequence;[C", "LJavaLangCharSequence;LNSString;", "containsAny", "indexOfAnyBut", "containsOnly", "containsNone", "lastIndexOfAny", "substring", "left", "right", "mid", "substringBefore", "substringAfter", "substringBeforeLast", "substringAfterLast", "substringBetween", "LNSString;LNSString;LNSString;", "substringsBetween", "split", "LNSString;C", "LNSString;LNSString;I", "splitByWholeSeparator", "splitByWholeSeparatorPreserveAllTokens", "splitByWholeSeparatorWorker", "LNSString;LNSString;IZ", "splitPreserveAllTokens", "splitWorker", "LNSString;CZ", "splitByCharacterType", "splitByCharacterTypeCamelCase", "LNSString;Z", "join", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)Ljava/lang/String;", "[LNSObject;C", "[JC", "[IC", "[SC", "[BC", "[CC", "[FC", "[DC", "[LNSObject;CII", "[JCII", "[ICII", "[BCII", "[SCII", "[CCII", "[DCII", "[FCII", "[LNSObject;LNSString;", "[LNSObject;LNSString;II", "LJavaUtilIterator;C", "(Ljava/util/Iterator<*>;C)Ljava/lang/String;", "LJavaUtilIterator;LNSString;", "(Ljava/util/Iterator<*>;Ljava/lang/String;)Ljava/lang/String;", "LJavaLangIterable;C", "(Ljava/lang/Iterable<*>;C)Ljava/lang/String;", "LJavaLangIterable;LNSString;", "(Ljava/lang/Iterable<*>;Ljava/lang/String;)Ljava/lang/String;", "joinWith", "LNSString;[LNSObject;", "deleteWhitespace", "removeStart", "removeStartIgnoreCase", "removeEnd", "removeEndIgnoreCase", "remove", "removeIgnoreCase", "removeAll", "removeFirst", "replaceOnce", "replaceOnceIgnoreCase", "replacePattern", "removePattern", "replaceAll", "replaceFirst", "replace", "replaceIgnoreCase", "LNSString;LNSString;LNSString;I", "LNSString;LNSString;LNSString;IZ", "replaceEach", "LNSString;[LNSString;[LNSString;", "replaceEachRepeatedly", "LNSString;[LNSString;[LNSString;ZI", "replaceChars", "LNSString;CC", "overlay", "LNSString;LNSString;II", "chomp", (void *)&OrgApacheCommonsLang3StringUtils__Annotations$0, "chop", "repeat", "CI", "rightPad", "LNSString;IC", "LNSString;ILNSString;", "leftPad", "length", "center", "upperCase", "LNSString;LJavaUtilLocale;", "lowerCase", "capitalize", "uncapitalize", "swapCase", "countMatches", "LJavaLangCharSequence;C", "isAlpha", "isAlphaSpace", "isAlphanumeric", "isAlphanumericSpace", "isAsciiPrintable", "isNumeric", "isNumericSpace", "isWhitespace", "isAllLowerCase", "isAllUpperCase", "defaultString", "defaultIfBlank", "<T::Ljava/lang/CharSequence;>(TT;TT;)TT;", "defaultIfEmpty", "rotate", "reverse", "reverseDelimited", "abbreviate", "abbreviateMiddle", "difference", "indexOfDifference", "getCommonPrefix", "getLevenshteinDistance", "getJaroWinklerDistance", "matches", "getFuzzyDistance", "LJavaLangCharSequence;LJavaLangCharSequence;LJavaUtilLocale;", "startsWith", "startsWithIgnoreCase", "LJavaLangCharSequence;LJavaLangCharSequence;Z", "startsWithAny", "endsWith", "endsWithIgnoreCase", "normalizeSpace", "endsWithAny", "appendIfMissing", "LNSString;LJavaLangCharSequence;Z[LJavaLangCharSequence;", "LNSString;LJavaLangCharSequence;[LJavaLangCharSequence;", "appendIfMissingIgnoreCase", "prependIfMissing", "prependIfMissingIgnoreCase", "toString", "[BLNSString;", "LJavaIoUnsupportedEncodingException;", (void *)&OrgApacheCommonsLang3StringUtils__Annotations$1, "toEncodedString", "[BLJavaNioCharsetCharset;", "wrap", "wrapIfMissing", &OrgApacheCommonsLang3StringUtils_SPACE, &OrgApacheCommonsLang3StringUtils_EMPTY, &OrgApacheCommonsLang3StringUtils_LF, &OrgApacheCommonsLang3StringUtils_CR };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3StringUtils = { "StringUtils", "org.apache.commons.lang3", ptrTable, methods, fields, 7, 0x1, 220, 6, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3StringUtils;
}

@end

void OrgApacheCommonsLang3StringUtils_init(OrgApacheCommonsLang3StringUtils *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3StringUtils *new_OrgApacheCommonsLang3StringUtils_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3StringUtils, init)
}

OrgApacheCommonsLang3StringUtils *create_OrgApacheCommonsLang3StringUtils_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3StringUtils, init)
}

jboolean OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return cs == nil || [cs length] == 0;
}

jboolean OrgApacheCommonsLang3StringUtils_isNotEmptyWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return !OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs);
}

jboolean OrgApacheCommonsLang3StringUtils_isAnyEmptyWithJavaLangCharSequenceArray_(IOSObjectArray *css) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3ArrayUtils_isEmptyWithNSObjectArray_(css)) {
    return true;
  }
  {
    IOSObjectArray *a__ = css;
    id<JavaLangCharSequence> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangCharSequence> cs = *b__++;
      if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs)) {
        return true;
      }
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3StringUtils_isNoneEmptyWithJavaLangCharSequenceArray_(IOSObjectArray *css) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return !OrgApacheCommonsLang3StringUtils_isAnyEmptyWithJavaLangCharSequenceArray_(css);
}

jboolean OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jint strLen;
  if (cs == nil || (strLen = [cs length]) == 0) {
    return true;
  }
  for (jint i = 0; i < strLen; i++) {
    if (JavaLangCharacter_isWhitespaceWithChar_([cs charAtWithInt:i]) == false) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isNotBlankWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return !OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(cs);
}

jboolean OrgApacheCommonsLang3StringUtils_isAnyBlankWithJavaLangCharSequenceArray_(IOSObjectArray *css) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3ArrayUtils_isEmptyWithNSObjectArray_(css)) {
    return true;
  }
  {
    IOSObjectArray *a__ = css;
    id<JavaLangCharSequence> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangCharSequence> cs = *b__++;
      if (OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(cs)) {
        return true;
      }
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3StringUtils_isNoneBlankWithJavaLangCharSequenceArray_(IOSObjectArray *css) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return !OrgApacheCommonsLang3StringUtils_isAnyBlankWithJavaLangCharSequenceArray_(css);
}

NSString *OrgApacheCommonsLang3StringUtils_trimWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return str == nil ? nil : [str java_trim];
}

NSString *OrgApacheCommonsLang3StringUtils_trimToNullWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  NSString *ts = OrgApacheCommonsLang3StringUtils_trimWithNSString_(str);
  return OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(ts) ? nil : ts;
}

NSString *OrgApacheCommonsLang3StringUtils_trimToEmptyWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return str == nil ? OrgApacheCommonsLang3StringUtils_EMPTY : [str java_trim];
}

NSString *OrgApacheCommonsLang3StringUtils_truncateWithNSString_withInt_(NSString *str, jint maxWidth) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_truncateWithNSString_withInt_withInt_(str, 0, maxWidth);
}

NSString *OrgApacheCommonsLang3StringUtils_truncateWithNSString_withInt_withInt_(NSString *str, jint offset, jint maxWidth) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (offset < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"offset cannot be negative");
  }
  if (maxWidth < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"maxWith cannot be negative");
  }
  if (str == nil) {
    return nil;
  }
  if (offset > ((jint) [str length])) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  if (((jint) [str length]) > maxWidth) {
    jint ix = offset + maxWidth > ((jint) [str length]) ? ((jint) [str length]) : offset + maxWidth;
    return [str java_substring:offset endIndex:ix];
  }
  return [str java_substring:offset];
}

NSString *OrgApacheCommonsLang3StringUtils_stripWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_stripWithNSString_withNSString_(str, nil);
}

NSString *OrgApacheCommonsLang3StringUtils_stripToNullWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  str = OrgApacheCommonsLang3StringUtils_stripWithNSString_withNSString_(str, nil);
  return [((NSString *) nil_chk(str)) java_isEmpty] ? nil : str;
}

NSString *OrgApacheCommonsLang3StringUtils_stripToEmptyWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return str == nil ? OrgApacheCommonsLang3StringUtils_EMPTY : OrgApacheCommonsLang3StringUtils_stripWithNSString_withNSString_(str, nil);
}

NSString *OrgApacheCommonsLang3StringUtils_stripWithNSString_withNSString_(NSString *str, NSString *stripChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  str = OrgApacheCommonsLang3StringUtils_stripStartWithNSString_withNSString_(str, stripChars);
  return OrgApacheCommonsLang3StringUtils_stripEndWithNSString_withNSString_(str, stripChars);
}

NSString *OrgApacheCommonsLang3StringUtils_stripStartWithNSString_withNSString_(NSString *str, NSString *stripChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jint strLen;
  if (str == nil || (strLen = ((jint) [str length])) == 0) {
    return str;
  }
  jint start = 0;
  if (stripChars == nil) {
    while (start != strLen && JavaLangCharacter_isWhitespaceWithChar_([str charAtWithInt:start])) {
      start++;
    }
  }
  else if ([stripChars java_isEmpty]) {
    return str;
  }
  else {
    while (start != strLen && [stripChars java_indexOf:[str charAtWithInt:start]] != OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
      start++;
    }
  }
  return [str java_substring:start];
}

NSString *OrgApacheCommonsLang3StringUtils_stripEndWithNSString_withNSString_(NSString *str, NSString *stripChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jint end;
  if (str == nil || (end = ((jint) [str length])) == 0) {
    return str;
  }
  if (stripChars == nil) {
    while (end != 0 && JavaLangCharacter_isWhitespaceWithChar_([str charAtWithInt:end - 1])) {
      end--;
    }
  }
  else if ([stripChars java_isEmpty]) {
    return str;
  }
  else {
    while (end != 0 && [stripChars java_indexOf:[str charAtWithInt:end - 1]] != OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
      end--;
    }
  }
  return [str java_substring:0 endIndex:end];
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_stripAllWithNSStringArray_(IOSObjectArray *strs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_stripAllWithNSStringArray_withNSString_(strs, nil);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_stripAllWithNSStringArray_withNSString_(IOSObjectArray *strs, NSString *stripChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jint strsLen;
  if (strs == nil || (strsLen = strs->size_) == 0) {
    return strs;
  }
  IOSObjectArray *newArr = [IOSObjectArray arrayWithLength:strsLen type:NSString_class_()];
  for (jint i = 0; i < strsLen; i++) {
    IOSObjectArray_Set(newArr, i, OrgApacheCommonsLang3StringUtils_stripWithNSString_withNSString_(IOSObjectArray_Get(strs, i), stripChars));
  }
  return newArr;
}

NSString *OrgApacheCommonsLang3StringUtils_stripAccentsWithNSString_(NSString *input) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (input == nil) {
    return nil;
  }
  JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_(@"\\p{InCombiningDiacriticalMarks}+");
  JavaLangStringBuilder *decomposed = create_JavaLangStringBuilder_initWithNSString_(JavaTextNormalizer_normalizeWithJavaLangCharSequence_withJavaTextNormalizer_Form_(input, JreLoadEnum(JavaTextNormalizer_Form, NFD)));
  OrgApacheCommonsLang3StringUtils_convertRemainingAccentCharactersWithJavaLangStringBuilder_(decomposed);
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:decomposed])) replaceAllWithNSString:OrgApacheCommonsLang3StringUtils_EMPTY];
}

void OrgApacheCommonsLang3StringUtils_convertRemainingAccentCharactersWithJavaLangStringBuilder_(JavaLangStringBuilder *decomposed) {
  OrgApacheCommonsLang3StringUtils_initialize();
  for (jint i = 0; i < [((JavaLangStringBuilder *) nil_chk(decomposed)) length]; i++) {
    if ([decomposed charAtWithInt:i] == 0x0141) {
      [decomposed deleteCharAtWithInt:i];
      [decomposed insertWithInt:i withChar:'L'];
    }
    else if ([decomposed charAtWithInt:i] == 0x0142) {
      [decomposed deleteCharAtWithInt:i];
      [decomposed insertWithInt:i withChar:'l'];
    }
  }
}

jboolean OrgApacheCommonsLang3StringUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> cs1, id<JavaLangCharSequence> cs2) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs1 == cs2) {
    return true;
  }
  if (cs1 == nil || cs2 == nil) {
    return false;
  }
  if ([cs1 length] != [cs2 length]) {
    return false;
  }
  if ([cs1 isKindOfClass:[NSString class]] && [cs2 isKindOfClass:[NSString class]]) {
    return [cs1 isEqual:cs2];
  }
  return OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(cs1, false, 0, cs2, 0, [cs1 length]);
}

jboolean OrgApacheCommonsLang3StringUtils_equalsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str1, id<JavaLangCharSequence> str2) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str1 == nil || str2 == nil) {
    return str1 == str2;
  }
  else if (str1 == str2) {
    return true;
  }
  else if ([str1 length] != [str2 length]) {
    return false;
  }
  else {
    return OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(str1, true, 0, str2, 0, [str1 length]);
  }
}

jint OrgApacheCommonsLang3StringUtils_compareWithNSString_withNSString_(NSString *str1, NSString *str2) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_compareWithNSString_withNSString_withBoolean_(str1, str2, true);
}

jint OrgApacheCommonsLang3StringUtils_compareWithNSString_withNSString_withBoolean_(NSString *str1, NSString *str2, jboolean nullIsLess) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str1 == str2) {
    return 0;
  }
  if (str1 == nil) {
    return nullIsLess ? -1 : 1;
  }
  if (str2 == nil) {
    return nullIsLess ? 1 : - 1;
  }
  return [str1 compareToWithId:str2];
}

jint OrgApacheCommonsLang3StringUtils_compareIgnoreCaseWithNSString_withNSString_(NSString *str1, NSString *str2) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_compareIgnoreCaseWithNSString_withNSString_withBoolean_(str1, str2, true);
}

jint OrgApacheCommonsLang3StringUtils_compareIgnoreCaseWithNSString_withNSString_withBoolean_(NSString *str1, NSString *str2, jboolean nullIsLess) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str1 == str2) {
    return 0;
  }
  if (str1 == nil) {
    return nullIsLess ? -1 : 1;
  }
  if (str2 == nil) {
    return nullIsLess ? 1 : - 1;
  }
  return [str1 java_compareToIgnoreCase:str2];
}

jboolean OrgApacheCommonsLang3StringUtils_equalsAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> string, IOSObjectArray *searchStrings) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3ArrayUtils_isNotEmptyWithNSObjectArray_(searchStrings)) {
    {
      IOSObjectArray *a__ = searchStrings;
      id<JavaLangCharSequence> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangCharSequence> next = *b__++;
        if (OrgApacheCommonsLang3StringUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(string, next)) {
          return true;
        }
      }
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3StringUtils_equalsAnyIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> string, IOSObjectArray *searchStrings) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3ArrayUtils_isNotEmptyWithNSObjectArray_(searchStrings)) {
    {
      IOSObjectArray *a__ = searchStrings;
      id<JavaLangCharSequence> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangCharSequence> next = *b__++;
        if (OrgApacheCommonsLang3StringUtils_equalsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(string, next)) {
          return true;
        }
      }
    }
  }
  return false;
}

jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint searchChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(seq)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(seq, searchChar, 0);
}

jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint searchChar, jint startPos) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(seq)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(seq, searchChar, startPos);
}

jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (seq == nil || searchSeq == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(seq, searchSeq, 0);
}

jint OrgApacheCommonsLang3StringUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq, jint startPos) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (seq == nil || searchSeq == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(seq, searchSeq, startPos);
}

jint OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint ordinal) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withBoolean_(str, searchStr, ordinal, false);
}

jint OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withBoolean_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint ordinal, jboolean lastIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || searchStr == nil || ordinal <= 0) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  if ([searchStr length] == 0) {
    return lastIndex ? [str length] : 0;
  }
  jint found = 0;
  jint index = lastIndex ? [str length] : OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  do {
    if (lastIndex) {
      index = OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, index - 1);
    }
    else {
      index = OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, index + 1);
    }
    if (index < 0) {
      return index;
    }
    found++;
  }
  while (found < ordinal);
  return index;
}

jint OrgApacheCommonsLang3StringUtils_indexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_indexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, 0);
}

jint OrgApacheCommonsLang3StringUtils_indexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint startPos) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || searchStr == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  if (startPos < 0) {
    startPos = 0;
  }
  jint endLimit = [str length] - [searchStr length] + 1;
  if (startPos > endLimit) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  if ([searchStr length] == 0) {
    return startPos;
  }
  for (jint i = startPos; i < endLimit; i++) {
    if (OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(str, true, i, searchStr, 0, [searchStr length])) {
      return i;
    }
  }
  return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
}

jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint searchChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(seq)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withInt_withInt_(seq, searchChar, [((id<JavaLangCharSequence>) nil_chk(seq)) length]);
}

jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withInt_withInt_(id<JavaLangCharSequence> seq, jint searchChar, jint startPos) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(seq)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withInt_withInt_(seq, searchChar, startPos);
}

jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (seq == nil || searchSeq == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(seq, searchSeq, [seq length]);
}

jint OrgApacheCommonsLang3StringUtils_lastOrdinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint ordinal) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_ordinalIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_withBoolean_(str, searchStr, ordinal, true);
}

jint OrgApacheCommonsLang3StringUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq, jint startPos) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (seq == nil || searchSeq == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(seq, searchSeq, startPos);
}

jint OrgApacheCommonsLang3StringUtils_lastIndexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || searchStr == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3StringUtils_lastIndexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, searchStr, [str length]);
}

jint OrgApacheCommonsLang3StringUtils_lastIndexOfIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr, jint startPos) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || searchStr == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  if (startPos > [str length] - [searchStr length]) {
    startPos = [str length] - [searchStr length];
  }
  if (startPos < 0) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  if ([searchStr length] == 0) {
    return startPos;
  }
  for (jint i = startPos; i >= 0; i--) {
    if (OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(str, true, i, searchStr, 0, [searchStr length])) {
      return i;
    }
  }
  return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
}

jboolean OrgApacheCommonsLang3StringUtils_containsWithJavaLangCharSequence_withInt_(id<JavaLangCharSequence> seq, jint searchChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(seq)) {
    return false;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(seq, searchChar, 0) >= 0;
}

jboolean OrgApacheCommonsLang3StringUtils_containsWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchSeq) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (seq == nil || searchSeq == nil) {
    return false;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(seq, searchSeq, 0) >= 0;
}

jboolean OrgApacheCommonsLang3StringUtils_containsIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> searchStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || searchStr == nil) {
    return false;
  }
  jint len = [searchStr length];
  jint max = [str length] - len;
  for (jint i = 0; i <= max; i++) {
    if (OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(str, true, i, searchStr, 0, len)) {
      return true;
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3StringUtils_containsWhitespaceWithJavaLangCharSequence_(id<JavaLangCharSequence> seq) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(seq)) {
    return false;
  }
  jint strLen = [((id<JavaLangCharSequence>) nil_chk(seq)) length];
  for (jint i = 0; i < strLen; i++) {
    if (JavaLangCharacter_isWhitespaceWithChar_([seq charAtWithInt:i])) {
      return true;
    }
  }
  return false;
}

jint OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs) || OrgApacheCommonsLang3ArrayUtils_isEmptyWithCharArray_(searchChars)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  jint csLen = [((id<JavaLangCharSequence>) nil_chk(cs)) length];
  jint csLast = csLen - 1;
  jint searchLen = ((IOSCharArray *) nil_chk(searchChars))->size_;
  jint searchLast = searchLen - 1;
  for (jint i = 0; i < csLen; i++) {
    jchar ch = [cs charAtWithInt:i];
    for (jint j = 0; j < searchLen; j++) {
      if (IOSCharArray_Get(searchChars, j) == ch) {
        if (i < csLast && j < searchLast && JavaLangCharacter_isHighSurrogateWithChar_(ch)) {
          if (IOSCharArray_Get(searchChars, j + 1) == [cs charAtWithInt:i + 1]) {
            return i;
          }
        }
        else {
          return i;
        }
      }
    }
  }
  return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
}

jint OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withNSString_(id<JavaLangCharSequence> cs, NSString *searchChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(searchChars)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  return OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withCharArray_(cs, [((NSString *) nil_chk(searchChars)) java_toCharArray]);
}

jboolean OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs) || OrgApacheCommonsLang3ArrayUtils_isEmptyWithCharArray_(searchChars)) {
    return false;
  }
  jint csLength = [((id<JavaLangCharSequence>) nil_chk(cs)) length];
  jint searchLength = ((IOSCharArray *) nil_chk(searchChars))->size_;
  jint csLast = csLength - 1;
  jint searchLast = searchLength - 1;
  for (jint i = 0; i < csLength; i++) {
    jchar ch = [cs charAtWithInt:i];
    for (jint j = 0; j < searchLength; j++) {
      if (IOSCharArray_Get(searchChars, j) == ch) {
        if (JavaLangCharacter_isHighSurrogateWithChar_(ch)) {
          if (j == searchLast) {
            return true;
          }
          if (i < csLast && IOSCharArray_Get(searchChars, j + 1) == [cs charAtWithInt:i + 1]) {
            return true;
          }
        }
        else {
          return true;
        }
      }
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> cs, id<JavaLangCharSequence> searchChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (searchChars == nil) {
    return false;
  }
  return OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withCharArray_(cs, OrgApacheCommonsLang3CharSequenceUtils_toCharArrayWithJavaLangCharSequence_(searchChars));
}

jboolean OrgApacheCommonsLang3StringUtils_containsAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> cs, IOSObjectArray *searchCharSequences) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs) || OrgApacheCommonsLang3ArrayUtils_isEmptyWithNSObjectArray_(searchCharSequences)) {
    return false;
  }
  {
    IOSObjectArray *a__ = searchCharSequences;
    id<JavaLangCharSequence> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangCharSequence> searchCharSequence = *b__++;
      if (OrgApacheCommonsLang3StringUtils_containsWithJavaLangCharSequence_withJavaLangCharSequence_(cs, searchCharSequence)) {
        return true;
      }
    }
  }
  return false;
}

jint OrgApacheCommonsLang3StringUtils_indexOfAnyButWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs) || OrgApacheCommonsLang3ArrayUtils_isEmptyWithCharArray_(searchChars)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  jint csLen = [((id<JavaLangCharSequence>) nil_chk(cs)) length];
  jint csLast = csLen - 1;
  jint searchLen = ((IOSCharArray *) nil_chk(searchChars))->size_;
  jint searchLast = searchLen - 1;
  for (jint i = 0; i < csLen; i++) {
    {
      jchar ch = [cs charAtWithInt:i];
      for (jint j = 0; j < searchLen; j++) {
        if (IOSCharArray_Get(searchChars, j) == ch) {
          if (i < csLast && j < searchLast && JavaLangCharacter_isHighSurrogateWithChar_(ch)) {
            if (IOSCharArray_Get(searchChars, j + 1) == [cs charAtWithInt:i + 1]) {
              goto continue_outer;
            }
          }
          else {
            goto continue_outer;
          }
        }
      }
      return i;
    }
    continue_outer: ;
  }
  return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
}

jint OrgApacheCommonsLang3StringUtils_indexOfAnyButWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> seq, id<JavaLangCharSequence> searchChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(seq) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(searchChars)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  jint strLen = [((id<JavaLangCharSequence>) nil_chk(seq)) length];
  for (jint i = 0; i < strLen; i++) {
    jchar ch = [seq charAtWithInt:i];
    jboolean chFound = OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(searchChars, ch, 0) >= 0;
    if (i + 1 < strLen && JavaLangCharacter_isHighSurrogateWithChar_(ch)) {
      jchar ch2 = [seq charAtWithInt:i + 1];
      if (chFound && OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withInt_withInt_(searchChars, ch2, 0) < 0) {
        return i;
      }
    }
    else {
      if (!chFound) {
        return i;
      }
    }
  }
  return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
}

jboolean OrgApacheCommonsLang3StringUtils_containsOnlyWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *valid) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (valid == nil || cs == nil) {
    return false;
  }
  if ([cs length] == 0) {
    return true;
  }
  if (valid->size_ == 0) {
    return false;
  }
  return OrgApacheCommonsLang3StringUtils_indexOfAnyButWithJavaLangCharSequence_withCharArray_(cs, valid) == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
}

jboolean OrgApacheCommonsLang3StringUtils_containsOnlyWithJavaLangCharSequence_withNSString_(id<JavaLangCharSequence> cs, NSString *validChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil || validChars == nil) {
    return false;
  }
  return OrgApacheCommonsLang3StringUtils_containsOnlyWithJavaLangCharSequence_withCharArray_(cs, [validChars java_toCharArray]);
}

jboolean OrgApacheCommonsLang3StringUtils_containsNoneWithJavaLangCharSequence_withCharArray_(id<JavaLangCharSequence> cs, IOSCharArray *searchChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil || searchChars == nil) {
    return true;
  }
  jint csLen = [cs length];
  jint csLast = csLen - 1;
  jint searchLen = searchChars->size_;
  jint searchLast = searchLen - 1;
  for (jint i = 0; i < csLen; i++) {
    jchar ch = [cs charAtWithInt:i];
    for (jint j = 0; j < searchLen; j++) {
      if (IOSCharArray_Get(searchChars, j) == ch) {
        if (JavaLangCharacter_isHighSurrogateWithChar_(ch)) {
          if (j == searchLast) {
            return false;
          }
          if (i < csLast && IOSCharArray_Get(searchChars, j + 1) == [cs charAtWithInt:i + 1]) {
            return false;
          }
        }
        else {
          return false;
        }
      }
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_containsNoneWithJavaLangCharSequence_withNSString_(id<JavaLangCharSequence> cs, NSString *invalidChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil || invalidChars == nil) {
    return true;
  }
  return OrgApacheCommonsLang3StringUtils_containsNoneWithJavaLangCharSequence_withCharArray_(cs, [invalidChars java_toCharArray]);
}

jint OrgApacheCommonsLang3StringUtils_indexOfAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> str, IOSObjectArray *searchStrs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || searchStrs == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  jint sz = searchStrs->size_;
  jint ret = JavaLangInteger_MAX_VALUE;
  jint tmp = 0;
  for (jint i = 0; i < sz; i++) {
    id<JavaLangCharSequence> search = IOSObjectArray_Get(searchStrs, i);
    if (search == nil) {
      continue;
    }
    tmp = OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, search, 0);
    if (tmp == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
      continue;
    }
    if (tmp < ret) {
      ret = tmp;
    }
  }
  return ret == JavaLangInteger_MAX_VALUE ? OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND : ret;
}

jint OrgApacheCommonsLang3StringUtils_lastIndexOfAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> str, IOSObjectArray *searchStrs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || searchStrs == nil) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  jint sz = searchStrs->size_;
  jint ret = OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  jint tmp = 0;
  for (jint i = 0; i < sz; i++) {
    id<JavaLangCharSequence> search = IOSObjectArray_Get(searchStrs, i);
    if (search == nil) {
      continue;
    }
    tmp = OrgApacheCommonsLang3CharSequenceUtils_lastIndexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, search, [str length]);
    if (tmp > ret) {
      ret = tmp;
    }
  }
  return ret;
}

NSString *OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_(NSString *str, jint start) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (start < 0) {
    start = ((jint) [str length]) + start;
  }
  if (start < 0) {
    start = 0;
  }
  if (start > ((jint) [str length])) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return [str java_substring:start];
}

NSString *OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_withInt_(NSString *str, jint start, jint end) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (end < 0) {
    end = ((jint) [str length]) + end;
  }
  if (start < 0) {
    start = ((jint) [str length]) + start;
  }
  if (end > ((jint) [str length])) {
    end = ((jint) [str length]);
  }
  if (start > end) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  if (start < 0) {
    start = 0;
  }
  if (end < 0) {
    end = 0;
  }
  return [str java_substring:start endIndex:end];
}

NSString *OrgApacheCommonsLang3StringUtils_leftWithNSString_withInt_(NSString *str, jint len) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (len < 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  if (((jint) [str length]) <= len) {
    return str;
  }
  return [str java_substring:0 endIndex:len];
}

NSString *OrgApacheCommonsLang3StringUtils_rightWithNSString_withInt_(NSString *str, jint len) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (len < 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  if (((jint) [str length]) <= len) {
    return str;
  }
  return [str java_substring:((jint) [str length]) - len];
}

NSString *OrgApacheCommonsLang3StringUtils_midWithNSString_withInt_withInt_(NSString *str, jint pos, jint len) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (len < 0 || pos > ((jint) [str length])) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  if (pos < 0) {
    pos = 0;
  }
  if (((jint) [str length]) <= pos + len) {
    return [str java_substring:pos];
  }
  return [str java_substring:pos endIndex:pos + len];
}

NSString *OrgApacheCommonsLang3StringUtils_substringBeforeWithNSString_withNSString_(NSString *str, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || separator == nil) {
    return str;
  }
  if ([separator java_isEmpty]) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint pos = [((NSString *) nil_chk(str)) java_indexOfString:separator];
  if (pos == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    return str;
  }
  return [str java_substring:0 endIndex:pos];
}

NSString *OrgApacheCommonsLang3StringUtils_substringAfterWithNSString_withNSString_(NSString *str, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  if (separator == nil) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint pos = [((NSString *) nil_chk(str)) java_indexOfString:separator];
  if (pos == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return [str java_substring:pos + ((jint) [separator length])];
}

NSString *OrgApacheCommonsLang3StringUtils_substringBeforeLastWithNSString_withNSString_(NSString *str, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(separator)) {
    return str;
  }
  jint pos = [((NSString *) nil_chk(str)) java_lastIndexOfString:separator];
  if (pos == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    return str;
  }
  return [str java_substring:0 endIndex:pos];
}

NSString *OrgApacheCommonsLang3StringUtils_substringAfterLastWithNSString_withNSString_(NSString *str, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(separator)) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint pos = [((NSString *) nil_chk(str)) java_lastIndexOfString:separator];
  if (pos == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND || pos == ((jint) [str length]) - ((jint) [((NSString *) nil_chk(separator)) length])) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return [str java_substring:pos + ((jint) [((NSString *) nil_chk(separator)) length])];
}

NSString *OrgApacheCommonsLang3StringUtils_substringBetweenWithNSString_withNSString_(NSString *str, NSString *tag) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_substringBetweenWithNSString_withNSString_withNSString_(str, tag, tag);
}

NSString *OrgApacheCommonsLang3StringUtils_substringBetweenWithNSString_withNSString_withNSString_(NSString *str, NSString *open, NSString *close) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || open == nil || close == nil) {
    return nil;
  }
  jint start = [str java_indexOfString:open];
  if (start != OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    jint end = [str java_indexOfString:close fromIndex:start + ((jint) [open length])];
    if (end != OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
      return [str java_substring:start + ((jint) [open length]) endIndex:end];
    }
  }
  return nil;
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_substringsBetweenWithNSString_withNSString_withNSString_(NSString *str, NSString *open, NSString *close) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(open) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(close)) {
    return nil;
  }
  jint strLen = ((jint) [str length]);
  if (strLen == 0) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_STRING_ARRAY);
  }
  jint closeLen = ((jint) [((NSString *) nil_chk(close)) length]);
  jint openLen = ((jint) [((NSString *) nil_chk(open)) length]);
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  jint pos = 0;
  while (pos < strLen - closeLen) {
    jint start = [str java_indexOfString:open fromIndex:pos];
    if (start < 0) {
      break;
    }
    start += openLen;
    jint end = [str java_indexOfString:close fromIndex:start];
    if (end < 0) {
      break;
    }
    [list addWithId:[str java_substring:start endIndex:end]];
    pos = end + closeLen;
  }
  if ([list isEmpty]) {
    return nil;
  }
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:NSString_class_()]];
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWithNSString_withNSString_withInt_(str, nil, -1);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_withChar_(NSString *str, jchar separatorChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withChar_withBoolean_(str, separatorChar, false);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_withNSString_(NSString *str, NSString *separatorChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(str, separatorChars, -1, false);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWithNSString_withNSString_withInt_(NSString *str, NSString *separatorChars, jint max) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(str, separatorChars, max, false);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWithNSString_withNSString_(NSString *str, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWorkerWithNSString_withNSString_withInt_withBoolean_(str, separator, -1, false);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWithNSString_withNSString_withInt_(NSString *str, NSString *separator, jint max) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWorkerWithNSString_withNSString_withInt_withBoolean_(str, separator, max, false);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorPreserveAllTokensWithNSString_withNSString_(NSString *str, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWorkerWithNSString_withNSString_withInt_withBoolean_(str, separator, -1, true);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorPreserveAllTokensWithNSString_withNSString_withInt_(NSString *str, NSString *separator, jint max) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWorkerWithNSString_withNSString_withInt_withBoolean_(str, separator, max, true);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByWholeSeparatorWorkerWithNSString_withNSString_withInt_withBoolean_(NSString *str, NSString *separator, jint max, jboolean preserveAllTokens) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint len = ((jint) [str length]);
  if (len == 0) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_STRING_ARRAY);
  }
  if (separator == nil || [((NSString *) nil_chk(OrgApacheCommonsLang3StringUtils_EMPTY)) isEqual:separator]) {
    return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(str, nil, max, preserveAllTokens);
  }
  jint separatorLength = ((jint) [separator length]);
  JavaUtilArrayList *substrings = create_JavaUtilArrayList_init();
  jint numberOfSubstrings = 0;
  jint beg = 0;
  jint end = 0;
  while (end < len) {
    end = [str java_indexOfString:separator fromIndex:beg];
    if (end > -1) {
      if (end > beg) {
        numberOfSubstrings += 1;
        if (numberOfSubstrings == max) {
          end = len;
          [substrings addWithId:[str java_substring:beg]];
        }
        else {
          [substrings addWithId:[str java_substring:beg endIndex:end]];
          beg = end + separatorLength;
        }
      }
      else {
        if (preserveAllTokens) {
          numberOfSubstrings += 1;
          if (numberOfSubstrings == max) {
            end = len;
            [substrings addWithId:[str java_substring:beg]];
          }
          else {
            [substrings addWithId:OrgApacheCommonsLang3StringUtils_EMPTY];
          }
        }
        beg = end + separatorLength;
      }
    }
    else {
      [substrings addWithId:[str java_substring:beg]];
      end = len;
    }
  }
  return [substrings toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[substrings size] type:NSString_class_()]];
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(str, nil, -1, true);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withChar_(NSString *str, jchar separatorChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withChar_withBoolean_(str, separatorChar, true);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withChar_withBoolean_(NSString *str, jchar separatorChar, jboolean preserveAllTokens) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint len = ((jint) [str length]);
  if (len == 0) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_STRING_ARRAY);
  }
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  jint i = 0;
  jint start = 0;
  jboolean match = false;
  jboolean lastMatch = false;
  while (i < len) {
    if ([str charAtWithInt:i] == separatorChar) {
      if (match || preserveAllTokens) {
        [list addWithId:[str java_substring:start endIndex:i]];
        match = false;
        lastMatch = true;
      }
      start = ++i;
      continue;
    }
    lastMatch = false;
    match = true;
    i++;
  }
  if (match || (preserveAllTokens && lastMatch)) {
    [list addWithId:[str java_substring:start endIndex:i]];
  }
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:NSString_class_()]];
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withNSString_(NSString *str, NSString *separatorChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(str, separatorChars, -1, true);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitPreserveAllTokensWithNSString_withNSString_withInt_(NSString *str, NSString *separatorChars, jint max) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(str, separatorChars, max, true);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitWorkerWithNSString_withNSString_withInt_withBoolean_(NSString *str, NSString *separatorChars, jint max, jboolean preserveAllTokens) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint len = ((jint) [str length]);
  if (len == 0) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_STRING_ARRAY);
  }
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  jint sizePlus1 = 1;
  jint i = 0;
  jint start = 0;
  jboolean match = false;
  jboolean lastMatch = false;
  if (separatorChars == nil) {
    while (i < len) {
      if (JavaLangCharacter_isWhitespaceWithChar_([str charAtWithInt:i])) {
        if (match || preserveAllTokens) {
          lastMatch = true;
          if (sizePlus1++ == max) {
            i = len;
            lastMatch = false;
          }
          [list addWithId:[str java_substring:start endIndex:i]];
          match = false;
        }
        start = ++i;
        continue;
      }
      lastMatch = false;
      match = true;
      i++;
    }
  }
  else if (((jint) [separatorChars length]) == 1) {
    jchar sep = [separatorChars charAtWithInt:0];
    while (i < len) {
      if ([str charAtWithInt:i] == sep) {
        if (match || preserveAllTokens) {
          lastMatch = true;
          if (sizePlus1++ == max) {
            i = len;
            lastMatch = false;
          }
          [list addWithId:[str java_substring:start endIndex:i]];
          match = false;
        }
        start = ++i;
        continue;
      }
      lastMatch = false;
      match = true;
      i++;
    }
  }
  else {
    while (i < len) {
      if ([separatorChars java_indexOf:[str charAtWithInt:i]] >= 0) {
        if (match || preserveAllTokens) {
          lastMatch = true;
          if (sizePlus1++ == max) {
            i = len;
            lastMatch = false;
          }
          [list addWithId:[str java_substring:start endIndex:i]];
          match = false;
        }
        start = ++i;
        continue;
      }
      lastMatch = false;
      match = true;
      i++;
    }
  }
  if (match || (preserveAllTokens && lastMatch)) {
    [list addWithId:[str java_substring:start endIndex:i]];
  }
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:NSString_class_()]];
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_withBoolean_(str, false);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByCharacterTypeCamelCaseWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_withBoolean_(str, true);
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils_splitByCharacterTypeWithNSString_withBoolean_(NSString *str, jboolean camelCase) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if ([str java_isEmpty]) {
    return JreLoadStatic(OrgApacheCommonsLang3ArrayUtils, EMPTY_STRING_ARRAY);
  }
  IOSCharArray *c = [str java_toCharArray];
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  jint tokenStart = 0;
  jint currentType = JavaLangCharacter_getTypeWithChar_(IOSCharArray_Get(nil_chk(c), tokenStart));
  for (jint pos = tokenStart + 1; pos < c->size_; pos++) {
    jint type = JavaLangCharacter_getTypeWithChar_(IOSCharArray_Get(c, pos));
    if (type == currentType) {
      continue;
    }
    if (camelCase && type == JavaLangCharacter_LOWERCASE_LETTER && currentType == JavaLangCharacter_UPPERCASE_LETTER) {
      jint newTokenStart = pos - 1;
      if (newTokenStart != tokenStart) {
        [list addWithId:[NSString java_stringWithCharacters:c offset:tokenStart length:newTokenStart - tokenStart]];
        tokenStart = newTokenStart;
      }
    }
    else {
      [list addWithId:[NSString java_stringWithCharacters:c offset:tokenStart length:pos - tokenStart]];
      tokenStart = pos;
    }
    currentType = type;
  }
  [list addWithId:[NSString java_stringWithCharacters:c offset:tokenStart length:c->size_ - tokenStart]];
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:NSString_class_()]];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_(IOSObjectArray *elements) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_(elements, nil);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_(IOSObjectArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithLongArray_withChar_(IOSLongArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithLongArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithIntArray_withChar_(IOSIntArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithIntArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithShortArray_withChar_(IOSShortArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithShortArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithByteArray_withChar_(IOSByteArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithByteArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithCharArray_withChar_(IOSCharArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithCharArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithFloatArray_withChar_(IOSFloatArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithFloatArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithDoubleArray_withChar_(IOSDoubleArray *array, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithDoubleArray_withChar_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_withInt_withInt_(IOSObjectArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    if (IOSObjectArray_Get(array, i) != nil) {
      [buf appendWithId:IOSObjectArray_Get(array, i)];
    }
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithLongArray_withChar_withInt_withInt_(IOSLongArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    [buf appendWithLong:IOSLongArray_Get(array, i)];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithIntArray_withChar_withInt_withInt_(IOSIntArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    [buf appendWithInt:IOSIntArray_Get(array, i)];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithByteArray_withChar_withInt_withInt_(IOSByteArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    [buf appendWithInt:IOSByteArray_Get(array, i)];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithShortArray_withChar_withInt_withInt_(IOSShortArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    [buf appendWithInt:IOSShortArray_Get(array, i)];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithCharArray_withChar_withInt_withInt_(IOSCharArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    [buf appendWithChar:IOSCharArray_Get(array, i)];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithDoubleArray_withChar_withInt_withInt_(IOSDoubleArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    [buf appendWithDouble:IOSDoubleArray_Get(array, i)];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithFloatArray_withChar_withInt_withInt_(IOSFloatArray *array, jchar separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithChar:separator];
    }
    [buf appendWithFloat:IOSFloatArray_Get(array, i)];
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_(IOSObjectArray *array, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_withInt_withInt_(array, separator, 0, array->size_);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withNSString_withInt_withInt_(IOSObjectArray *array, NSString *separator, jint startIndex, jint endIndex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (array == nil) {
    return nil;
  }
  if (separator == nil) {
    separator = OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint noOfItems = endIndex - startIndex;
  if (noOfItems <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(noOfItems * 16);
  for (jint i = startIndex; i < endIndex; i++) {
    if (i > startIndex) {
      [buf appendWithNSString:separator];
    }
    if (IOSObjectArray_Get(array, i) != nil) {
      [buf appendWithId:IOSObjectArray_Get(array, i)];
    }
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withChar_(id<JavaUtilIterator> iterator, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (iterator == nil) {
    return nil;
  }
  if (![iterator hasNext]) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  id first = [iterator next];
  if (![iterator hasNext]) {
    NSString *result = OrgApacheCommonsLang3ObjectUtils_toStringWithId_(first);
    return result;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  if (first != nil) {
    [buf appendWithId:first];
  }
  while ([iterator hasNext]) {
    [buf appendWithChar:separator];
    id obj = [iterator next];
    if (obj != nil) {
      [buf appendWithId:obj];
    }
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withNSString_(id<JavaUtilIterator> iterator, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (iterator == nil) {
    return nil;
  }
  if (![iterator hasNext]) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  id first = [iterator next];
  if (![iterator hasNext]) {
    NSString *result = OrgApacheCommonsLang3ObjectUtils_toStringWithId_(first);
    return result;
  }
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(256);
  if (first != nil) {
    [buf appendWithId:first];
  }
  while ([iterator hasNext]) {
    if (separator != nil) {
      [buf appendWithNSString:separator];
    }
    id obj = [iterator next];
    if (obj != nil) {
      [buf appendWithId:obj];
    }
  }
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaLangIterable_withChar_(id<JavaLangIterable> iterable, jchar separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (iterable == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withChar_([iterable iterator], separator);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithJavaLangIterable_withNSString_(id<JavaLangIterable> iterable, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (iterable == nil) {
    return nil;
  }
  return OrgApacheCommonsLang3StringUtils_joinWithJavaUtilIterator_withNSString_([iterable iterator], separator);
}

NSString *OrgApacheCommonsLang3StringUtils_joinWithWithNSString_withNSObjectArray_(NSString *separator, IOSObjectArray *objects) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (objects == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Object varargs must not be null");
  }
  NSString *sanitizedSeparator = OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_withNSString_(separator, OrgApacheCommonsLang3StringUtils_EMPTY);
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_(objects))) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    NSString *value = OrgApacheCommonsLang3ObjectUtils_toStringWithId_([iterator next]);
    [result appendWithNSString:value];
    if ([iterator hasNext]) {
      [result appendWithNSString:sanitizedSeparator];
    }
  }
  return [result description];
}

NSString *OrgApacheCommonsLang3StringUtils_deleteWhitespaceWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  jint sz = ((jint) [((NSString *) nil_chk(str)) length]);
  IOSCharArray *chs = [IOSCharArray arrayWithLength:sz];
  jint count = 0;
  for (jint i = 0; i < sz; i++) {
    if (!JavaLangCharacter_isWhitespaceWithChar_([str charAtWithInt:i])) {
      *IOSCharArray_GetRef(chs, count++) = [str charAtWithInt:i];
    }
  }
  if (count == sz) {
    return str;
  }
  return [NSString java_stringWithCharacters:chs offset:0 length:count];
}

NSString *OrgApacheCommonsLang3StringUtils_removeStartWithNSString_withNSString_(NSString *str, NSString *remove) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(remove)) {
    return str;
  }
  if ([((NSString *) nil_chk(str)) hasPrefix:remove]) {
    return [str java_substring:((jint) [((NSString *) nil_chk(remove)) length])];
  }
  return str;
}

NSString *OrgApacheCommonsLang3StringUtils_removeStartIgnoreCaseWithNSString_withNSString_(NSString *str, NSString *remove) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(remove)) {
    return str;
  }
  if (OrgApacheCommonsLang3StringUtils_startsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str, remove)) {
    return [((NSString *) nil_chk(str)) java_substring:((jint) [((NSString *) nil_chk(remove)) length])];
  }
  return str;
}

NSString *OrgApacheCommonsLang3StringUtils_removeEndWithNSString_withNSString_(NSString *str, NSString *remove) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(remove)) {
    return str;
  }
  if ([((NSString *) nil_chk(str)) hasSuffix:remove]) {
    return [str java_substring:0 endIndex:((jint) [str length]) - ((jint) [((NSString *) nil_chk(remove)) length])];
  }
  return str;
}

NSString *OrgApacheCommonsLang3StringUtils_removeEndIgnoreCaseWithNSString_withNSString_(NSString *str, NSString *remove) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(remove)) {
    return str;
  }
  if (OrgApacheCommonsLang3StringUtils_endsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(str, remove)) {
    return [((NSString *) nil_chk(str)) java_substring:0 endIndex:((jint) [str length]) - ((jint) [((NSString *) nil_chk(remove)) length])];
  }
  return str;
}

NSString *OrgApacheCommonsLang3StringUtils_removeWithNSString_withNSString_(NSString *str, NSString *remove) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(remove)) {
    return str;
  }
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_(str, remove, OrgApacheCommonsLang3StringUtils_EMPTY, -1);
}

NSString *OrgApacheCommonsLang3StringUtils_removeIgnoreCaseWithNSString_withNSString_(NSString *str, NSString *remove) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(remove)) {
    return str;
  }
  return OrgApacheCommonsLang3StringUtils_replaceIgnoreCaseWithNSString_withNSString_withNSString_withInt_(str, remove, OrgApacheCommonsLang3StringUtils_EMPTY, -1);
}

NSString *OrgApacheCommonsLang3StringUtils_removeWithNSString_withChar_(NSString *str, jchar remove) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || [((NSString *) nil_chk(str)) java_indexOf:remove] == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    return str;
  }
  IOSCharArray *chars = [((NSString *) nil_chk(str)) java_toCharArray];
  jint pos = 0;
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(chars))->size_; i++) {
    if (IOSCharArray_Get(chars, i) != remove) {
      *IOSCharArray_GetRef(chars, pos++) = IOSCharArray_Get(chars, i);
    }
  }
  return [NSString java_stringWithCharacters:chars offset:0 length:pos];
}

NSString *OrgApacheCommonsLang3StringUtils_removeAllWithNSString_withNSString_(NSString *text, NSString *regex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceAllWithNSString_withNSString_withNSString_(text, regex, OrgApacheCommonsLang3StringUtils_EMPTY);
}

NSString *OrgApacheCommonsLang3StringUtils_removeFirstWithNSString_withNSString_(NSString *text, NSString *regex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceFirstWithNSString_withNSString_withNSString_(text, regex, OrgApacheCommonsLang3StringUtils_EMPTY);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceOnceWithNSString_withNSString_withNSString_(NSString *text, NSString *searchString, NSString *replacement) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_(text, searchString, replacement, 1);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceOnceIgnoreCaseWithNSString_withNSString_withNSString_(NSString *text, NSString *searchString, NSString *replacement) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceIgnoreCaseWithNSString_withNSString_withNSString_withInt_(text, searchString, replacement, 1);
}

NSString *OrgApacheCommonsLang3StringUtils_replacePatternWithNSString_withNSString_withNSString_(NSString *source, NSString *regex, NSString *replacement) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (source == nil || regex == nil || replacement == nil) {
    return source;
  }
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_withInt_(regex, JavaUtilRegexPattern_DOTALL))) matcherWithJavaLangCharSequence:source])) replaceAllWithNSString:replacement];
}

NSString *OrgApacheCommonsLang3StringUtils_removePatternWithNSString_withNSString_(NSString *source, NSString *regex) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replacePatternWithNSString_withNSString_withNSString_(source, regex, OrgApacheCommonsLang3StringUtils_EMPTY);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceAllWithNSString_withNSString_withNSString_(NSString *text, NSString *regex, NSString *replacement) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (text == nil || regex == nil || replacement == nil) {
    return text;
  }
  return [text java_replaceAll:regex withReplacement:replacement];
}

NSString *OrgApacheCommonsLang3StringUtils_replaceFirstWithNSString_withNSString_withNSString_(NSString *text, NSString *regex, NSString *replacement) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (text == nil || regex == nil || replacement == nil) {
    return text;
  }
  return [text java_replaceFirst:regex withReplacement:replacement];
}

NSString *OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_(NSString *text, NSString *searchString, NSString *replacement) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_(text, searchString, replacement, -1);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceIgnoreCaseWithNSString_withNSString_withNSString_(NSString *text, NSString *searchString, NSString *replacement) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceIgnoreCaseWithNSString_withNSString_withNSString_withInt_(text, searchString, replacement, -1);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_(NSString *text, NSString *searchString, NSString *replacement, jint max) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_withBoolean_(text, searchString, replacement, max, false);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_withBoolean_(NSString *text, NSString *searchString, NSString *replacement, jint max, jboolean ignoreCase) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(text) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(searchString) || replacement == nil || max == 0) {
    return text;
  }
  NSString *searchText = text;
  if (ignoreCase) {
    searchText = [((NSString *) nil_chk(text)) lowercaseString];
    searchString = [((NSString *) nil_chk(searchString)) lowercaseString];
  }
  jint start = 0;
  jint end = [((NSString *) nil_chk(searchText)) java_indexOfString:searchString fromIndex:start];
  if (end == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    return text;
  }
  jint replLength = ((jint) [((NSString *) nil_chk(searchString)) length]);
  jint increase = ((jint) [replacement length]) - replLength;
  increase = increase < 0 ? 0 : increase;
  increase *= max < 0 ? 16 : max > 64 ? 64 : max;
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(text)) length]) + increase);
  while (end != OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    [((JavaLangStringBuilder *) nil_chk([buf appendWithNSString:[text java_substring:start endIndex:end]])) appendWithNSString:replacement];
    start = end + replLength;
    if (--max == 0) {
      break;
    }
    end = [searchText java_indexOfString:searchString fromIndex:start];
  }
  [buf appendWithNSString:[text java_substring:start]];
  return [buf description];
}

NSString *OrgApacheCommonsLang3StringUtils_replaceIgnoreCaseWithNSString_withNSString_withNSString_withInt_(NSString *text, NSString *searchString, NSString *replacement, jint max) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceWithNSString_withNSString_withNSString_withInt_withBoolean_(text, searchString, replacement, max, true);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_(NSString *text, IOSObjectArray *searchList, IOSObjectArray *replacementList) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_withBoolean_withInt_(text, searchList, replacementList, false, 0);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceEachRepeatedlyWithNSString_withNSStringArray_withNSStringArray_(NSString *text, IOSObjectArray *searchList, IOSObjectArray *replacementList) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jint timeToLive = searchList == nil ? 0 : searchList->size_;
  return OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_withBoolean_withInt_(text, searchList, replacementList, true, timeToLive);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_withBoolean_withInt_(NSString *text, IOSObjectArray *searchList, IOSObjectArray *replacementList, jboolean repeat, jint timeToLive) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (text == nil || [text java_isEmpty] || searchList == nil || searchList->size_ == 0 || replacementList == nil || replacementList->size_ == 0) {
    return text;
  }
  if (timeToLive < 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Aborting to protect against StackOverflowError - output of one loop is the input of another");
  }
  jint searchLength = searchList->size_;
  jint replacementLength = replacementList->size_;
  if (searchLength != replacementLength) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"Search and Replace array lengths don't match: ", searchLength, @" vs ", replacementLength));
  }
  IOSBooleanArray *noMoreMatchesForReplIndex = [IOSBooleanArray arrayWithLength:searchLength];
  jint textIndex = -1;
  jint replaceIndex = -1;
  jint tempIndex = -1;
  for (jint i = 0; i < searchLength; i++) {
    if (IOSBooleanArray_Get(noMoreMatchesForReplIndex, i) || IOSObjectArray_Get(searchList, i) == nil || [((NSString *) nil_chk(IOSObjectArray_Get(searchList, i))) java_isEmpty] || IOSObjectArray_Get(replacementList, i) == nil) {
      continue;
    }
    tempIndex = [text java_indexOfString:IOSObjectArray_Get(searchList, i)];
    if (tempIndex == -1) {
      *IOSBooleanArray_GetRef(noMoreMatchesForReplIndex, i) = true;
    }
    else {
      if (textIndex == -1 || tempIndex < textIndex) {
        textIndex = tempIndex;
        replaceIndex = i;
      }
    }
  }
  if (textIndex == -1) {
    return text;
  }
  jint start = 0;
  jint increase = 0;
  for (jint i = 0; i < searchList->size_; i++) {
    if (IOSObjectArray_Get(searchList, i) == nil || IOSObjectArray_Get(replacementList, i) == nil) {
      continue;
    }
    jint greater = ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(replacementList, i))) length]) - ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(searchList, i))) length]);
    if (greater > 0) {
      increase += 3 * greater;
    }
  }
  increase = JavaLangMath_minWithInt_withInt_(increase, ((jint) [text length]) / 5);
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(((jint) [text length]) + increase);
  while (textIndex != -1) {
    for (jint i = start; i < textIndex; i++) {
      [buf appendWithChar:[text charAtWithInt:i]];
    }
    [buf appendWithNSString:IOSObjectArray_Get(replacementList, replaceIndex)];
    start = textIndex + ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(searchList, replaceIndex))) length]);
    textIndex = -1;
    replaceIndex = -1;
    tempIndex = -1;
    for (jint i = 0; i < searchLength; i++) {
      if (IOSBooleanArray_Get(noMoreMatchesForReplIndex, i) || IOSObjectArray_Get(searchList, i) == nil || [((NSString *) nil_chk(IOSObjectArray_Get(searchList, i))) java_isEmpty] || IOSObjectArray_Get(replacementList, i) == nil) {
        continue;
      }
      tempIndex = [text java_indexOfString:IOSObjectArray_Get(searchList, i) fromIndex:start];
      if (tempIndex == -1) {
        *IOSBooleanArray_GetRef(noMoreMatchesForReplIndex, i) = true;
      }
      else {
        if (textIndex == -1 || tempIndex < textIndex) {
          textIndex = tempIndex;
          replaceIndex = i;
        }
      }
    }
  }
  jint textLength = ((jint) [text length]);
  for (jint i = start; i < textLength; i++) {
    [buf appendWithChar:[text charAtWithInt:i]];
  }
  NSString *result = [buf description];
  if (!repeat) {
    return result;
  }
  return OrgApacheCommonsLang3StringUtils_replaceEachWithNSString_withNSStringArray_withNSStringArray_withBoolean_withInt_(result, searchList, replacementList, repeat, timeToLive - 1);
}

NSString *OrgApacheCommonsLang3StringUtils_replaceCharsWithNSString_withChar_withChar_(NSString *str, jchar searchChar, jchar replaceChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return [str java_replace:searchChar withChar:replaceChar];
}

NSString *OrgApacheCommonsLang3StringUtils_replaceCharsWithNSString_withNSString_withNSString_(NSString *str, NSString *searchChars, NSString *replaceChars) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(searchChars)) {
    return str;
  }
  if (replaceChars == nil) {
    replaceChars = OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jboolean modified = false;
  jint replaceCharsLength = ((jint) [((NSString *) nil_chk(replaceChars)) length]);
  jint strLength = ((jint) [((NSString *) nil_chk(str)) length]);
  JavaLangStringBuilder *buf = create_JavaLangStringBuilder_initWithInt_(strLength);
  for (jint i = 0; i < strLength; i++) {
    jchar ch = [str charAtWithInt:i];
    jint index = [((NSString *) nil_chk(searchChars)) java_indexOf:ch];
    if (index >= 0) {
      modified = true;
      if (index < replaceCharsLength) {
        [buf appendWithChar:[replaceChars charAtWithInt:index]];
      }
    }
    else {
      [buf appendWithChar:ch];
    }
  }
  if (modified) {
    return [buf description];
  }
  return str;
}

NSString *OrgApacheCommonsLang3StringUtils_overlayWithNSString_withNSString_withInt_withInt_(NSString *str, NSString *overlay, jint start, jint end) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (overlay == nil) {
    overlay = OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint len = ((jint) [str length]);
  if (start < 0) {
    start = 0;
  }
  if (start > len) {
    start = len;
  }
  if (end < 0) {
    end = 0;
  }
  if (end > len) {
    end = len;
  }
  if (start > end) {
    jint temp = start;
    start = end;
    end = temp;
  }
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithInt_(len + start - end + ((jint) [((NSString *) nil_chk(overlay)) length]) + 1) appendWithNSString:[str java_substring:0 endIndex:start]])) appendWithNSString:overlay])) appendWithNSString:[str java_substring:end]])) description];
}

NSString *OrgApacheCommonsLang3StringUtils_chompWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  if (((jint) [((NSString *) nil_chk(str)) length]) == 1) {
    jchar ch = [str charAtWithInt:0];
    if (ch == OrgApacheCommonsLang3CharUtils_CR || ch == OrgApacheCommonsLang3CharUtils_LF) {
      return OrgApacheCommonsLang3StringUtils_EMPTY;
    }
    return str;
  }
  jint lastIdx = ((jint) [str length]) - 1;
  jchar last = [str charAtWithInt:lastIdx];
  if (last == OrgApacheCommonsLang3CharUtils_LF) {
    if ([str charAtWithInt:lastIdx - 1] == OrgApacheCommonsLang3CharUtils_CR) {
      lastIdx--;
    }
  }
  else if (last != OrgApacheCommonsLang3CharUtils_CR) {
    lastIdx++;
  }
  return [str java_substring:0 endIndex:lastIdx];
}

NSString *OrgApacheCommonsLang3StringUtils_chompWithNSString_withNSString_(NSString *str, NSString *separator) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_removeEndWithNSString_withNSString_(str, separator);
}

NSString *OrgApacheCommonsLang3StringUtils_chopWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint strLen = ((jint) [str length]);
  if (strLen < 2) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint lastIdx = strLen - 1;
  NSString *ret = [str java_substring:0 endIndex:lastIdx];
  jchar last = [str charAtWithInt:lastIdx];
  if (last == OrgApacheCommonsLang3CharUtils_LF && [((NSString *) nil_chk(ret)) charAtWithInt:lastIdx - 1] == OrgApacheCommonsLang3CharUtils_CR) {
    return [((NSString *) nil_chk(ret)) java_substring:0 endIndex:lastIdx - 1];
  }
  return ret;
}

NSString *OrgApacheCommonsLang3StringUtils_repeatWithNSString_withInt_(NSString *str, jint repeat) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (repeat <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint inputLength = ((jint) [str length]);
  if (repeat == 1 || inputLength == 0) {
    return str;
  }
  if (inputLength == 1 && repeat <= OrgApacheCommonsLang3StringUtils_PAD_LIMIT) {
    return OrgApacheCommonsLang3StringUtils_repeatWithChar_withInt_([str charAtWithInt:0], repeat);
  }
  jint outputLength = inputLength * repeat;
  {
    jchar ch0;
    jchar ch1;
    IOSCharArray *output2;
    JavaLangStringBuilder *buf;
    switch (inputLength) {
      case 1:
      return OrgApacheCommonsLang3StringUtils_repeatWithChar_withInt_([str charAtWithInt:0], repeat);
      case 2:
      ch0 = [str charAtWithInt:0];
      ch1 = [str charAtWithInt:1];
      output2 = [IOSCharArray arrayWithLength:outputLength];
      for (jint i = repeat * 2 - 2; i >= 0; i--, i--) {
        *IOSCharArray_GetRef(output2, i) = ch0;
        *IOSCharArray_GetRef(output2, i + 1) = ch1;
      }
      return [NSString java_stringWithCharacters:output2];
      default:
      buf = create_JavaLangStringBuilder_initWithInt_(outputLength);
      for (jint i = 0; i < repeat; i++) {
        [buf appendWithNSString:str];
      }
      return [buf description];
    }
  }
}

NSString *OrgApacheCommonsLang3StringUtils_repeatWithNSString_withNSString_withInt_(NSString *str, NSString *separator, jint repeat) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || separator == nil) {
    return OrgApacheCommonsLang3StringUtils_repeatWithNSString_withInt_(str, repeat);
  }
  NSString *result = OrgApacheCommonsLang3StringUtils_repeatWithNSString_withInt_(JreStrcat("$$", str, separator), repeat);
  return OrgApacheCommonsLang3StringUtils_removeEndWithNSString_withNSString_(result, separator);
}

NSString *OrgApacheCommonsLang3StringUtils_repeatWithChar_withInt_(jchar ch, jint repeat) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (repeat <= 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  IOSCharArray *buf = [IOSCharArray arrayWithLength:repeat];
  for (jint i = repeat - 1; i >= 0; i--) {
    *IOSCharArray_GetRef(buf, i) = ch;
  }
  return [NSString java_stringWithCharacters:buf];
}

NSString *OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_(NSString *str, jint size) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withChar_(str, size, ' ');
}

NSString *OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withChar_(NSString *str, jint size, jchar padChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint pads = size - ((jint) [str length]);
  if (pads <= 0) {
    return str;
  }
  if (pads > OrgApacheCommonsLang3StringUtils_PAD_LIMIT) {
    return OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withNSString_(str, size, NSString_java_valueOfChar_(padChar));
  }
  return [str java_concat:OrgApacheCommonsLang3StringUtils_repeatWithChar_withInt_(padChar, pads)];
}

NSString *OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withNSString_(NSString *str, jint size, NSString *padStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(padStr)) {
    padStr = OrgApacheCommonsLang3StringUtils_SPACE;
  }
  jint padLen = ((jint) [((NSString *) nil_chk(padStr)) length]);
  jint strLen = ((jint) [str length]);
  jint pads = size - strLen;
  if (pads <= 0) {
    return str;
  }
  if (padLen == 1 && pads <= OrgApacheCommonsLang3StringUtils_PAD_LIMIT) {
    return OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withChar_(str, size, [padStr charAtWithInt:0]);
  }
  if (pads == padLen) {
    return [str java_concat:padStr];
  }
  else if (pads < padLen) {
    return [str java_concat:[padStr java_substring:0 endIndex:pads]];
  }
  else {
    IOSCharArray *padding = [IOSCharArray arrayWithLength:pads];
    IOSCharArray *padChars = [padStr java_toCharArray];
    for (jint i = 0; i < pads; i++) {
      *IOSCharArray_GetRef(padding, i) = IOSCharArray_Get(nil_chk(padChars), i % padLen);
    }
    return [str java_concat:[NSString java_stringWithCharacters:padding]];
  }
}

NSString *OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_(NSString *str, jint size) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withChar_(str, size, ' ');
}

NSString *OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withChar_(NSString *str, jint size, jchar padChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint pads = size - ((jint) [str length]);
  if (pads <= 0) {
    return str;
  }
  if (pads > OrgApacheCommonsLang3StringUtils_PAD_LIMIT) {
    return OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withNSString_(str, size, NSString_java_valueOfChar_(padChar));
  }
  return [((NSString *) nil_chk(OrgApacheCommonsLang3StringUtils_repeatWithChar_withInt_(padChar, pads))) java_concat:str];
}

NSString *OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withNSString_(NSString *str, jint size, NSString *padStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(padStr)) {
    padStr = OrgApacheCommonsLang3StringUtils_SPACE;
  }
  jint padLen = ((jint) [((NSString *) nil_chk(padStr)) length]);
  jint strLen = ((jint) [str length]);
  jint pads = size - strLen;
  if (pads <= 0) {
    return str;
  }
  if (padLen == 1 && pads <= OrgApacheCommonsLang3StringUtils_PAD_LIMIT) {
    return OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withChar_(str, size, [padStr charAtWithInt:0]);
  }
  if (pads == padLen) {
    return [padStr java_concat:str];
  }
  else if (pads < padLen) {
    return [((NSString *) nil_chk([padStr java_substring:0 endIndex:pads])) java_concat:str];
  }
  else {
    IOSCharArray *padding = [IOSCharArray arrayWithLength:pads];
    IOSCharArray *padChars = [padStr java_toCharArray];
    for (jint i = 0; i < pads; i++) {
      *IOSCharArray_GetRef(padding, i) = IOSCharArray_Get(nil_chk(padChars), i % padLen);
    }
    return [[NSString java_stringWithCharacters:padding] java_concat:str];
  }
}

jint OrgApacheCommonsLang3StringUtils_lengthWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return cs == nil ? 0 : [cs length];
}

NSString *OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_(NSString *str, jint size) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_withChar_(str, size, ' ');
}

NSString *OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_withChar_(NSString *str, jint size, jchar padChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || size <= 0) {
    return str;
  }
  jint strLen = ((jint) [str length]);
  jint pads = size - strLen;
  if (pads <= 0) {
    return str;
  }
  str = OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withChar_(str, strLen + pads / 2, padChar);
  str = OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withChar_(str, size, padChar);
  return str;
}

NSString *OrgApacheCommonsLang3StringUtils_centerWithNSString_withInt_withNSString_(NSString *str, jint size, NSString *padStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || size <= 0) {
    return str;
  }
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(padStr)) {
    padStr = OrgApacheCommonsLang3StringUtils_SPACE;
  }
  jint strLen = ((jint) [str length]);
  jint pads = size - strLen;
  if (pads <= 0) {
    return str;
  }
  str = OrgApacheCommonsLang3StringUtils_leftPadWithNSString_withInt_withNSString_(str, strLen + pads / 2, padStr);
  str = OrgApacheCommonsLang3StringUtils_rightPadWithNSString_withInt_withNSString_(str, size, padStr);
  return str;
}

NSString *OrgApacheCommonsLang3StringUtils_upperCaseWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return [str uppercaseString];
}

NSString *OrgApacheCommonsLang3StringUtils_upperCaseWithNSString_withJavaUtilLocale_(NSString *str, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return [str java_uppercaseStringWithJRELocale:locale];
}

NSString *OrgApacheCommonsLang3StringUtils_lowerCaseWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return [str lowercaseString];
}

NSString *OrgApacheCommonsLang3StringUtils_lowerCaseWithNSString_withJavaUtilLocale_(NSString *str, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return [str java_lowercaseStringWithJRELocale:locale];
}

NSString *OrgApacheCommonsLang3StringUtils_capitalizeWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jint strLen;
  if (str == nil || (strLen = ((jint) [str length])) == 0) {
    return str;
  }
  jchar firstChar = [str charAtWithInt:0];
  jchar newChar = JavaLangCharacter_toTitleCaseWithChar_(firstChar);
  if (firstChar == newChar) {
    return str;
  }
  IOSCharArray *newChars = [IOSCharArray arrayWithLength:strLen];
  *IOSCharArray_GetRef(newChars, 0) = newChar;
  [str java_getChars:1 sourceEnd:strLen destination:newChars destinationBegin:1];
  return NSString_java_valueOfChars_(newChars);
}

NSString *OrgApacheCommonsLang3StringUtils_uncapitalizeWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jint strLen;
  if (str == nil || (strLen = ((jint) [str length])) == 0) {
    return str;
  }
  jchar firstChar = [str charAtWithInt:0];
  jchar newChar = JavaLangCharacter_toLowerCaseWithChar_(firstChar);
  if (firstChar == newChar) {
    return str;
  }
  IOSCharArray *newChars = [IOSCharArray arrayWithLength:strLen];
  *IOSCharArray_GetRef(newChars, 0) = newChar;
  [str java_getChars:1 sourceEnd:strLen destination:newChars destinationBegin:1];
  return NSString_java_valueOfChars_(newChars);
}

NSString *OrgApacheCommonsLang3StringUtils_swapCaseWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  IOSCharArray *buffer = [((NSString *) nil_chk(str)) java_toCharArray];
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(buffer))->size_; i++) {
    jchar ch = IOSCharArray_Get(buffer, i);
    if (JavaLangCharacter_isUpperCaseWithChar_(ch)) {
      *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toLowerCaseWithChar_(ch);
    }
    else if (JavaLangCharacter_isTitleCaseWithChar_(ch)) {
      *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toLowerCaseWithChar_(ch);
    }
    else if (JavaLangCharacter_isLowerCaseWithChar_(ch)) {
      *IOSCharArray_GetRef(buffer, i) = JavaLangCharacter_toUpperCaseWithChar_(ch);
    }
  }
  return [NSString java_stringWithCharacters:buffer];
}

jint OrgApacheCommonsLang3StringUtils_countMatchesWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> sub) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(sub)) {
    return 0;
  }
  jint count = 0;
  jint idx = 0;
  while ((idx = OrgApacheCommonsLang3CharSequenceUtils_indexOfWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(str, sub, idx)) != OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    count++;
    idx += [((id<JavaLangCharSequence>) nil_chk(sub)) length];
  }
  return count;
}

jint OrgApacheCommonsLang3StringUtils_countMatchesWithJavaLangCharSequence_withChar_(id<JavaLangCharSequence> str, jchar ch) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return 0;
  }
  jint count = 0;
  for (jint i = 0; i < [((id<JavaLangCharSequence>) nil_chk(str)) length]; i++) {
    if (ch == [str charAtWithInt:i]) {
      count++;
    }
  }
  return count;
}

jboolean OrgApacheCommonsLang3StringUtils_isAlphaWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs)) {
    return false;
  }
  jint sz = [((id<JavaLangCharSequence>) nil_chk(cs)) length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isLetterWithChar_([cs charAtWithInt:i]) == false) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isAlphaSpaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil) {
    return false;
  }
  jint sz = [cs length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isLetterWithChar_([cs charAtWithInt:i]) == false && [cs charAtWithInt:i] != ' ') {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isAlphanumericWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs)) {
    return false;
  }
  jint sz = [((id<JavaLangCharSequence>) nil_chk(cs)) length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isLetterOrDigitWithChar_([cs charAtWithInt:i]) == false) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isAlphanumericSpaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil) {
    return false;
  }
  jint sz = [cs length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isLetterOrDigitWithChar_([cs charAtWithInt:i]) == false && [cs charAtWithInt:i] != ' ') {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isAsciiPrintableWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil) {
    return false;
  }
  jint sz = [cs length];
  for (jint i = 0; i < sz; i++) {
    if (OrgApacheCommonsLang3CharUtils_isAsciiPrintableWithChar_([cs charAtWithInt:i]) == false) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isNumericWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs)) {
    return false;
  }
  jint sz = [((id<JavaLangCharSequence>) nil_chk(cs)) length];
  for (jint i = 0; i < sz; i++) {
    if (!JavaLangCharacter_isDigitWithChar_([cs charAtWithInt:i])) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isNumericSpaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil) {
    return false;
  }
  jint sz = [cs length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isDigitWithChar_([cs charAtWithInt:i]) == false && [cs charAtWithInt:i] != ' ') {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isWhitespaceWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil) {
    return false;
  }
  jint sz = [cs length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isWhitespaceWithChar_([cs charAtWithInt:i]) == false) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isAllLowerCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs)) {
    return false;
  }
  jint sz = [cs length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isLowerCaseWithChar_([cs charAtWithInt:i]) == false) {
      return false;
    }
  }
  return true;
}

jboolean OrgApacheCommonsLang3StringUtils_isAllUpperCaseWithJavaLangCharSequence_(id<JavaLangCharSequence> cs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs == nil || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(cs)) {
    return false;
  }
  jint sz = [cs length];
  for (jint i = 0; i < sz; i++) {
    if (JavaLangCharacter_isUpperCaseWithChar_([cs charAtWithInt:i]) == false) {
      return false;
    }
  }
  return true;
}

NSString *OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return str == nil ? OrgApacheCommonsLang3StringUtils_EMPTY : str;
}

NSString *OrgApacheCommonsLang3StringUtils_defaultStringWithNSString_withNSString_(NSString *str, NSString *defaultStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return str == nil ? defaultStr : str;
}

id<JavaLangCharSequence> OrgApacheCommonsLang3StringUtils_defaultIfBlankWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> defaultStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_isBlankWithJavaLangCharSequence_(str) ? defaultStr : str;
}

id<JavaLangCharSequence> OrgApacheCommonsLang3StringUtils_defaultIfEmptyWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> defaultStr) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) ? defaultStr : str;
}

NSString *OrgApacheCommonsLang3StringUtils_rotateWithNSString_withInt_(NSString *str, jint shift) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  jint strLen = ((jint) [str length]);
  if (shift == 0 || strLen == 0 || shift % strLen == 0) {
    return str;
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(strLen);
  jint offset = -(shift % strLen);
  [builder appendWithNSString:OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_(str, offset)];
  [builder appendWithNSString:OrgApacheCommonsLang3StringUtils_substringWithNSString_withInt_withInt_(str, 0, offset)];
  return [builder description];
}

NSString *OrgApacheCommonsLang3StringUtils_reverseWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  return [((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_initWithNSString_(str) reverse])) description];
}

NSString *OrgApacheCommonsLang3StringUtils_reverseDelimitedWithNSString_withChar_(NSString *str, jchar separatorChar) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  IOSObjectArray *strs = OrgApacheCommonsLang3StringUtils_splitWithNSString_withChar_(str, separatorChar);
  OrgApacheCommonsLang3ArrayUtils_reverseWithNSObjectArray_(strs);
  return OrgApacheCommonsLang3StringUtils_joinWithNSObjectArray_withChar_(strs, separatorChar);
}

NSString *OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_(NSString *str, jint maxWidth) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_withInt_(str, 0, maxWidth);
}

NSString *OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_withInt_(NSString *str, jint offset, jint maxWidth) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil) {
    return nil;
  }
  if (maxWidth < 4) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Minimum abbreviation width is 4");
  }
  if (((jint) [str length]) <= maxWidth) {
    return str;
  }
  if (offset > ((jint) [str length])) {
    offset = ((jint) [str length]);
  }
  if (((jint) [str length]) - offset < maxWidth - 3) {
    offset = ((jint) [str length]) - (maxWidth - 3);
  }
  NSString *abrevMarker = @"...";
  if (offset <= 4) {
    return JreStrcat("$$", [str java_substring:0 endIndex:maxWidth - 3], abrevMarker);
  }
  if (maxWidth < 7) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Minimum abbreviation width with offset is 7");
  }
  if (offset + maxWidth - 3 < ((jint) [str length])) {
    return JreStrcat("$$", abrevMarker, OrgApacheCommonsLang3StringUtils_abbreviateWithNSString_withInt_([str java_substring:offset], maxWidth - 3));
  }
  return JreStrcat("$$", abrevMarker, [str java_substring:((jint) [str length]) - (maxWidth - 3)]);
}

NSString *OrgApacheCommonsLang3StringUtils_abbreviateMiddleWithNSString_withNSString_withInt_(NSString *str, NSString *middle, jint length) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(middle)) {
    return str;
  }
  if (length >= ((jint) [((NSString *) nil_chk(str)) length]) || length < ((jint) [((NSString *) nil_chk(middle)) length]) + 2) {
    return str;
  }
  jint targetSting = length - ((jint) [((NSString *) nil_chk(middle)) length]);
  jint startOffset = targetSting / 2 + targetSting % 2;
  jint endOffset = ((jint) [str length]) - targetSting / 2;
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(length);
  [builder appendWithNSString:[str java_substring:0 endIndex:startOffset]];
  [builder appendWithNSString:middle];
  [builder appendWithNSString:[str java_substring:endOffset]];
  return [builder description];
}

NSString *OrgApacheCommonsLang3StringUtils_differenceWithNSString_withNSString_(NSString *str1, NSString *str2) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str1 == nil) {
    return str2;
  }
  if (str2 == nil) {
    return str1;
  }
  jint at = OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequence_withJavaLangCharSequence_(str1, str2);
  if (at == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return [str2 java_substring:at];
}

jint OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> cs1, id<JavaLangCharSequence> cs2) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (cs1 == cs2) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  if (cs1 == nil || cs2 == nil) {
    return 0;
  }
  jint i;
  for (i = 0; i < [cs1 length] && i < [cs2 length]; ++i) {
    if ([cs1 charAtWithInt:i] != [cs2 charAtWithInt:i]) {
      break;
    }
  }
  if (i < [cs2 length] || i < [cs1 length]) {
    return i;
  }
  return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
}

jint OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequenceArray_(IOSObjectArray *css) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (css == nil || css->size_ <= 1) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  jboolean anyStringNull = false;
  jboolean allStringsNull = true;
  jint arrayLen = css->size_;
  jint shortestStrLen = JavaLangInteger_MAX_VALUE;
  jint longestStrLen = 0;
  for (jint i = 0; i < arrayLen; i++) {
    if (IOSObjectArray_Get(css, i) == nil) {
      anyStringNull = true;
      shortestStrLen = 0;
    }
    else {
      allStringsNull = false;
      shortestStrLen = JavaLangMath_minWithInt_withInt_([((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(css, i))) length], shortestStrLen);
      longestStrLen = JavaLangMath_maxWithInt_withInt_([((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(css, i))) length], longestStrLen);
    }
  }
  if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {
    return OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND;
  }
  if (shortestStrLen == 0) {
    return 0;
  }
  jint firstDiff = -1;
  for (jint stringPos = 0; stringPos < shortestStrLen; stringPos++) {
    jchar comparisonChar = [((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(css, 0))) charAtWithInt:stringPos];
    for (jint arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
      if ([((id<JavaLangCharSequence>) nil_chk(IOSObjectArray_Get(css, arrayPos))) charAtWithInt:stringPos] != comparisonChar) {
        firstDiff = stringPos;
        break;
      }
    }
    if (firstDiff != -1) {
      break;
    }
  }
  if (firstDiff == -1 && shortestStrLen != longestStrLen) {
    return shortestStrLen;
  }
  return firstDiff;
}

NSString *OrgApacheCommonsLang3StringUtils_getCommonPrefixWithNSStringArray_(IOSObjectArray *strs) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (strs == nil || strs->size_ == 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  jint smallestIndexOfDiff = OrgApacheCommonsLang3StringUtils_indexOfDifferenceWithJavaLangCharSequenceArray_(strs);
  if (smallestIndexOfDiff == OrgApacheCommonsLang3StringUtils_INDEX_NOT_FOUND) {
    if (IOSObjectArray_Get(strs, 0) == nil) {
      return OrgApacheCommonsLang3StringUtils_EMPTY;
    }
    return IOSObjectArray_Get(strs, 0);
  }
  else if (smallestIndexOfDiff == 0) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  else {
    return [((NSString *) nil_chk(IOSObjectArray_Get(strs, 0))) java_substring:0 endIndex:smallestIndexOfDiff];
  }
}

jint OrgApacheCommonsLang3StringUtils_getLevenshteinDistanceWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> s, id<JavaLangCharSequence> t) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (s == nil || t == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Strings must not be null");
  }
  jint n = [s length];
  jint m = [t length];
  if (n == 0) {
    return m;
  }
  else if (m == 0) {
    return n;
  }
  if (n > m) {
    id<JavaLangCharSequence> tmp = s;
    s = t;
    t = tmp;
    n = m;
    m = [t length];
  }
  IOSIntArray *p = [IOSIntArray arrayWithLength:n + 1];
  IOSIntArray *d = [IOSIntArray arrayWithLength:n + 1];
  IOSIntArray *_d;
  jint i;
  jint j;
  jchar t_j;
  jint cost;
  for (i = 0; i <= n; i++) {
    *IOSIntArray_GetRef(p, i) = i;
  }
  for (j = 1; j <= m; j++) {
    t_j = [t charAtWithInt:j - 1];
    *IOSIntArray_GetRef(d, 0) = j;
    for (i = 1; i <= n; i++) {
      cost = [s charAtWithInt:i - 1] == t_j ? 0 : 1;
      *IOSIntArray_GetRef(d, i) = JavaLangMath_minWithInt_withInt_(JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(d, i - 1) + 1, IOSIntArray_Get(p, i) + 1), IOSIntArray_Get(p, i - 1) + cost);
    }
    _d = p;
    p = d;
    d = _d;
  }
  return IOSIntArray_Get(p, n);
}

jint OrgApacheCommonsLang3StringUtils_getLevenshteinDistanceWithJavaLangCharSequence_withJavaLangCharSequence_withInt_(id<JavaLangCharSequence> s, id<JavaLangCharSequence> t, jint threshold) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (s == nil || t == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Strings must not be null");
  }
  if (threshold < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Threshold must not be negative");
  }
  jint n = [s length];
  jint m = [t length];
  if (n == 0) {
    return m <= threshold ? m : -1;
  }
  else if (m == 0) {
    return n <= threshold ? n : -1;
  }
  else if (JavaLangMath_absWithInt_(n - m) > threshold) {
    return -1;
  }
  if (n > m) {
    id<JavaLangCharSequence> tmp = s;
    s = t;
    t = tmp;
    n = m;
    m = [t length];
  }
  IOSIntArray *p = [IOSIntArray arrayWithLength:n + 1];
  IOSIntArray *d = [IOSIntArray arrayWithLength:n + 1];
  IOSIntArray *_d;
  jint boundary = JavaLangMath_minWithInt_withInt_(n, threshold) + 1;
  for (jint i = 0; i < boundary; i++) {
    *IOSIntArray_GetRef(p, i) = i;
  }
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(p, boundary, p->size_, JavaLangInteger_MAX_VALUE);
  JavaUtilArrays_fillWithIntArray_withInt_(d, JavaLangInteger_MAX_VALUE);
  for (jint j = 1; j <= m; j++) {
    jchar t_j = [t charAtWithInt:j - 1];
    *IOSIntArray_GetRef(d, 0) = j;
    jint min = JavaLangMath_maxWithInt_withInt_(1, j - threshold);
    jint max = j > JavaLangInteger_MAX_VALUE - threshold ? n : JavaLangMath_minWithInt_withInt_(n, j + threshold);
    if (min > max) {
      return -1;
    }
    if (min > 1) {
      *IOSIntArray_GetRef(d, min - 1) = JavaLangInteger_MAX_VALUE;
    }
    for (jint i = min; i <= max; i++) {
      if ([s charAtWithInt:i - 1] == t_j) {
        *IOSIntArray_GetRef(d, i) = IOSIntArray_Get(p, i - 1);
      }
      else {
        *IOSIntArray_GetRef(d, i) = 1 + JavaLangMath_minWithInt_withInt_(JavaLangMath_minWithInt_withInt_(IOSIntArray_Get(d, i - 1), IOSIntArray_Get(p, i)), IOSIntArray_Get(p, i - 1));
      }
    }
    _d = p;
    p = d;
    d = _d;
  }
  if (IOSIntArray_Get(p, n) <= threshold) {
    return IOSIntArray_Get(p, n);
  }
  return -1;
}

jdouble OrgApacheCommonsLang3StringUtils_getJaroWinklerDistanceWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> first, id<JavaLangCharSequence> second) {
  OrgApacheCommonsLang3StringUtils_initialize();
  jdouble DEFAULT_SCALING_FACTOR = 0.1;
  if (first == nil || second == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Strings must not be null");
  }
  IOSIntArray *mtp = OrgApacheCommonsLang3StringUtils_matchesWithJavaLangCharSequence_withJavaLangCharSequence_(first, second);
  jdouble m = IOSIntArray_Get(nil_chk(mtp), 0);
  if (m == 0) {
    return 0.0;
  }
  jdouble j = ((m / [first length] + m / [second length] + (m - IOSIntArray_Get(mtp, 1)) / m)) / 3;
  jdouble jw = j < 0.7 ? j : j + JavaLangMath_minWithDouble_withDouble_(DEFAULT_SCALING_FACTOR, 1.0 / IOSIntArray_Get(mtp, 3)) * IOSIntArray_Get(mtp, 2) * (1.0 - j);
  return JavaLangMath_roundWithDouble_(jw * 100.0) / 100.0;
}

IOSIntArray *OrgApacheCommonsLang3StringUtils_matchesWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> first, id<JavaLangCharSequence> second) {
  OrgApacheCommonsLang3StringUtils_initialize();
  id<JavaLangCharSequence> max;
  id<JavaLangCharSequence> min;
  if ([((id<JavaLangCharSequence>) nil_chk(first)) length] > [((id<JavaLangCharSequence>) nil_chk(second)) length]) {
    max = first;
    min = second;
  }
  else {
    max = second;
    min = first;
  }
  jint range = JavaLangMath_maxWithInt_withInt_([max length] / 2 - 1, 0);
  IOSIntArray *matchIndexes = [IOSIntArray arrayWithLength:[min length]];
  JavaUtilArrays_fillWithIntArray_withInt_(matchIndexes, -1);
  IOSBooleanArray *matchFlags = [IOSBooleanArray arrayWithLength:[max length]];
  jint matches = 0;
  for (jint mi = 0; mi < [min length]; mi++) {
    jchar c1 = [min charAtWithInt:mi];
    for (jint xi = JavaLangMath_maxWithInt_withInt_(mi - range, 0), xn = JavaLangMath_minWithInt_withInt_(mi + range + 1, [max length]); xi < xn; xi++) {
      if (!IOSBooleanArray_Get(matchFlags, xi) && c1 == [max charAtWithInt:xi]) {
        *IOSIntArray_GetRef(matchIndexes, mi) = xi;
        *IOSBooleanArray_GetRef(matchFlags, xi) = true;
        matches++;
        break;
      }
    }
  }
  IOSCharArray *ms1 = [IOSCharArray arrayWithLength:matches];
  IOSCharArray *ms2 = [IOSCharArray arrayWithLength:matches];
  for (jint i = 0, si = 0; i < [min length]; i++) {
    if (IOSIntArray_Get(matchIndexes, i) != -1) {
      *IOSCharArray_GetRef(ms1, si) = [min charAtWithInt:i];
      si++;
    }
  }
  for (jint i = 0, si = 0; i < [max length]; i++) {
    if (IOSBooleanArray_Get(matchFlags, i)) {
      *IOSCharArray_GetRef(ms2, si) = [max charAtWithInt:i];
      si++;
    }
  }
  jint transpositions = 0;
  for (jint mi = 0; mi < ms1->size_; mi++) {
    if (IOSCharArray_Get(ms1, mi) != IOSCharArray_Get(ms2, mi)) {
      transpositions++;
    }
  }
  jint prefix = 0;
  for (jint mi = 0; mi < [min length]; mi++) {
    if ([first charAtWithInt:mi] == [second charAtWithInt:mi]) {
      prefix++;
    }
    else {
      break;
    }
  }
  return [IOSIntArray arrayWithInts:(jint[]){ matches, transpositions / 2, prefix, [max length] } count:4];
}

jint OrgApacheCommonsLang3StringUtils_getFuzzyDistanceWithJavaLangCharSequence_withJavaLangCharSequence_withJavaUtilLocale_(id<JavaLangCharSequence> term, id<JavaLangCharSequence> query, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (term == nil || query == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Strings must not be null");
  }
  else if (locale == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Locale must not be null");
  }
  NSString *termLowerCase = [((NSString *) nil_chk([term description])) java_lowercaseStringWithJRELocale:locale];
  NSString *queryLowerCase = [((NSString *) nil_chk([query description])) java_lowercaseStringWithJRELocale:locale];
  jint score = 0;
  jint termIndex = 0;
  jint previousMatchingCharacterIndex = JavaLangInteger_MIN_VALUE;
  for (jint queryIndex = 0; queryIndex < ((jint) [((NSString *) nil_chk(queryLowerCase)) length]); queryIndex++) {
    jchar queryChar = [queryLowerCase charAtWithInt:queryIndex];
    jboolean termCharacterMatchFound = false;
    for (; termIndex < ((jint) [((NSString *) nil_chk(termLowerCase)) length]) && !termCharacterMatchFound; termIndex++) {
      jchar termChar = [termLowerCase charAtWithInt:termIndex];
      if (queryChar == termChar) {
        score++;
        if (previousMatchingCharacterIndex + 1 == termIndex) {
          score += 2;
        }
        previousMatchingCharacterIndex = termIndex;
        termCharacterMatchFound = true;
      }
    }
  }
  return score;
}

jboolean OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> prefix) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, prefix, false);
}

jboolean OrgApacheCommonsLang3StringUtils_startsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> prefix) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, prefix, true);
}

jboolean OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> prefix, jboolean ignoreCase) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || prefix == nil) {
    return str == nil && prefix == nil;
  }
  if ([prefix length] > [str length]) {
    return false;
  }
  return OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(str, ignoreCase, 0, prefix, 0, [prefix length]);
}

jboolean OrgApacheCommonsLang3StringUtils_startsWithAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> sequence, IOSObjectArray *searchStrings) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(sequence) || OrgApacheCommonsLang3ArrayUtils_isEmptyWithNSObjectArray_(searchStrings)) {
    return false;
  }
  {
    IOSObjectArray *a__ = searchStrings;
    id<JavaLangCharSequence> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangCharSequence> searchString = *b__++;
      if (OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_(sequence, searchString)) {
        return true;
      }
    }
  }
  return false;
}

jboolean OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> suffix) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, suffix, false);
}

jboolean OrgApacheCommonsLang3StringUtils_endsWithIgnoreCaseWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> suffix) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, suffix, true);
}

jboolean OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(id<JavaLangCharSequence> str, id<JavaLangCharSequence> suffix, jboolean ignoreCase) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || suffix == nil) {
    return str == nil && suffix == nil;
  }
  if ([suffix length] > [str length]) {
    return false;
  }
  jint strOffset = [str length] - [suffix length];
  return OrgApacheCommonsLang3CharSequenceUtils_regionMatchesWithJavaLangCharSequence_withBoolean_withInt_withJavaLangCharSequence_withInt_withInt_(str, ignoreCase, strOffset, suffix, 0, [suffix length]);
}

NSString *OrgApacheCommonsLang3StringUtils_normalizeSpaceWithNSString_(NSString *str) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str)) {
    return str;
  }
  jint size = ((jint) [((NSString *) nil_chk(str)) length]);
  IOSCharArray *newChars = [IOSCharArray arrayWithLength:size];
  jint count = 0;
  jint whitespacesCount = 0;
  jboolean startWhitespaces = true;
  for (jint i = 0; i < size; i++) {
    jchar actualChar = [str charAtWithInt:i];
    jboolean isWhitespace = JavaLangCharacter_isWhitespaceWithChar_(actualChar);
    if (!isWhitespace) {
      startWhitespaces = false;
      *IOSCharArray_GetRef(newChars, count++) = (actualChar == 160 ? 32 : actualChar);
      whitespacesCount = 0;
    }
    else {
      if (whitespacesCount == 0 && !startWhitespaces) {
        *IOSCharArray_GetRef(newChars, count++) = [((NSString *) nil_chk(OrgApacheCommonsLang3StringUtils_SPACE)) charAtWithInt:0];
      }
      whitespacesCount++;
    }
  }
  if (startWhitespaces) {
    return OrgApacheCommonsLang3StringUtils_EMPTY;
  }
  return [[NSString java_stringWithCharacters:newChars offset:0 length:count - (whitespacesCount > 0 ? 1 : 0)] java_trim];
}

jboolean OrgApacheCommonsLang3StringUtils_endsWithAnyWithJavaLangCharSequence_withJavaLangCharSequenceArray_(id<JavaLangCharSequence> sequence, IOSObjectArray *searchStrings) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(sequence) || OrgApacheCommonsLang3ArrayUtils_isEmptyWithNSObjectArray_(searchStrings)) {
    return false;
  }
  {
    IOSObjectArray *a__ = searchStrings;
    id<JavaLangCharSequence> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<JavaLangCharSequence> searchString = *b__++;
      if (OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_(sequence, searchString)) {
        return true;
      }
    }
  }
  return false;
}

NSString *OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> suffix, jboolean ignoreCase, IOSObjectArray *suffixes) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(suffix) || OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, suffix, ignoreCase)) {
    return str;
  }
  if (suffixes != nil && suffixes->size_ > 0) {
    {
      IOSObjectArray *a__ = suffixes;
      id<JavaLangCharSequence> const *b__ = a__->buffer_;
      id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangCharSequence> s = *b__++;
        if (OrgApacheCommonsLang3StringUtils_endsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, s, ignoreCase)) {
          return str;
        }
      }
    }
  }
  return JreStrcat("$$", str, [((id<JavaLangCharSequence>) nil_chk(suffix)) description]);
}

NSString *OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> suffix, IOSObjectArray *suffixes) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(str, suffix, false, suffixes);
}

NSString *OrgApacheCommonsLang3StringUtils_appendIfMissingIgnoreCaseWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> suffix, IOSObjectArray *suffixes) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_appendIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(str, suffix, true, suffixes);
}

NSString *OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> prefix, jboolean ignoreCase, IOSObjectArray *prefixes) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (str == nil || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(prefix) || OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, prefix, ignoreCase)) {
    return str;
  }
  if (prefixes != nil && prefixes->size_ > 0) {
    {
      IOSObjectArray *a__ = prefixes;
      id<JavaLangCharSequence> const *b__ = a__->buffer_;
      id<JavaLangCharSequence> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<JavaLangCharSequence> p = *b__++;
        if (OrgApacheCommonsLang3StringUtils_startsWithWithJavaLangCharSequence_withJavaLangCharSequence_withBoolean_(str, p, ignoreCase)) {
          return str;
        }
      }
    }
  }
  return JreStrcat("$$", [((id<JavaLangCharSequence>) nil_chk(prefix)) description], str);
}

NSString *OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> prefix, IOSObjectArray *prefixes) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(str, prefix, false, prefixes);
}

NSString *OrgApacheCommonsLang3StringUtils_prependIfMissingIgnoreCaseWithNSString_withJavaLangCharSequence_withJavaLangCharSequenceArray_(NSString *str, id<JavaLangCharSequence> prefix, IOSObjectArray *prefixes) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return OrgApacheCommonsLang3StringUtils_prependIfMissingWithNSString_withJavaLangCharSequence_withBoolean_withJavaLangCharSequenceArray_(str, prefix, true, prefixes);
}

NSString *OrgApacheCommonsLang3StringUtils_toStringWithByteArray_withNSString_(IOSByteArray *bytes, NSString *charsetName) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return charsetName != nil ? [NSString java_stringWithBytes:bytes charsetName:charsetName] : [NSString java_stringWithBytes:bytes charset:JavaNioCharsetCharset_defaultCharset()];
}

NSString *OrgApacheCommonsLang3StringUtils_toEncodedStringWithByteArray_withJavaNioCharsetCharset_(IOSByteArray *bytes, JavaNioCharsetCharset *charset) {
  OrgApacheCommonsLang3StringUtils_initialize();
  return [NSString java_stringWithBytes:bytes charset:charset != nil ? charset : JavaNioCharsetCharset_defaultCharset()];
}

NSString *OrgApacheCommonsLang3StringUtils_wrapWithNSString_withChar_(NSString *str, jchar wrapWith) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || wrapWith == 0x0000) {
    return str;
  }
  return JreStrcat("C$C", wrapWith, str, wrapWith);
}

NSString *OrgApacheCommonsLang3StringUtils_wrapWithNSString_withNSString_(NSString *str, NSString *wrapWith) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(wrapWith)) {
    return str;
  }
  return [((NSString *) nil_chk([((NSString *) nil_chk(wrapWith)) java_concat:str])) java_concat:wrapWith];
}

NSString *OrgApacheCommonsLang3StringUtils_wrapIfMissingWithNSString_withChar_(NSString *str, jchar wrapWith) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || wrapWith == 0x0000) {
    return str;
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(str)) length]) + 2);
  if ([str charAtWithInt:0] != wrapWith) {
    [builder appendWithChar:wrapWith];
  }
  [builder appendWithNSString:str];
  if ([str charAtWithInt:((jint) [str length]) - 1] != wrapWith) {
    [builder appendWithChar:wrapWith];
  }
  return [builder description];
}

NSString *OrgApacheCommonsLang3StringUtils_wrapIfMissingWithNSString_withNSString_(NSString *str, NSString *wrapWith) {
  OrgApacheCommonsLang3StringUtils_initialize();
  if (OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(str) || OrgApacheCommonsLang3StringUtils_isEmptyWithJavaLangCharSequence_(wrapWith)) {
    return str;
  }
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(str)) length]) + ((jint) [((NSString *) nil_chk(wrapWith)) length]) + ((jint) [wrapWith length]));
  if (![str hasPrefix:wrapWith]) {
    [builder appendWithNSString:wrapWith];
  }
  [builder appendWithNSString:str];
  if (![str hasSuffix:wrapWith]) {
    [builder appendWithNSString:wrapWith];
  }
  return [builder description];
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *OrgApacheCommonsLang3StringUtils__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3StringUtils)
