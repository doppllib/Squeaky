//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ReflectMemberUtils")
#ifdef RESTRICT_OrgApacheCommonsLang3ReflectMemberUtils
#define INCLUDE_ALL_OrgApacheCommonsLang3ReflectMemberUtils 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ReflectMemberUtils 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ReflectMemberUtils

#if !defined (OrgApacheCommonsLang3ReflectMemberUtils_) && (INCLUDE_ALL_OrgApacheCommonsLang3ReflectMemberUtils || defined(INCLUDE_OrgApacheCommonsLang3ReflectMemberUtils))
#define OrgApacheCommonsLang3ReflectMemberUtils_

@class IOSObjectArray;
@class JavaLangReflectAccessibleObject;
@class JavaLangReflectConstructor;
@class JavaLangReflectMethod;
@protocol JavaLangReflectMember;

@interface OrgApacheCommonsLang3ReflectMemberUtils : NSObject

#pragma mark Package-Private

- (instancetype)init;

+ (jint)compareConstructorFitWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)left
                             withJavaLangReflectConstructor:(JavaLangReflectConstructor *)right
                                          withIOSClassArray:(IOSObjectArray *)actual;

+ (jint)compareMethodFitWithJavaLangReflectMethod:(JavaLangReflectMethod *)left
                        withJavaLangReflectMethod:(JavaLangReflectMethod *)right
                                withIOSClassArray:(IOSObjectArray *)actual;

+ (jboolean)isAccessibleWithJavaLangReflectMember:(id<JavaLangReflectMember>)m;

+ (jboolean)isMatchingConstructorWithJavaLangReflectConstructor:(JavaLangReflectConstructor *)method
                                              withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (jboolean)isMatchingMethodWithJavaLangReflectMethod:(JavaLangReflectMethod *)method
                                    withIOSClassArray:(IOSObjectArray *)parameterTypes;

+ (jboolean)isPackageAccessWithInt:(jint)modifiers;

+ (jboolean)setAccessibleWorkaroundWithJavaLangReflectAccessibleObject:(JavaLangReflectAccessibleObject *)o;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3ReflectMemberUtils)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ReflectMemberUtils_init(OrgApacheCommonsLang3ReflectMemberUtils *self);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectMemberUtils_setAccessibleWorkaroundWithJavaLangReflectAccessibleObject_(JavaLangReflectAccessibleObject *o);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectMemberUtils_isPackageAccessWithInt_(jint modifiers);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectMemberUtils_isAccessibleWithJavaLangReflectMember_(id<JavaLangReflectMember> m);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3ReflectMemberUtils_compareConstructorFitWithJavaLangReflectConstructor_withJavaLangReflectConstructor_withIOSClassArray_(JavaLangReflectConstructor *left, JavaLangReflectConstructor *right, IOSObjectArray *actual);

FOUNDATION_EXPORT jint OrgApacheCommonsLang3ReflectMemberUtils_compareMethodFitWithJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClassArray_(JavaLangReflectMethod *left, JavaLangReflectMethod *right, IOSObjectArray *actual);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectMemberUtils_isMatchingMethodWithJavaLangReflectMethod_withIOSClassArray_(JavaLangReflectMethod *method, IOSObjectArray *parameterTypes);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ReflectMemberUtils_isMatchingConstructorWithJavaLangReflectConstructor_withIOSClassArray_(JavaLangReflectConstructor *method, IOSObjectArray *parameterTypes);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ReflectMemberUtils)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ReflectMemberUtils")
