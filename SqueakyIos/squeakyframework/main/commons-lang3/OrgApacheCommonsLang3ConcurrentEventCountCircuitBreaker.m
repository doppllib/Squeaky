//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker.h"
#include "OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/EnumMap.h"
#include "java/util/Map.h"
#include "java/util/concurrent/TimeUnit.h"
#include "java/util/concurrent/atomic/AtomicReference.h"

@class OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;
@class OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy;

@interface OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker () {
 @public
  JavaUtilConcurrentAtomicAtomicReference *checkIntervalData_;
  jint openingThreshold_;
  jlong openingInterval_;
  jint closingThreshold_;
  jlong closingInterval_;
}

- (jboolean)performStateCheckWithInt:(jint)increment;

- (jboolean)updateCheckIntervalDataWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
                                   withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData;

- (void)changeStateAndStartNewCheckIntervalWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)newState;

- (OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextCheckIntervalDataWithInt:(jint)increment
                              withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
                                            withOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)currentState
                                                                                                   withLong:(jlong)time;

+ (OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *)stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)state;

+ (id<JavaUtilMap>)createStrategyMap;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, checkIntervalData_, JavaUtilConcurrentAtomicAtomicReference *)

inline id<JavaUtilMap> OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_get_STRATEGY_MAP();
static id<JavaUtilMap> OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_STRATEGY_MAP;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, STRATEGY_MAP, id<JavaUtilMap>)

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_performStateCheckWithInt_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint increment);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_updateCheckIntervalDataWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *currentData, OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *nextData);

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_changeStateAndStartNewCheckIntervalWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *newState);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_nextCheckIntervalDataWithInt_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_withLong_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint increment, OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *currentData, OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *currentState, jlong time);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *state);

__attribute__((unused)) static id<JavaUtilMap> OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_createStrategyMap();

@interface OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData : NSObject {
 @public
  jint eventCount_;
  jlong checkIntervalStart_;
}

- (instancetype)initWithInt:(jint)count
                   withLong:(jlong)intervalStart;

- (jint)getEventCount;

- (jlong)getCheckIntervalStart;

- (OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)incrementWithInt:(jint)delta;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData)

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *self, jint count, jlong intervalStart);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(jint count, jlong intervalStart) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(jint count, jlong intervalStart);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData)

@interface OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy : NSObject

- (instancetype)init;

- (jboolean)isCheckIntervalFinishedWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
                 withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
                                                                                      withLong:(jlong)now;

- (jboolean)isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData;

- (jlong)fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy)

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy_init(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy)

@interface OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed : OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy

- (instancetype)init;

- (jboolean)isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData;

- (jlong)fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed)

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed *self);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed)

@interface OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen : OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy

- (instancetype)init;

- (jboolean)isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData;

- (jlong)fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen)

__attribute__((unused)) static void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen *self);

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init();

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker)

@implementation OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker

- (instancetype)initWithInt:(jint)openingThreshold
                   withLong:(jlong)openingInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)openingUnit
                    withInt:(jint)closingThreshold
                   withLong:(jlong)closingInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)closingUnit {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(self, openingThreshold, openingInterval, openingUnit, closingThreshold, closingInterval, closingUnit);
  return self;
}

- (instancetype)initWithInt:(jint)openingThreshold
                   withLong:(jlong)checkInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)checkUnit
                    withInt:(jint)closingThreshold {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(self, openingThreshold, checkInterval, checkUnit, closingThreshold);
  return self;
}

- (instancetype)initWithInt:(jint)threshold
                   withLong:(jlong)checkInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)checkUnit {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(self, threshold, checkInterval, checkUnit);
  return self;
}

- (jint)getOpeningThreshold {
  return openingThreshold_;
}

- (jlong)getOpeningInterval {
  return openingInterval_;
}

- (jint)getClosingThreshold {
  return closingThreshold_;
}

- (jlong)getClosingInterval {
  return closingInterval_;
}

- (jboolean)checkState {
  return OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_performStateCheckWithInt_(self, 0);
}

- (jboolean)incrementAndCheckStateWithId:(JavaLangInteger *)increment {
  return OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_performStateCheckWithInt_(self, 1);
}

- (jboolean)incrementAndCheckState {
  return [self incrementAndCheckStateWithId:JavaLangInteger_valueOfWithInt_(1)];
}

- (void)open {
  [super open];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(checkIntervalData_)) setWithId:create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(0, [self now])];
}

- (void)close {
  [super close];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(checkIntervalData_)) setWithId:create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(0, [self now])];
}

- (jboolean)performStateCheckWithInt:(jint)increment {
  return OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_performStateCheckWithInt_(self, increment);
}

- (jboolean)updateCheckIntervalDataWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
                                   withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData {
  return OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_updateCheckIntervalDataWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_(self, currentData, nextData);
}

- (void)changeStateAndStartNewCheckIntervalWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)newState {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_changeStateAndStartNewCheckIntervalWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(self, newState);
}

- (OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextCheckIntervalDataWithInt:(jint)increment
                              withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
                                            withOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)currentState
                                                                                                   withLong:(jlong)time {
  return OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_nextCheckIntervalDataWithInt_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_withLong_(self, increment, currentData, currentState, time);
}

- (jlong)now {
  return JavaLangSystem_nanoTime();
}

+ (OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *)stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)state {
  return OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(state);
}

+ (id<JavaUtilMap>)createStrategyMap {
  return OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_createStrategyMap();
}

- (void)dealloc {
  RELEASE_(checkIntervalData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy;", 0xa, 14, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, -1, -1, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withInt:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[1].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:withInt:);
  methods[2].selector = @selector(initWithInt:withLong:withJavaUtilConcurrentTimeUnit:);
  methods[3].selector = @selector(getOpeningThreshold);
  methods[4].selector = @selector(getOpeningInterval);
  methods[5].selector = @selector(getClosingThreshold);
  methods[6].selector = @selector(getClosingInterval);
  methods[7].selector = @selector(checkState);
  methods[8].selector = @selector(incrementAndCheckStateWithId:);
  methods[9].selector = @selector(incrementAndCheckState);
  methods[10].selector = @selector(open);
  methods[11].selector = @selector(close);
  methods[12].selector = @selector(performStateCheckWithInt:);
  methods[13].selector = @selector(updateCheckIntervalDataWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:);
  methods[14].selector = @selector(changeStateAndStartNewCheckIntervalWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:);
  methods[15].selector = @selector(nextCheckIntervalDataWithInt:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:withOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:withLong:);
  methods[16].selector = @selector(now);
  methods[17].selector = @selector(stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:);
  methods[18].selector = @selector(createStrategyMap);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STRATEGY_MAP", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 16, 17, -1 },
    { "checkIntervalData_", "LJavaUtilConcurrentAtomicAtomicReference;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "openingThreshold_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "openingInterval_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closingThreshold_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "closingInterval_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJLJavaUtilConcurrentTimeUnit;IJLJavaUtilConcurrentTimeUnit;", "IJLJavaUtilConcurrentTimeUnit;I", "IJLJavaUtilConcurrentTimeUnit;", "incrementAndCheckState", "LJavaLangInteger;", "LOrgApacheCommonsLang3ConcurrentCircuitBreakingException;", "performStateCheck", "I", "updateCheckIntervalData", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;", "changeStateAndStartNewCheckInterval", "LOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State;", "nextCheckIntervalData", "ILOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;LOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State;J", "stateStrategy", "()Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;", &OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_STRATEGY_MAP, "Ljava/util/Map<Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker$State;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;>;", "Ljava/util/concurrent/atomic/AtomicReference<Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;>;", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen;", "Lorg/apache/commons/lang3/concurrent/AbstractCircuitBreaker<Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker = { "EventCountCircuitBreaker", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0x1, 19, 6, -1, 19, -1, 20, -1 };
  return &_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker class]) {
    JreStrongAssign(&OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_STRATEGY_MAP, OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_createStrategyMap());
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker)
  }
}

@end

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint openingThreshold, jlong openingInterval, JavaUtilConcurrentTimeUnit *openingUnit, jint closingThreshold, jlong closingInterval, JavaUtilConcurrentTimeUnit *closingUnit) {
  OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_init(self);
  JreStrongAssignAndConsume(&self->checkIntervalData_, new_JavaUtilConcurrentAtomicAtomicReference_initWithId_(create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(0, 0)));
  self->openingThreshold_ = openingThreshold;
  self->openingInterval_ = [((JavaUtilConcurrentTimeUnit *) nil_chk(openingUnit)) toNanosWithLong:openingInterval];
  self->closingThreshold_ = closingThreshold;
  self->closingInterval_ = [((JavaUtilConcurrentTimeUnit *) nil_chk(closingUnit)) toNanosWithLong:closingInterval];
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(jint openingThreshold, jlong openingInterval, JavaUtilConcurrentTimeUnit *openingUnit, jint closingThreshold, jlong closingInterval, JavaUtilConcurrentTimeUnit *closingUnit) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_, openingThreshold, openingInterval, openingUnit, closingThreshold, closingInterval, closingUnit)
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(jint openingThreshold, jlong openingInterval, JavaUtilConcurrentTimeUnit *openingUnit, jint closingThreshold, jlong closingInterval, JavaUtilConcurrentTimeUnit *closingUnit) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_, openingThreshold, openingInterval, openingUnit, closingThreshold, closingInterval, closingUnit)
}

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint openingThreshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit, jint closingThreshold) {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(self, openingThreshold, checkInterval, checkUnit, closingThreshold, checkInterval, checkUnit);
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(jint openingThreshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit, jint closingThreshold) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_, openingThreshold, checkInterval, checkUnit, closingThreshold)
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(jint openingThreshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit, jint closingThreshold) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_, openingThreshold, checkInterval, checkUnit, closingThreshold)
}

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint threshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit) {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(self, threshold, checkInterval, checkUnit, threshold);
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint threshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_, threshold, checkInterval, checkUnit)
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint threshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker, initWithInt_withLong_withJavaUtilConcurrentTimeUnit_, threshold, checkInterval, checkUnit)
}

jboolean OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_performStateCheckWithInt_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint increment) {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *currentData;
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *nextData;
  OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *currentState;
  do {
    jlong time = [self now];
    currentState = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->state_)) get];
    currentData = [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->checkIntervalData_)) get];
    nextData = OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_nextCheckIntervalDataWithInt_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_withLong_(self, increment, currentData, currentState, time);
  }
  while (!OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_updateCheckIntervalDataWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_(self, currentData, nextData));
  if ([((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *) nil_chk(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(currentState))) isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:self withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:currentData withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:nextData]) {
    currentState = [((OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *) nil_chk(currentState)) oppositeState];
    OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_changeStateAndStartNewCheckIntervalWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(self, currentState);
  }
  return !OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_isOpenWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(currentState);
}

jboolean OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_updateCheckIntervalDataWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *currentData, OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *nextData) {
  return currentData == nextData || [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->checkIntervalData_)) compareAndSetWithId:currentData withId:nextData];
}

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_changeStateAndStartNewCheckIntervalWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *newState) {
  [self changeStateWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:newState];
  [((JavaUtilConcurrentAtomicAtomicReference *) nil_chk(self->checkIntervalData_)) setWithId:create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(0, [self now])];
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_nextCheckIntervalDataWithInt_withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_withOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_withLong_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint increment, OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *currentData, OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *currentState, jlong time) {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *nextData;
  if ([((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *) nil_chk(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(currentState))) isCheckIntervalFinishedWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:self withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:currentData withLong:time]) {
    nextData = create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(increment, time);
  }
  else {
    nextData = [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *) nil_chk(currentData)) incrementWithInt:increment];
  }
  return nextData;
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_stateStrategyWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *state) {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initialize();
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *strategy = [((id<JavaUtilMap>) nil_chk(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_STRATEGY_MAP)) getWithId:state];
  return strategy;
}

id<JavaUtilMap> OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_createStrategyMap() {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initialize();
  id<JavaUtilMap> map = create_JavaUtilEnumMap_initWithIOSClass_(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_class_());
  [map putWithId:JreLoadEnum(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State, CLOSED) withId:create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init()];
  [map putWithId:JreLoadEnum(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State, OPEN) withId:create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init()];
  return map;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker)

@implementation OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData

- (instancetype)initWithInt:(jint)count
                   withLong:(jlong)intervalStart {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(self, count, intervalStart);
  return self;
}

- (jint)getEventCount {
  return eventCount_;
}

- (jlong)getCheckIntervalStart {
  return checkIntervalStart_;
}

- (OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)incrementWithInt:(jint)delta {
  return (delta != 0) ? create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_([self getEventCount] + delta, [self getCheckIntervalStart]) : self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withLong:);
  methods[1].selector = @selector(getEventCount);
  methods[2].selector = @selector(getCheckIntervalStart);
  methods[3].selector = @selector(incrementWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "eventCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "checkIntervalStart_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IJ", "increment", "I", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData = { "CheckIntervalData", "org.apache.commons.lang3.concurrent", ptrTable, methods, fields, 7, 0xa, 4, 2, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;
}

@end

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *self, jint count, jlong intervalStart) {
  NSObject_init(self);
  self->eventCount_ = count;
  self->checkIntervalStart_ = intervalStart;
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(jint count, jlong intervalStart) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData, initWithInt_withLong_, count, intervalStart)
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData_initWithInt_withLong_(jint count, jlong intervalStart) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData, initWithInt_withLong_, count, intervalStart)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData)

@implementation OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isCheckIntervalFinishedWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
                 withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
                                                                                      withLong:(jlong)now {
  return now - [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *) nil_chk(currentData)) getCheckIntervalStart] > [self fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:breaker];
}

- (jboolean)isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x404, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isCheckIntervalFinishedWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:withLong:);
  methods[2].selector = @selector(isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:);
  methods[3].selector = @selector(fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isCheckIntervalFinished", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;J", "isStateTransition", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;", "fetchCheckInterval", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy = { "StateStrategy", "org.apache.commons.lang3.concurrent", ptrTable, methods, NULL, 7, 0x40a, 4, 0, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy;
}

@end

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy_init(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy)

@implementation OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData {
  return [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *) nil_chk(nextData)) getEventCount] > [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *) nil_chk(breaker)) getOpeningThreshold];
}

- (jlong)fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker {
  return [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *) nil_chk(breaker)) getOpeningInterval];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:);
  methods[2].selector = @selector(fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isStateTransition", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;", "fetchCheckInterval", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed = { "StateStrategyClosed", "org.apache.commons.lang3.concurrent", ptrTable, methods, NULL, 7, 0xa, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed;
}

@end

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed *self) {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy_init(self);
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed, init)
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyClosed)

@implementation OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)currentData
           withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *)nextData {
  return [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *) nil_chk(nextData)) getCheckIntervalStart] != [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData *) nil_chk(currentData)) getCheckIntervalStart] && [currentData getEventCount] < [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *) nil_chk(breaker)) getClosingThreshold];
}

- (jlong)fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *)breaker {
  return [((OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *) nil_chk(breaker)) getClosingInterval];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isStateTransitionWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:withOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData:);
  methods[2].selector = @selector(fetchCheckIntervalWithOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isStateTransition", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_CheckIntervalData;", "fetchCheckInterval", "LOrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen = { "StateStrategyOpen", "org.apache.commons.lang3.concurrent", ptrTable, methods, NULL, 7, 0xa, 3, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen;
}

@end

void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen *self) {
  OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategy_init(self);
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen, init)
}

OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_StateStrategyOpen)
