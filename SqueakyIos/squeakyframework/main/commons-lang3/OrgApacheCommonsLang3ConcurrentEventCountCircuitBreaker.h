//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/concurrent/EventCountCircuitBreaker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker")
#ifdef RESTRICT_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker

#if !defined (OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker))
#define OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_

#define RESTRICT_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker 1
#define INCLUDE_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker 1
#include "OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker.h"

@class JavaLangInteger;
@class JavaUtilConcurrentTimeUnit;

@interface OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker : OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker

#pragma mark Public

- (instancetype)initWithInt:(jint)threshold
                   withLong:(jlong)checkInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)checkUnit;

- (instancetype)initWithInt:(jint)openingThreshold
                   withLong:(jlong)checkInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)checkUnit
                    withInt:(jint)closingThreshold;

- (instancetype)initWithInt:(jint)openingThreshold
                   withLong:(jlong)openingInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)openingUnit
                    withInt:(jint)closingThreshold
                   withLong:(jlong)closingInterval
withJavaUtilConcurrentTimeUnit:(JavaUtilConcurrentTimeUnit *)closingUnit;

- (jboolean)checkState;

- (void)close;

- (jlong)getClosingInterval;

- (jint)getClosingThreshold;

- (jlong)getOpeningInterval;

- (jint)getOpeningThreshold;

- (jboolean)incrementAndCheckState;

- (jboolean)incrementAndCheckStateWithId:(JavaLangInteger *)increment;

- (void)open;

#pragma mark Package-Private

- (jlong)now;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint openingThreshold, jlong openingInterval, JavaUtilConcurrentTimeUnit *openingUnit, jint closingThreshold, jlong closingInterval, JavaUtilConcurrentTimeUnit *closingUnit);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(jint openingThreshold, jlong openingInterval, JavaUtilConcurrentTimeUnit *openingUnit, jint closingThreshold, jlong closingInterval, JavaUtilConcurrentTimeUnit *closingUnit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_withLong_withJavaUtilConcurrentTimeUnit_(jint openingThreshold, jlong openingInterval, JavaUtilConcurrentTimeUnit *openingUnit, jint closingThreshold, jlong closingInterval, JavaUtilConcurrentTimeUnit *closingUnit);

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint openingThreshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit, jint closingThreshold);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(jint openingThreshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit, jint closingThreshold) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_withInt_(jint openingThreshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit, jint closingThreshold);

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *self, jint threshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *new_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint threshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker *create_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker_initWithInt_withLong_withJavaUtilConcurrentTimeUnit_(jint threshold, jlong checkInterval, JavaUtilConcurrentTimeUnit *checkUnit);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentEventCountCircuitBreaker")
