//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3TimeFastDateParser.h"
#include "java/io/ObjectInputStream.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/text/DateFormatSymbols.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/util/ArrayList.h"
#include "java/util/Calendar.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TimeZone.h"
#include "java/util/TreeSet.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface OrgApacheCommonsLang3TimeFastDateParser () {
 @public
  NSString *pattern_;
  JavaUtilTimeZone *timeZone_;
  JavaUtilLocale *locale_;
  jint century_;
  jint startYear_;
  id<JavaUtilList> patterns_;
}

- (void)init__WithJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar OBJC_METHOD_FAMILY_NONE;

+ (jboolean)isFormatLetterWithChar:(jchar)c;

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg;

+ (JavaLangStringBuilder *)simpleQuoteWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                   withNSString:(NSString *)value;

+ (id<JavaUtilMap>)appendDisplayNamesWithJavaUtilCalendar:(JavaUtilCalendar *)cal
                                       withJavaUtilLocale:(JavaUtilLocale *)locale
                                                  withInt:(jint)field
                                withJavaLangStringBuilder:(JavaLangStringBuilder *)regex;

- (jint)adjustYearWithInt:(jint)twoDigitYear;

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithChar:(jchar)f
                                                                  withInt:(jint)width
                                                     withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar;

+ (id<JavaUtilConcurrentConcurrentMap>)getCacheWithInt:(jint)field;

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getLocaleSpecificStrategyWithInt:(jint)field
                                                                  withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, timeZone_, JavaUtilTimeZone *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser, patterns_, id<JavaUtilList>)

inline jlong OrgApacheCommonsLang3TimeFastDateParser_get_serialVersionUID();
#define OrgApacheCommonsLang3TimeFastDateParser_serialVersionUID 3LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser, serialVersionUID, jlong)

inline id<JavaUtilComparator> OrgApacheCommonsLang3TimeFastDateParser_get_LONGER_FIRST_LOWERCASE();
static id<JavaUtilComparator> OrgApacheCommonsLang3TimeFastDateParser_LONGER_FIRST_LOWERCASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, LONGER_FIRST_LOWERCASE, id<JavaUtilComparator>)

inline IOSObjectArray *OrgApacheCommonsLang3TimeFastDateParser_get_caches();
static IOSObjectArray *OrgApacheCommonsLang3TimeFastDateParser_caches;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, caches, IOSObjectArray *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_ABBREVIATED_YEAR_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, ABBREVIATED_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_NUMBER_MONTH_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, NUMBER_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_LITERAL_YEAR_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, LITERAL_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_WEEK_OF_YEAR_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, WEEK_OF_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_WEEK_OF_MONTH_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, WEEK_OF_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_DAY_OF_YEAR_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, DAY_OF_YEAR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_DAY_OF_MONTH_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, DAY_OF_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_DAY_OF_WEEK_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, DAY_OF_WEEK_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_DAY_OF_WEEK_IN_MONTH_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, DAY_OF_WEEK_IN_MONTH_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR_OF_DAY_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR_OF_DAY_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR24_OF_DAY_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR24_OF_DAY_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR12_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR12_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_HOUR_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, HOUR_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_MINUTE_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, MINUTE_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_SECOND_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, SECOND_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_get_MILLISECOND_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser, MILLISECOND_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, JavaUtilCalendar *definingCalendar);

__attribute__((unused)) static jboolean OrgApacheCommonsLang3TimeFastDateParser_isFormatLetterWithChar_(jchar c);

__attribute__((unused)) static JavaLangStringBuilder *OrgApacheCommonsLang3TimeFastDateParser_simpleQuoteWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *value);

__attribute__((unused)) static id<JavaUtilMap> OrgApacheCommonsLang3TimeFastDateParser_appendDisplayNamesWithJavaUtilCalendar_withJavaUtilLocale_withInt_withJavaLangStringBuilder_(JavaUtilCalendar *cal, JavaUtilLocale *locale, jint field, JavaLangStringBuilder *regex);

__attribute__((unused)) static jint OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(OrgApacheCommonsLang3TimeFastDateParser *self, jint twoDigitYear);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithChar_withInt_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, jchar f, jint width, JavaUtilCalendar *definingCalendar);

__attribute__((unused)) static id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, jint field, JavaUtilCalendar *definingCalendar);

@interface OrgApacheCommonsLang3TimeFastDateParser_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(NSString *)left
               withId:(NSString *)right;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_1)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_1_init(OrgApacheCommonsLang3TimeFastDateParser_1 *self);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_1 *new_OrgApacheCommonsLang3TimeFastDateParser_1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_1 *create_OrgApacheCommonsLang3TimeFastDateParser_1_init();

@interface OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth : NSObject {
 @public
  OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy_;
  jint width_;
}

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy:(OrgApacheCommonsLang3TimeFastDateParser_Strategy *)strategy
                                                                 withInt:(jint)width;

- (jint)getMaxWidthWithJavaUtilListIterator:(id<JavaUtilListIterator>)lt;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth, strategy_, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *self, OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy, jint width);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *new_OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy, jint width) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *create_OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy, jint width);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth)

@interface OrgApacheCommonsLang3TimeFastDateParser_StrategyParser : NSObject {
 @public
  OrgApacheCommonsLang3TimeFastDateParser *this$0_;
  NSString *pattern_;
  JavaUtilCalendar *definingCalendar_;
  jint currentIdx_;
}

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)outer$
                                                   withNSString:(NSString *)pattern
                                           withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar;

- (OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *)getNextStrategy;

- (OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *)letterPatternWithChar:(jchar)c;

- (OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *)literal;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser, pattern_, NSString *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser, definingCalendar_, JavaUtilCalendar *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *self, OrgApacheCommonsLang3TimeFastDateParser *outer$, NSString *pattern, JavaUtilCalendar *definingCalendar);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *new_OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *outer$, NSString *pattern, JavaUtilCalendar *definingCalendar) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *create_OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *outer$, NSString *pattern, JavaUtilCalendar *definingCalendar);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_letterPatternWithChar_(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *self, jchar c);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_literal(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser)

@interface OrgApacheCommonsLang3TimeFastDateParser_Strategy ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(OrgApacheCommonsLang3TimeFastDateParser_Strategy *self);

@interface OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy () {
 @public
  JavaUtilRegexPattern *pattern_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy, pattern_, JavaUtilRegexPattern *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy_init(OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy *self);

@interface OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy : OrgApacheCommonsLang3TimeFastDateParser_Strategy {
 @public
  NSString *formatField_;
}

- (instancetype)initWithNSString:(NSString *)formatField;

- (jboolean)isNumber;

- (jboolean)parseWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                        withJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                                withNSString:(NSString *)source
                                   withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                                     withInt:(jint)maxWidth;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy, formatField_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *self, NSString *formatField);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy : OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy {
 @public
  jint field_;
  JavaUtilLocale *locale_;
  id<JavaUtilMap> lKeyValues_;
}

- (instancetype)initWithInt:(jint)field
       withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar
         withJavaUtilLocale:(JavaUtilLocale *)locale;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, lKeyValues_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *self, jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy : OrgApacheCommonsLang3TimeFastDateParser_Strategy {
 @public
  jint field_;
}

- (instancetype)initWithInt:(jint)field;

- (jboolean)isNumber;

- (jboolean)parseWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                        withJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                                withNSString:(NSString *)source
                                   withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                                     withInt:(jint)maxWidth;

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_2 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_2)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_2 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_2 *new_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_2 *create_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field);

@interface OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy () {
 @public
  JavaUtilLocale *locale_;
  id<JavaUtilMap> tzNames_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, tzNames_, id<JavaUtilMap>)

inline NSString *OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_RFC_822_TIME_ZONE();
static NSString *OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_RFC_822_TIME_ZONE = @"[+-]\\d{4}";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, RFC_822_TIME_ZONE, NSString *)

inline NSString *OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_GMT_OPTION();
static NSString *OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_GMT_OPTION = @"GMT[+-]\\d{1,2}:\\d{2}";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, GMT_OPTION, NSString *)

inline jint OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_get_ID();
#define OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_ID 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, ID, jint)

@interface OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo : NSObject {
 @public
  JavaUtilTimeZone *zone_;
  jint dstOffset_;
}

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                             withBoolean:(jboolean)useDst;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo, zone_, JavaUtilTimeZone *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *self, JavaUtilTimeZone *tz, jboolean useDst);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *new_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(JavaUtilTimeZone *tz, jboolean useDst) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(JavaUtilTimeZone *tz, jboolean useDst);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo)

@interface OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy : OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy

- (instancetype)initWithNSString:(NSString *)pattern;

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value;

+ (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithInt:(jint)tokenLen;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_get_ISO_8601_1_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, ISO_8601_1_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_get_ISO_8601_2_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, ISO_8601_2_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

inline OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_get_ISO_8601_3_STRATEGY();
static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, ISO_8601_3_STRATEGY, OrgApacheCommonsLang3TimeFastDateParser_Strategy *)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *self, NSString *pattern);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_(jint tokenLen);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

@interface OrgApacheCommonsLang3TimeFastDateParser_3 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_3)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_3 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_3 *new_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_3 *create_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field);

@interface OrgApacheCommonsLang3TimeFastDateParser_4 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_4)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_4 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_4 *new_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_4 *create_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field);

@interface OrgApacheCommonsLang3TimeFastDateParser_5 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_5)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_5 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_5 *new_OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_5 *create_OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(jint field);

@interface OrgApacheCommonsLang3TimeFastDateParser_6 : OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field;

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3TimeFastDateParser_6)

__attribute__((unused)) static void OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_6 *self, jint field);

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_6 *new_OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(jint field) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgApacheCommonsLang3TimeFastDateParser_6 *create_OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(jint field);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDateParser)

JavaUtilLocale *OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL;

@implementation OrgApacheCommonsLang3TimeFastDateParser

- (instancetype)initWithNSString:(NSString *)pattern
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
              withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(self, pattern, timeZone, locale);
  return self;
}

- (instancetype)initWithNSString:(NSString *)pattern
            withJavaUtilTimeZone:(JavaUtilTimeZone *)timeZone
              withJavaUtilLocale:(JavaUtilLocale *)locale
                withJavaUtilDate:(JavaUtilDate *)centuryStart {
  OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(self, pattern, timeZone, locale, centuryStart);
  return self;
}

- (void)init__WithJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar {
  OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(self, definingCalendar);
}

+ (jboolean)isFormatLetterWithChar:(jchar)c {
  return OrgApacheCommonsLang3TimeFastDateParser_isFormatLetterWithChar_(c);
}

- (NSString *)getPattern {
  return pattern_;
}

- (JavaUtilTimeZone *)getTimeZone {
  return timeZone_;
}

- (JavaUtilLocale *)getLocale {
  return locale_;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[OrgApacheCommonsLang3TimeFastDateParser class]])) {
    return false;
  }
  OrgApacheCommonsLang3TimeFastDateParser *other = (OrgApacheCommonsLang3TimeFastDateParser *) cast_chk(obj, [OrgApacheCommonsLang3TimeFastDateParser class]);
  return [((NSString *) nil_chk(pattern_)) isEqual:((OrgApacheCommonsLang3TimeFastDateParser *) nil_chk(other))->pattern_] && [((JavaUtilTimeZone *) nil_chk(timeZone_)) isEqual:other->timeZone_] && [((JavaUtilLocale *) nil_chk(locale_)) isEqual:other->locale_];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk(pattern_)) hash]) + 13 * (((jint) [((JavaUtilTimeZone *) nil_chk(timeZone_)) hash]) + 13 * ((jint) [((JavaUtilLocale *) nil_chk(locale_)) hash]));
}

- (NSString *)description {
  return JreStrcat("$$C@C$C", @"FastDateParser[", pattern_, ',', locale_, ',', [((JavaUtilTimeZone *) nil_chk(timeZone_)) getID], ']');
}

- (void)readObjectWithJavaIoObjectInputStream:(JavaIoObjectInputStream *)inArg {
  [((JavaIoObjectInputStream *) nil_chk(inArg)) defaultReadObject];
  JavaUtilCalendar *definingCalendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone_, locale_);
  OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(self, definingCalendar);
}

- (id)parseObjectWithNSString:(NSString *)source {
  return [self parseWithNSString:source];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source {
  JavaTextParsePosition *pp = create_JavaTextParsePosition_initWithInt_(0);
  JavaUtilDate *date = [self parseWithNSString:source withJavaTextParsePosition:pp];
  if (date == nil) {
    if ([((JavaUtilLocale *) nil_chk(locale_)) isEqual:OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL]) {
      @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$@$$", @"(The ", locale_, @" locale does not support dates before 1868 AD)\nUnparseable date: \"", source), [pp getErrorIndex]);
    }
    @throw create_JavaTextParseException_initWithNSString_withInt_(JreStrcat("$$", @"Unparseable date: ", source), [pp getErrorIndex]);
  }
  return date;
}

- (id)parseObjectWithNSString:(NSString *)source
    withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  return [self parseWithNSString:source withJavaTextParsePosition:pos];
}

- (JavaUtilDate *)parseWithNSString:(NSString *)source
          withJavaTextParsePosition:(JavaTextParsePosition *)pos {
  JavaUtilCalendar *cal = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone_, locale_);
  [((JavaUtilCalendar *) nil_chk(cal)) clear];
  return [self parseWithNSString:source withJavaTextParsePosition:pos withJavaUtilCalendar:cal] ? [cal getTime] : nil;
}

- (jboolean)parseWithNSString:(NSString *)source
    withJavaTextParsePosition:(JavaTextParsePosition *)pos
         withJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  id<JavaUtilListIterator> lt = [((id<JavaUtilList>) nil_chk(patterns_)) listIterator];
  while ([((id<JavaUtilListIterator>) nil_chk(lt)) hasNext]) {
    OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *pattern = [lt next];
    jint maxWidth = [((OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *) nil_chk(pattern)) getMaxWidthWithJavaUtilListIterator:lt];
    if (![((OrgApacheCommonsLang3TimeFastDateParser_Strategy *) nil_chk(pattern->strategy_)) parseWithOrgApacheCommonsLang3TimeFastDateParser:self withJavaUtilCalendar:calendar withNSString:source withJavaTextParsePosition:pos withInt:maxWidth]) {
      return false;
    }
  }
  return true;
}

+ (JavaLangStringBuilder *)simpleQuoteWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                                   withNSString:(NSString *)value {
  return OrgApacheCommonsLang3TimeFastDateParser_simpleQuoteWithJavaLangStringBuilder_withNSString_(sb, value);
}

+ (id<JavaUtilMap>)appendDisplayNamesWithJavaUtilCalendar:(JavaUtilCalendar *)cal
                                       withJavaUtilLocale:(JavaUtilLocale *)locale
                                                  withInt:(jint)field
                                withJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  return OrgApacheCommonsLang3TimeFastDateParser_appendDisplayNamesWithJavaUtilCalendar_withJavaUtilLocale_withInt_withJavaLangStringBuilder_(cal, locale, field, regex);
}

- (jint)adjustYearWithInt:(jint)twoDigitYear {
  return OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(self, twoDigitYear);
}

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithChar:(jchar)f
                                                                  withInt:(jint)width
                                                     withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar {
  return OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithChar_withInt_withJavaUtilCalendar_(self, f, width, definingCalendar);
}

+ (id<JavaUtilConcurrentConcurrentMap>)getCacheWithInt:(jint)field {
  return OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(field);
}

- (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getLocaleSpecificStrategyWithInt:(jint)field
                                                                  withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar {
  return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, field, definingCalendar);
}

- (void)dealloc {
  RELEASE_(pattern_);
  RELEASE_(timeZone_);
  RELEASE_(locale_);
  RELEASE_(patterns_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x4, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilTimeZone;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 12, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, 15, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 16, 14, 15, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 18, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0xa, 19, 20, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 21, 22, -1, 23, -1, -1 },
    { NULL, "I", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentConcurrentMap;", 0xa, 28, 25, -1, 29, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", 0x2, 30, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:withJavaUtilTimeZone:withJavaUtilLocale:);
  methods[1].selector = @selector(initWithNSString:withJavaUtilTimeZone:withJavaUtilLocale:withJavaUtilDate:);
  methods[2].selector = @selector(init__WithJavaUtilCalendar:);
  methods[3].selector = @selector(isFormatLetterWithChar:);
  methods[4].selector = @selector(getPattern);
  methods[5].selector = @selector(getTimeZone);
  methods[6].selector = @selector(getLocale);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(readObjectWithJavaIoObjectInputStream:);
  methods[11].selector = @selector(parseObjectWithNSString:);
  methods[12].selector = @selector(parseWithNSString:);
  methods[13].selector = @selector(parseObjectWithNSString:withJavaTextParsePosition:);
  methods[14].selector = @selector(parseWithNSString:withJavaTextParsePosition:);
  methods[15].selector = @selector(parseWithNSString:withJavaTextParsePosition:withJavaUtilCalendar:);
  methods[16].selector = @selector(simpleQuoteWithJavaLangStringBuilder:withNSString:);
  methods[17].selector = @selector(appendDisplayNamesWithJavaUtilCalendar:withJavaUtilLocale:withInt:withJavaLangStringBuilder:);
  methods[18].selector = @selector(adjustYearWithInt:);
  methods[19].selector = @selector(getStrategyWithChar:withInt:withJavaUtilCalendar:);
  methods[20].selector = @selector(getCacheWithInt:);
  methods[21].selector = @selector(getLocaleSpecificStrategyWithInt:withJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3TimeFastDateParser_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "JAPANESE_IMPERIAL", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x18, -1, 32, -1, -1 },
    { "pattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timeZone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "century_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "startYear_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "patterns_", "LJavaUtilList;", .constantValue.asLong = 0, 0x82, -1, -1, 33, -1 },
    { "LONGER_FIRST_LOWERCASE", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 34, 35, -1 },
    { "caches", "[LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x1a, -1, 36, 37, -1 },
    { "ABBREVIATED_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "NUMBER_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "LITERAL_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "WEEK_OF_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "WEEK_OF_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 42, -1, -1 },
    { "DAY_OF_YEAR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
    { "DAY_OF_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "DAY_OF_WEEK_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "DAY_OF_WEEK_IN_MONTH_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 46, -1, -1 },
    { "HOUR_OF_DAY_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 47, -1, -1 },
    { "HOUR24_OF_DAY_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "HOUR12_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "HOUR_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "MINUTE_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 51, -1, -1 },
    { "SECOND_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "MILLISECOND_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilTimeZone;LJavaUtilLocale;", "LNSString;LJavaUtilTimeZone;LJavaUtilLocale;LJavaUtilDate;", "init", "LJavaUtilCalendar;", "isFormatLetter", "C", "equals", "LNSObject;", "hashCode", "toString", "readObject", "LJavaIoObjectInputStream;", "LJavaIoIOException;LJavaLangClassNotFoundException;", "parseObject", "LNSString;", "LJavaTextParseException;", "parse", "LNSString;LJavaTextParsePosition;", "LNSString;LJavaTextParsePosition;LJavaUtilCalendar;", "simpleQuote", "LJavaLangStringBuilder;LNSString;", "appendDisplayNames", "LJavaUtilCalendar;LJavaUtilLocale;ILJavaLangStringBuilder;", "(Ljava/util/Calendar;Ljava/util/Locale;ILjava/lang/StringBuilder;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "adjustYear", "I", "getStrategy", "CILJavaUtilCalendar;", "getCache", "(I)Ljava/util/concurrent/ConcurrentMap<Ljava/util/Locale;Lorg/apache/commons/lang3/time/FastDateParser$Strategy;>;", "getLocaleSpecificStrategy", "ILJavaUtilCalendar;", &OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL, "Ljava/util/List<Lorg/apache/commons/lang3/time/FastDateParser$StrategyAndWidth;>;", &OrgApacheCommonsLang3TimeFastDateParser_LONGER_FIRST_LOWERCASE, "Ljava/util/Comparator<Ljava/lang/String;>;", &OrgApacheCommonsLang3TimeFastDateParser_caches, "[Ljava/util/concurrent/ConcurrentMap<Ljava/util/Locale;Lorg/apache/commons/lang3/time/FastDateParser$Strategy;>;", &OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY, "LOrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth;LOrgApacheCommonsLang3TimeFastDateParser_StrategyParser;LOrgApacheCommonsLang3TimeFastDateParser_Strategy;LOrgApacheCommonsLang3TimeFastDateParser_PatternStrategy;LOrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy;LOrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy;LOrgApacheCommonsLang3TimeFastDateParser_NumberStrategy;LOrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy;LOrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser = { "FastDateParser", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x1, 22, 26, -1, 54, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDateParser class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL, new_JavaUtilLocale_initWithNSString_withNSString_withNSString_(@"ja", @"JP", @"JP"));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_LONGER_FIRST_LOWERCASE, new_OrgApacheCommonsLang3TimeFastDateParser_1_init());
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_caches, [IOSObjectArray newArrayWithLength:JavaUtilCalendar_FIELD_COUNT type:JavaUtilConcurrentConcurrentMap_class_()]);
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(JavaUtilCalendar_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(JavaUtilCalendar_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_WEEK_OF_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_WEEK_OF_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_DAY_OF_YEAR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_DAY_OF_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(JavaUtilCalendar_DAY_OF_WEEK));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_DAY_OF_WEEK_IN_MONTH));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_HOUR_OF_DAY));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(JavaUtilCalendar_HOUR_OF_DAY));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(JavaUtilCalendar_HOUR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_HOUR));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_MINUTE));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_SECOND));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(JavaUtilCalendar_MILLISECOND));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDateParser)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser *self, NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(self, pattern, timeZone, locale, nil);
}

OrgApacheCommonsLang3TimeFastDateParser *new_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_, pattern, timeZone, locale)
}

OrgApacheCommonsLang3TimeFastDateParser *create_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_, pattern, timeZone, locale)
}

void OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(OrgApacheCommonsLang3TimeFastDateParser *self, NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart) {
  NSObject_init(self);
  JreStrongAssign(&self->pattern_, pattern);
  JreStrongAssign(&self->timeZone_, timeZone);
  JreStrongAssign(&self->locale_, locale);
  JavaUtilCalendar *definingCalendar = JavaUtilCalendar_getInstanceWithJavaUtilTimeZone_withJavaUtilLocale_(timeZone, locale);
  jint centuryStartYear;
  if (centuryStart != nil) {
    [((JavaUtilCalendar *) nil_chk(definingCalendar)) setTimeWithJavaUtilDate:centuryStart];
    centuryStartYear = [definingCalendar getWithInt:JavaUtilCalendar_YEAR];
  }
  else if ([((JavaUtilLocale *) nil_chk(locale)) isEqual:OrgApacheCommonsLang3TimeFastDateParser_JAPANESE_IMPERIAL]) {
    centuryStartYear = 0;
  }
  else {
    [((JavaUtilCalendar *) nil_chk(definingCalendar)) setTimeWithJavaUtilDate:create_JavaUtilDate_init()];
    centuryStartYear = [definingCalendar getWithInt:JavaUtilCalendar_YEAR] - 80;
  }
  self->century_ = centuryStartYear / 100 * 100;
  self->startYear_ = centuryStartYear - self->century_;
  OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(self, definingCalendar);
}

OrgApacheCommonsLang3TimeFastDateParser *new_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_, pattern, timeZone, locale, centuryStart)
}

OrgApacheCommonsLang3TimeFastDateParser *create_OrgApacheCommonsLang3TimeFastDateParser_initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_(NSString *pattern, JavaUtilTimeZone *timeZone, JavaUtilLocale *locale, JavaUtilDate *centuryStart) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser, initWithNSString_withJavaUtilTimeZone_withJavaUtilLocale_withJavaUtilDate_, pattern, timeZone, locale, centuryStart)
}

void OrgApacheCommonsLang3TimeFastDateParser_init__WithJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, JavaUtilCalendar *definingCalendar) {
  JreStrongAssignAndConsume(&self->patterns_, new_JavaUtilArrayList_init());
  OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *fm = create_OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(self, self->pattern_, definingCalendar);
  for (; ; ) {
    OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *field = [fm getNextStrategy];
    if (field == nil) {
      break;
    }
    [((id<JavaUtilList>) nil_chk(self->patterns_)) addWithId:field];
  }
}

jboolean OrgApacheCommonsLang3TimeFastDateParser_isFormatLetterWithChar_(jchar c) {
  OrgApacheCommonsLang3TimeFastDateParser_initialize();
  return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}

JavaLangStringBuilder *OrgApacheCommonsLang3TimeFastDateParser_simpleQuoteWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *value) {
  OrgApacheCommonsLang3TimeFastDateParser_initialize();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(value)) length]); ++i) {
    jchar c = [value charAtWithInt:i];
    switch (c) {
      case '\\':
      case '^':
      case '$':
      case '.':
      case '|':
      case '?':
      case '*':
      case '+':
      case '(':
      case ')':
      case '[':
      case '{':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'\\'];
      default:
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:c];
    }
  }
  return sb;
}

id<JavaUtilMap> OrgApacheCommonsLang3TimeFastDateParser_appendDisplayNamesWithJavaUtilCalendar_withJavaUtilLocale_withInt_withJavaLangStringBuilder_(JavaUtilCalendar *cal, JavaUtilLocale *locale, jint field, JavaLangStringBuilder *regex) {
  OrgApacheCommonsLang3TimeFastDateParser_initialize();
  id<JavaUtilMap> values = create_JavaUtilHashMap_init();
  id<JavaUtilMap> displayNames = [((JavaUtilCalendar *) nil_chk(cal)) getDisplayNamesWithInt:field withInt:JavaUtilCalendar_ALL_STYLES withJavaUtilLocale:locale];
  JavaUtilTreeSet *sorted = create_JavaUtilTreeSet_initWithJavaUtilComparator_(OrgApacheCommonsLang3TimeFastDateParser_LONGER_FIRST_LOWERCASE);
  for (id<JavaUtilMap_Entry> __strong displayName in nil_chk([((id<JavaUtilMap>) nil_chk(displayNames)) entrySet])) {
    NSString *key = [((NSString *) nil_chk([((id<JavaUtilMap_Entry>) nil_chk(displayName)) getKey])) java_lowercaseStringWithJRELocale:locale];
    if ([sorted addWithId:key]) {
      [values putWithId:key withId:[displayName getValue]];
    }
  }
  for (NSString * __strong symbol in sorted) {
    [((JavaLangStringBuilder *) nil_chk(OrgApacheCommonsLang3TimeFastDateParser_simpleQuoteWithJavaLangStringBuilder_withNSString_(regex, symbol))) appendWithChar:'|'];
  }
  return values;
}

jint OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(OrgApacheCommonsLang3TimeFastDateParser *self, jint twoDigitYear) {
  jint trial = self->century_ + twoDigitYear;
  return twoDigitYear >= self->startYear_ ? trial : trial + 100;
}

OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithChar_withInt_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, jchar f, jint width, JavaUtilCalendar *definingCalendar) {
  switch (f) {
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$C$", @"Format '", f, @"' not supported"));
    case 'D':
    return OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_YEAR_STRATEGY;
    case 'E':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_DAY_OF_WEEK, definingCalendar);
    case 'F':
    return OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_IN_MONTH_STRATEGY;
    case 'G':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_ERA, definingCalendar);
    case 'H':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR_OF_DAY_STRATEGY;
    case 'K':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR_STRATEGY;
    case 'M':
    return width >= 3 ? OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_MONTH, definingCalendar) : OrgApacheCommonsLang3TimeFastDateParser_NUMBER_MONTH_STRATEGY;
    case 'S':
    return OrgApacheCommonsLang3TimeFastDateParser_MILLISECOND_STRATEGY;
    case 'W':
    return OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_MONTH_STRATEGY;
    case 'a':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_AM_PM, definingCalendar);
    case 'd':
    return OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_MONTH_STRATEGY;
    case 'h':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR12_STRATEGY;
    case 'k':
    return OrgApacheCommonsLang3TimeFastDateParser_HOUR24_OF_DAY_STRATEGY;
    case 'm':
    return OrgApacheCommonsLang3TimeFastDateParser_MINUTE_STRATEGY;
    case 's':
    return OrgApacheCommonsLang3TimeFastDateParser_SECOND_STRATEGY;
    case 'u':
    return OrgApacheCommonsLang3TimeFastDateParser_DAY_OF_WEEK_STRATEGY;
    case 'w':
    return OrgApacheCommonsLang3TimeFastDateParser_WEEK_OF_YEAR_STRATEGY;
    case 'y':
    case 'Y':
    return width > 2 ? OrgApacheCommonsLang3TimeFastDateParser_LITERAL_YEAR_STRATEGY : OrgApacheCommonsLang3TimeFastDateParser_ABBREVIATED_YEAR_STRATEGY;
    case 'X':
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_(width);
    case 'Z':
    if (width == 2) {
      return JreLoadStatic(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, ISO_8601_3_STRATEGY);
    }
    case 'z':
    return OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(self, JavaUtilCalendar_ZONE_OFFSET, definingCalendar);
  }
}

id<JavaUtilConcurrentConcurrentMap> OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_initialize();
  @synchronized(OrgApacheCommonsLang3TimeFastDateParser_caches) {
    if (IOSObjectArray_Get(nil_chk(OrgApacheCommonsLang3TimeFastDateParser_caches), field) == nil) {
      IOSObjectArray_SetAndConsume(OrgApacheCommonsLang3TimeFastDateParser_caches, field, new_JavaUtilConcurrentConcurrentHashMap_initWithInt_(3));
    }
    return IOSObjectArray_Get(OrgApacheCommonsLang3TimeFastDateParser_caches, field);
  }
}

OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_getLocaleSpecificStrategyWithInt_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *self, jint field, JavaUtilCalendar *definingCalendar) {
  id<JavaUtilConcurrentConcurrentMap> cache = OrgApacheCommonsLang3TimeFastDateParser_getCacheWithInt_(field);
  OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(cache)) getWithId:self->locale_];
  if (strategy == nil) {
    strategy = field == JavaUtilCalendar_ZONE_OFFSET ? create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(self->locale_) : (id) create_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(field, definingCalendar, self->locale_);
    OrgApacheCommonsLang3TimeFastDateParser_Strategy *inCache = [cache putIfAbsentWithId:self->locale_ withId:strategy];
    if (inCache != nil) {
      return inCache;
    }
  }
  return strategy;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser)

@implementation OrgApacheCommonsLang3TimeFastDateParser_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFastDateParser_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(NSString *)left
               withId:(NSString *)right {
  return [((NSString *) nil_chk(right)) compareToWithId:left];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LNSString;LNSString;", "LOrgApacheCommonsLang3TimeFastDateParser;", "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_1 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_1;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_1_init(OrgApacheCommonsLang3TimeFastDateParser_1 *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TimeFastDateParser_1 *new_OrgApacheCommonsLang3TimeFastDateParser_1_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_1, init)
}

OrgApacheCommonsLang3TimeFastDateParser_1 *create_OrgApacheCommonsLang3TimeFastDateParser_1_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_1, init)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy:(OrgApacheCommonsLang3TimeFastDateParser_Strategy *)strategy
                                                                 withInt:(jint)width {
  OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(self, strategy, width);
  return self;
}

- (jint)getMaxWidthWithJavaUtilListIterator:(id<JavaUtilListIterator>)lt {
  if (![((OrgApacheCommonsLang3TimeFastDateParser_Strategy *) nil_chk(strategy_)) isNumber] || ![((id<JavaUtilListIterator>) nil_chk(lt)) hasNext]) {
    return 0;
  }
  OrgApacheCommonsLang3TimeFastDateParser_Strategy *nextStrategy = ((OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *) nil_chk([((id<JavaUtilListIterator>) nil_chk(lt)) next]))->strategy_;
  [lt previous];
  return [nextStrategy isNumber] ? width_ : 0;
}

- (void)dealloc {
  RELEASE_(strategy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy:withInt:);
  methods[1].selector = @selector(getMaxWidthWithJavaUtilListIterator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "strategy_", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;I", "getMaxWidth", "LJavaUtilListIterator;", "(Ljava/util/ListIterator<Lorg/apache/commons/lang3/time/FastDateParser$StrategyAndWidth;>;)I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth = { "StrategyAndWidth", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 2, 2, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *self, OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy, jint width) {
  NSObject_init(self);
  JreStrongAssign(&self->strategy_, strategy);
  self->width_ = width;
}

OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *new_OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy, jint width) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth, initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_, strategy, width)
}

OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *create_OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(OrgApacheCommonsLang3TimeFastDateParser_Strategy *strategy, jint width) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth, initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_, strategy, width)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth)

@implementation OrgApacheCommonsLang3TimeFastDateParser_StrategyParser

- (instancetype)initWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)outer$
                                                   withNSString:(NSString *)pattern
                                           withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar {
  OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(self, outer$, pattern, definingCalendar);
  return self;
}

- (OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *)getNextStrategy {
  if (currentIdx_ >= ((jint) [((NSString *) nil_chk(pattern_)) length])) {
    return nil;
  }
  jchar c = [pattern_ charAtWithInt:currentIdx_];
  if (OrgApacheCommonsLang3TimeFastDateParser_isFormatLetterWithChar_(c)) {
    return OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_letterPatternWithChar_(self, c);
  }
  return OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_literal(self);
}

- (OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *)letterPatternWithChar:(jchar)c {
  return OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_letterPatternWithChar_(self, c);
}

- (OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *)literal {
  return OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_literal(self);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(pattern_);
  RELEASE_(definingCalendar_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgApacheCommonsLang3TimeFastDateParser:withNSString:withJavaUtilCalendar:);
  methods[1].selector = @selector(getNextStrategy);
  methods[2].selector = @selector(letterPatternWithChar:);
  methods[3].selector = @selector(literal);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgApacheCommonsLang3TimeFastDateParser;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "pattern_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "definingCalendar_", "LJavaUtilCalendar;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentIdx_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LJavaUtilCalendar;", "letterPattern", "C", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_StrategyParser = { "StrategyParser", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x2, 4, 4, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_StrategyParser;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *self, OrgApacheCommonsLang3TimeFastDateParser *outer$, NSString *pattern, JavaUtilCalendar *definingCalendar) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssign(&self->pattern_, pattern);
  JreStrongAssign(&self->definingCalendar_, definingCalendar);
}

OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *new_OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *outer$, NSString *pattern, JavaUtilCalendar *definingCalendar) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser, initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_, outer$, pattern, definingCalendar)
}

OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *create_OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_(OrgApacheCommonsLang3TimeFastDateParser *outer$, NSString *pattern, JavaUtilCalendar *definingCalendar) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser, initWithOrgApacheCommonsLang3TimeFastDateParser_withNSString_withJavaUtilCalendar_, outer$, pattern, definingCalendar)
}

OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_letterPatternWithChar_(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *self, jchar c) {
  jint begin = self->currentIdx_;
  while (++self->currentIdx_ < ((jint) [((NSString *) nil_chk(self->pattern_)) length])) {
    if ([self->pattern_ charAtWithInt:self->currentIdx_] != c) {
      break;
    }
  }
  jint width = self->currentIdx_ - begin;
  return create_OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(OrgApacheCommonsLang3TimeFastDateParser_getStrategyWithChar_withInt_withJavaUtilCalendar_(self->this$0_, c, width, self->definingCalendar_), width);
}

OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth *OrgApacheCommonsLang3TimeFastDateParser_StrategyParser_literal(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser *self) {
  jboolean activeQuote = false;
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  while (self->currentIdx_ < ((jint) [((NSString *) nil_chk(self->pattern_)) length])) {
    jchar c = [self->pattern_ charAtWithInt:self->currentIdx_];
    if (!activeQuote && OrgApacheCommonsLang3TimeFastDateParser_isFormatLetterWithChar_(c)) {
      break;
    }
    else if (c == '\'' && (++self->currentIdx_ == ((jint) [self->pattern_ length]) || [self->pattern_ charAtWithInt:self->currentIdx_] != '\'')) {
      activeQuote = !activeQuote;
      continue;
    }
    ++self->currentIdx_;
    [sb appendWithChar:c];
  }
  if (activeQuote) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Unterminated quote");
  }
  NSString *formatField = [sb description];
  return create_OrgApacheCommonsLang3TimeFastDateParser_StrategyAndWidth_initWithOrgApacheCommonsLang3TimeFastDateParser_Strategy_withInt_(create_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(formatField), ((jint) [((NSString *) nil_chk(formatField)) length]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_StrategyParser)

@implementation OrgApacheCommonsLang3TimeFastDateParser_Strategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isNumber {
  return false;
}

- (jboolean)parseWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                        withJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                                withNSString:(NSString *)source
                                   withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                                     withInt:(jint)maxWidth {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isNumber);
  methods[2].selector = @selector(parseWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:withJavaTextParsePosition:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parse", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;LJavaTextParsePosition;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_Strategy = { "Strategy", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x40a, 3, 0, 2, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_Strategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(OrgApacheCommonsLang3TimeFastDateParser_Strategy *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_Strategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)createPatternWithJavaLangStringBuilder:(JavaLangStringBuilder *)regex {
  [self createPatternWithNSString:[((JavaLangStringBuilder *) nil_chk(regex)) description]];
}

- (void)createPatternWithNSString:(NSString *)regex {
  JreStrongAssign(&self->pattern_, JavaUtilRegexPattern_compileWithNSString_(regex));
}

- (jboolean)isNumber {
  return false;
}

- (jboolean)parseWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                        withJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                                withNSString:(NSString *)source
                                   withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                                     withInt:(jint)maxWidth {
  JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:[((NSString *) nil_chk(source)) java_substring:[((JavaTextParsePosition *) nil_chk(pos)) getIndex]]];
  if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) lookingAt]) {
    [pos setErrorIndexWithInt:[pos getIndex]];
    return false;
  }
  [pos setIndexWithInt:[pos getIndex] + [matcher endWithInt:1]];
  [self setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:parser withJavaUtilCalendar:calendar withNSString:[matcher groupWithInt:1]];
  return true;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(pattern_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x400, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createPatternWithJavaLangStringBuilder:);
  methods[2].selector = @selector(createPatternWithNSString:);
  methods[3].selector = @selector(isNumber);
  methods[4].selector = @selector(parseWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:withJavaTextParsePosition:withInt:);
  methods[5].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "createPattern", "LJavaLangStringBuilder;", "LNSString;", "parse", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;LJavaTextParsePosition;I", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy = { "PatternStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x40a, 6, 1, 7, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy_init(OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy *self) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy

- (instancetype)initWithNSString:(NSString *)formatField {
  OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(self, formatField);
  return self;
}

- (jboolean)isNumber {
  return false;
}

- (jboolean)parseWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                        withJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                                withNSString:(NSString *)source
                                   withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                                     withInt:(jint)maxWidth {
  for (jint idx = 0; idx < ((jint) [((NSString *) nil_chk(formatField_)) length]); ++idx) {
    jint sIdx = idx + [((JavaTextParsePosition *) nil_chk(pos)) getIndex];
    if (sIdx == ((jint) [((NSString *) nil_chk(source)) length])) {
      [pos setErrorIndexWithInt:sIdx];
      return false;
    }
    if ([formatField_ charAtWithInt:idx] != [source charAtWithInt:sIdx]) {
      [pos setErrorIndexWithInt:sIdx];
      return false;
    }
  }
  [((JavaTextParsePosition *) nil_chk(pos)) setIndexWithInt:((jint) [formatField_ length]) + [pos getIndex]];
  return true;
}

- (void)dealloc {
  RELEASE_(formatField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isNumber);
  methods[2].selector = @selector(parseWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:withJavaTextParsePosition:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "formatField_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "parse", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;LJavaTextParsePosition;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy = { "CopyQuotedStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 1, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *self, NSString *formatField) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  JreStrongAssign(&self->formatField_, formatField);
}

OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy, initWithNSString_, formatField)
}

OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy_initWithNSString_(NSString *formatField) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy, initWithNSString_, formatField)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_CopyQuotedStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy

- (instancetype)initWithInt:(jint)field
       withJavaUtilCalendar:(JavaUtilCalendar *)definingCalendar
         withJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(self, field, definingCalendar, locale);
  return self;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  JavaLangInteger *iVal = [((id<JavaUtilMap>) nil_chk(lKeyValues_)) getWithId:[((NSString *) nil_chk(value)) java_lowercaseStringWithJRELocale:locale_]];
  [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:field_ withInt:[((JavaLangInteger *) nil_chk(iVal)) intValue]];
}

- (void)dealloc {
  RELEASE_(locale_);
  RELEASE_(lKeyValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withJavaUtilCalendar:withJavaUtilLocale:);
  methods[1].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "lKeyValues_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "ILJavaUtilCalendar;LJavaUtilLocale;", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy = { "CaseInsensitiveTextStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 2, 3, 4, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *self, jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy_init(self);
  self->field_ = field;
  JreStrongAssign(&self->locale_, locale);
  JavaLangStringBuilder *regex = create_JavaLangStringBuilder_init();
  [regex appendWithNSString:@"((?iu)"];
  JreStrongAssign(&self->lKeyValues_, OrgApacheCommonsLang3TimeFastDateParser_appendDisplayNamesWithJavaUtilCalendar_withJavaUtilLocale_withInt_withJavaLangStringBuilder_(definingCalendar, locale, field, regex));
  [regex setLengthWithInt:[regex length] - 1];
  [regex appendWithNSString:@")"];
  [self createPatternWithJavaLangStringBuilder:regex];
}

OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, initWithInt_withJavaUtilCalendar_withJavaUtilLocale_, field, definingCalendar, locale)
}

OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy_initWithInt_withJavaUtilCalendar_withJavaUtilLocale_(jint field, JavaUtilCalendar *definingCalendar, JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy, initWithInt_withJavaUtilCalendar_withJavaUtilLocale_, field, definingCalendar, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_CaseInsensitiveTextStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
  return self;
}

- (jboolean)isNumber {
  return true;
}

- (jboolean)parseWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                        withJavaUtilCalendar:(JavaUtilCalendar *)calendar
                                                withNSString:(NSString *)source
                                   withJavaTextParsePosition:(JavaTextParsePosition *)pos
                                                     withInt:(jint)maxWidth {
  jint idx = [((JavaTextParsePosition *) nil_chk(pos)) getIndex];
  jint last = ((jint) [((NSString *) nil_chk(source)) length]);
  if (maxWidth == 0) {
    for (; idx < last; ++idx) {
      jchar c = [source charAtWithInt:idx];
      if (!JavaLangCharacter_isWhitespaceWithChar_(c)) {
        break;
      }
    }
    [pos setIndexWithInt:idx];
  }
  else {
    jint end = idx + maxWidth;
    if (last > end) {
      last = end;
    }
  }
  for (; idx < last; ++idx) {
    jchar c = [source charAtWithInt:idx];
    if (!JavaLangCharacter_isDigitWithChar_(c)) {
      break;
    }
  }
  if ([pos getIndex] == idx) {
    [pos setErrorIndexWithInt:idx];
    return false;
  }
  jint value = JavaLangInteger_parseIntWithNSString_([source java_substring:[pos getIndex] endIndex:idx]);
  [pos setIndexWithInt:idx];
  [((JavaUtilCalendar *) nil_chk(calendar)) setWithInt:field_ withInt:[self modifyWithOrgApacheCommonsLang3TimeFastDateParser:parser withInt:value]];
  return true;
}

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue {
  return iValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(isNumber);
  methods[2].selector = @selector(parseWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:withJavaTextParsePosition:withInt:);
  methods[3].selector = @selector(modifyWithOrgApacheCommonsLang3TimeFastDateParser:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "field_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "parse", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;LJavaTextParsePosition;I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy = { "NumberStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 4, 1, 5, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_Strategy_init(self);
  self->field_ = field;
}

OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy, initWithInt_, field)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_2

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue {
  return iValue < 100 ? OrgApacheCommonsLang3TimeFastDateParser_adjustYearWithInt_(nil_chk(parser), iValue) : iValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithOrgApacheCommonsLang3TimeFastDateParser:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_2 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_2;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_2 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_2 *new_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_2, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_2 *create_OrgApacheCommonsLang3TimeFastDateParser_2_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_2, initWithInt_, field)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  if ([((NSString *) nil_chk(value)) charAtWithInt:0] == '+' || [value charAtWithInt:0] == '-') {
    JavaUtilTimeZone *tz = JavaUtilTimeZone_getTimeZoneWithNSString_(JreStrcat("$$", @"GMT", value));
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:tz];
  }
  else if ([value java_regionMatches:true thisOffset:0 aString:@"GMT" otherOffset:0 count:3]) {
    JavaUtilTimeZone *tz = JavaUtilTimeZone_getTimeZoneWithNSString_([value uppercaseString]);
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:tz];
  }
  else {
    OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *tzInfo = [((id<JavaUtilMap>) nil_chk(tzNames_)) getWithId:[value java_lowercaseStringWithJRELocale:locale_]];
    [((JavaUtilCalendar *) nil_chk(cal)) setWithInt:JavaUtilCalendar_DST_OFFSET withInt:((OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *) nil_chk(tzInfo))->dstOffset_];
    [cal setWithInt:JavaUtilCalendar_ZONE_OFFSET withInt:[((JavaUtilTimeZone *) nil_chk(tzInfo->zone_)) getRawOffset]];
  }
}

- (void)dealloc {
  RELEASE_(locale_);
  RELEASE_(tzNames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilLocale:);
  methods[1].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RFC_822_TIME_ZONE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "GMT_OPTION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tzNames_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "ID", "I", .constantValue.asInt = OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_ID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", &OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_RFC_822_TIME_ZONE, &OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_GMT_OPTION, "Ljava/util/Map<Ljava/lang/String;Lorg/apache/commons/lang3/time/FastDateParser$TimeZoneStrategy$TzInfo;>;", "LOrgApacheCommonsLang3TimeFastDateParser;", "LOrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy = { "TimeZoneStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x8, 2, 5, 6, 7, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *self, JavaUtilLocale *locale) {
  OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy_init(self);
  JreStrongAssignAndConsume(&self->tzNames_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->locale_, locale);
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [sb appendWithNSString:JreStrcat("$$C$", @"((?iu)", OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_RFC_822_TIME_ZONE, '|', OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_GMT_OPTION)];
  id<JavaUtilSet> sorted = create_JavaUtilTreeSet_initWithJavaUtilComparator_(JreLoadStatic(OrgApacheCommonsLang3TimeFastDateParser, LONGER_FIRST_LOWERCASE));
  IOSObjectArray *zones = [((JavaTextDateFormatSymbols *) nil_chk(JavaTextDateFormatSymbols_getInstanceWithJavaUtilLocale_(locale))) getZoneStrings];
  {
    IOSObjectArray *a__ = zones;
    IOSObjectArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *zoneNames = *b__++;
      NSString *tzId = IOSObjectArray_Get(nil_chk(zoneNames), OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_ID);
      if ([((NSString *) nil_chk(tzId)) java_equalsIgnoreCase:@"GMT"]) {
        continue;
      }
      JavaUtilTimeZone *tz = JavaUtilTimeZone_getTimeZoneWithNSString_(tzId);
      OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *standard = create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(tz, false);
      OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *tzInfo = standard;
      for (jint i = 1; i < zoneNames->size_; ++i) {
        switch (i) {
          case 3:
          tzInfo = create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(tz, true);
          break;
          case 5:
          tzInfo = standard;
          break;
        }
        NSString *key = [((NSString *) nil_chk(IOSObjectArray_Get(zoneNames, i))) java_lowercaseStringWithJRELocale:locale];
        if ([sorted addWithId:key]) {
          [self->tzNames_ putWithId:key withId:tzInfo];
        }
      }
    }
  }
  for (NSString * __strong zoneName in sorted) {
    OrgApacheCommonsLang3TimeFastDateParser_simpleQuoteWithJavaLangStringBuilder_withNSString_([sb appendWithChar:'|'], zoneName);
  }
  [sb appendWithNSString:@")"];
  [self createPatternWithJavaLangStringBuilder:sb];
}

OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, initWithJavaUtilLocale_, locale)
}

OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy, initWithJavaUtilLocale_, locale)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo

- (instancetype)initWithJavaUtilTimeZone:(JavaUtilTimeZone *)tz
                             withBoolean:(jboolean)useDst {
  OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(self, tz, useDst);
  return self;
}

- (void)dealloc {
  RELEASE_(zone_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilTimeZone:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "zone_", "LJavaUtilTimeZone;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dstOffset_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilTimeZone;Z", "LOrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo = { "TzInfo", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 1, 2, 1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *self, JavaUtilTimeZone *tz, jboolean useDst) {
  NSObject_init(self);
  JreStrongAssign(&self->zone_, tz);
  self->dstOffset_ = useDst ? [((JavaUtilTimeZone *) nil_chk(tz)) getDSTSavings] : 0;
}

OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *new_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(JavaUtilTimeZone *tz, jboolean useDst) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo, initWithJavaUtilTimeZone_withBoolean_, tz, useDst)
}

OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo *create_OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo_initWithJavaUtilTimeZone_withBoolean_(JavaUtilTimeZone *tz, jboolean useDst) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo, initWithJavaUtilTimeZone_withBoolean_, tz, useDst)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_TimeZoneStrategy_TzInfo)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy

- (instancetype)initWithNSString:(NSString *)pattern {
  OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(self, pattern);
  return self;
}

- (void)setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                          withJavaUtilCalendar:(JavaUtilCalendar *)cal
                                                  withNSString:(NSString *)value {
  if ([((NSString *) nil_chk(value)) isEqual:@"Z"]) {
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(@"UTC")];
  }
  else {
    [((JavaUtilCalendar *) nil_chk(cal)) setTimeZoneWithJavaUtilTimeZone:JavaUtilTimeZone_getTimeZoneWithNSString_(JreStrcat("$$", @"GMT", value))];
  }
}

+ (OrgApacheCommonsLang3TimeFastDateParser_Strategy *)getStrategyWithInt:(jint)tokenLen {
  return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_(tokenLen);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", 0x8, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(setCalendarWithOrgApacheCommonsLang3TimeFastDateParser:withJavaUtilCalendar:withNSString:);
  methods[2].selector = @selector(getStrategyWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ISO_8601_1_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "ISO_8601_2_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "ISO_8601_3_STRATEGY", "LOrgApacheCommonsLang3TimeFastDateParser_Strategy;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setCalendar", "LOrgApacheCommonsLang3TimeFastDateParser;LJavaUtilCalendar;LNSString;", "getStrategy", "I", &OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY, &OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY, "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy = { "ISO8601TimeZoneStrategy", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0xa, 3, 3, 8, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(@"(Z|(?:[+-]\\d{2}))"));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(@"(Z|(?:[+-]\\d{2}\\d{2}))"));
    JreStrongAssignAndConsume(&OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY, new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(@"(Z|(?:[+-]\\d{2}(?::)\\d{2}))"));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)
  }
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *self, NSString *pattern) {
  OrgApacheCommonsLang3TimeFastDateParser_PatternStrategy_init(self);
  [self createPatternWithNSString:pattern];
}

OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *new_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, initWithNSString_, pattern)
}

OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy *create_OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initWithNSString_(NSString *pattern) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy, initWithNSString_, pattern)
}

OrgApacheCommonsLang3TimeFastDateParser_Strategy *OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_getStrategyWithInt_(jint tokenLen) {
  OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_initialize();
  switch (tokenLen) {
    case 1:
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_1_STRATEGY;
    case 2:
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_2_STRATEGY;
    case 3:
    return OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy_ISO_8601_3_STRATEGY;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"invalid number of X");
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeFastDateParser_ISO8601TimeZoneStrategy)

@implementation OrgApacheCommonsLang3TimeFastDateParser_3

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue {
  return iValue - 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithOrgApacheCommonsLang3TimeFastDateParser:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_3 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_3;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_3 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_3 *new_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_3, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_3 *create_OrgApacheCommonsLang3TimeFastDateParser_3_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_3, initWithInt_, field)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_4

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue {
  return iValue != 7 ? iValue + 1 : JavaUtilCalendar_SUNDAY;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithOrgApacheCommonsLang3TimeFastDateParser:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_4 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_4;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_4 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_4 *new_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_4, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_4 *create_OrgApacheCommonsLang3TimeFastDateParser_4_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_4, initWithInt_, field)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_5

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue {
  return iValue == 24 ? 0 : iValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithOrgApacheCommonsLang3TimeFastDateParser:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_5 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_5;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_5 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_5 *new_OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_5, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_5 *create_OrgApacheCommonsLang3TimeFastDateParser_5_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_5, initWithInt_, field)
}

@implementation OrgApacheCommonsLang3TimeFastDateParser_6

- (instancetype)initWithInt:(jint)field {
  OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(self, field);
  return self;
}

- (jint)modifyWithOrgApacheCommonsLang3TimeFastDateParser:(OrgApacheCommonsLang3TimeFastDateParser *)parser
                                                  withInt:(jint)iValue {
  return iValue == 12 ? 0 : iValue;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(modifyWithOrgApacheCommonsLang3TimeFastDateParser:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "I", "modify", "LOrgApacheCommonsLang3TimeFastDateParser;I", "LOrgApacheCommonsLang3TimeFastDateParser;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeFastDateParser_6 = { "", "org.apache.commons.lang3.time", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeFastDateParser_6;
}

@end

void OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(OrgApacheCommonsLang3TimeFastDateParser_6 *self, jint field) {
  OrgApacheCommonsLang3TimeFastDateParser_NumberStrategy_initWithInt_(self, field);
}

OrgApacheCommonsLang3TimeFastDateParser_6 *new_OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(jint field) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeFastDateParser_6, initWithInt_, field)
}

OrgApacheCommonsLang3TimeFastDateParser_6 *create_OrgApacheCommonsLang3TimeFastDateParser_6_initWithInt_(jint field) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeFastDateParser_6, initWithInt_, field)
}
