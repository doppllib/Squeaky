//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/time/CalendarReflection.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3ExceptionExceptionUtils.h"
#include "OrgApacheCommonsLang3TimeCalendarReflection.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/reflect/Method.h"
#include "java/util/Calendar.h"
#include "java/util/GregorianCalendar.h"

@interface OrgApacheCommonsLang3TimeCalendarReflection ()

+ (JavaLangReflectMethod *)getCalendarMethodWithNSString:(NSString *)methodName
                                       withIOSClassArray:(IOSObjectArray *)argTypes;

@end

inline JavaLangReflectMethod *OrgApacheCommonsLang3TimeCalendarReflection_get_IS_WEEK_DATE_SUPPORTED();
static JavaLangReflectMethod *OrgApacheCommonsLang3TimeCalendarReflection_IS_WEEK_DATE_SUPPORTED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeCalendarReflection, IS_WEEK_DATE_SUPPORTED, JavaLangReflectMethod *)

inline JavaLangReflectMethod *OrgApacheCommonsLang3TimeCalendarReflection_get_GET_WEEK_YEAR();
static JavaLangReflectMethod *OrgApacheCommonsLang3TimeCalendarReflection_GET_WEEK_YEAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3TimeCalendarReflection, GET_WEEK_YEAR, JavaLangReflectMethod *)

__attribute__((unused)) static JavaLangReflectMethod *OrgApacheCommonsLang3TimeCalendarReflection_getCalendarMethodWithNSString_withIOSClassArray_(NSString *methodName, IOSObjectArray *argTypes);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsLang3TimeCalendarReflection)

@implementation OrgApacheCommonsLang3TimeCalendarReflection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3TimeCalendarReflection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangReflectMethod *)getCalendarMethodWithNSString:(NSString *)methodName
                                       withIOSClassArray:(IOSObjectArray *)argTypes {
  return OrgApacheCommonsLang3TimeCalendarReflection_getCalendarMethodWithNSString_withIOSClassArray_(methodName, argTypes);
}

+ (jboolean)isWeekDateSupportedWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgApacheCommonsLang3TimeCalendarReflection_isWeekDateSupportedWithJavaUtilCalendar_(calendar);
}

+ (jint)getWeekYearWithJavaUtilCalendar:(JavaUtilCalendar *)calendar {
  return OrgApacheCommonsLang3TimeCalendarReflection_getWeekYearWithJavaUtilCalendar_(calendar);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x8a, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getCalendarMethodWithNSString:withIOSClassArray:);
  methods[2].selector = @selector(isWeekDateSupportedWithJavaUtilCalendar:);
  methods[3].selector = @selector(getWeekYearWithJavaUtilCalendar:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "IS_WEEK_DATE_SUPPORTED", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "GET_WEEK_YEAR", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "getCalendarMethod", "LNSString;[LIOSClass;", "(Ljava/lang/String;[Ljava/lang/Class<*>;)Ljava/lang/reflect/Method;", "isWeekDateSupported", "LJavaUtilCalendar;", "getWeekYear", &OrgApacheCommonsLang3TimeCalendarReflection_IS_WEEK_DATE_SUPPORTED, &OrgApacheCommonsLang3TimeCalendarReflection_GET_WEEK_YEAR };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3TimeCalendarReflection = { "CalendarReflection", "org.apache.commons.lang3.time", ptrTable, methods, fields, 7, 0x0, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgApacheCommonsLang3TimeCalendarReflection;
}

+ (void)initialize {
  if (self == [OrgApacheCommonsLang3TimeCalendarReflection class]) {
    JreStrongAssign(&OrgApacheCommonsLang3TimeCalendarReflection_IS_WEEK_DATE_SUPPORTED, OrgApacheCommonsLang3TimeCalendarReflection_getCalendarMethodWithNSString_withIOSClassArray_(@"isWeekDateSupported", [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]));
    JreStrongAssign(&OrgApacheCommonsLang3TimeCalendarReflection_GET_WEEK_YEAR, OrgApacheCommonsLang3TimeCalendarReflection_getCalendarMethodWithNSString_withIOSClassArray_(@"getWeekYear", [IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsLang3TimeCalendarReflection)
  }
}

@end

void OrgApacheCommonsLang3TimeCalendarReflection_init(OrgApacheCommonsLang3TimeCalendarReflection *self) {
  NSObject_init(self);
}

OrgApacheCommonsLang3TimeCalendarReflection *new_OrgApacheCommonsLang3TimeCalendarReflection_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3TimeCalendarReflection, init)
}

OrgApacheCommonsLang3TimeCalendarReflection *create_OrgApacheCommonsLang3TimeCalendarReflection_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3TimeCalendarReflection, init)
}

JavaLangReflectMethod *OrgApacheCommonsLang3TimeCalendarReflection_getCalendarMethodWithNSString_withIOSClassArray_(NSString *methodName, IOSObjectArray *argTypes) {
  OrgApacheCommonsLang3TimeCalendarReflection_initialize();
  @try {
    JavaLangReflectMethod *m = [JavaUtilCalendar_class_() getMethod:methodName parameterTypes:argTypes];
    return m;
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

jboolean OrgApacheCommonsLang3TimeCalendarReflection_isWeekDateSupportedWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgApacheCommonsLang3TimeCalendarReflection_initialize();
  @try {
    return OrgApacheCommonsLang3TimeCalendarReflection_IS_WEEK_DATE_SUPPORTED != nil && [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk([OrgApacheCommonsLang3TimeCalendarReflection_IS_WEEK_DATE_SUPPORTED invokeWithId:calendar withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangBoolean class])))) booleanValue];
  }
  @catch (JavaLangException *e) {
    return [((JavaLangBoolean *) nil_chk(OrgApacheCommonsLang3ExceptionExceptionUtils_rethrowWithNSException_(e))) booleanValue];
  }
}

jint OrgApacheCommonsLang3TimeCalendarReflection_getWeekYearWithJavaUtilCalendar_(JavaUtilCalendar *calendar) {
  OrgApacheCommonsLang3TimeCalendarReflection_initialize();
  @try {
    if (OrgApacheCommonsLang3TimeCalendarReflection_isWeekDateSupportedWithJavaUtilCalendar_(calendar)) {
      return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((JavaLangReflectMethod *) nil_chk(OrgApacheCommonsLang3TimeCalendarReflection_GET_WEEK_YEAR)) invokeWithId:calendar withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
    }
  }
  @catch (JavaLangException *e) {
    return [((JavaLangInteger *) nil_chk(OrgApacheCommonsLang3ExceptionExceptionUtils_rethrowWithNSException_(e))) intValue];
  }
  jint year = [((JavaUtilCalendar *) nil_chk(calendar)) getWithInt:JavaUtilCalendar_YEAR];
  if (OrgApacheCommonsLang3TimeCalendarReflection_IS_WEEK_DATE_SUPPORTED == nil && [calendar isKindOfClass:[JavaUtilGregorianCalendar class]]) {
    switch ([calendar getWithInt:JavaUtilCalendar_MONTH]) {
      case JavaUtilCalendar_JANUARY:
      if ([calendar getWithInt:JavaUtilCalendar_WEEK_OF_YEAR] >= 52) {
        --year;
      }
      break;
      case JavaUtilCalendar_DECEMBER:
      if ([calendar getWithInt:JavaUtilCalendar_WEEK_OF_YEAR] == 1) {
        ++year;
      }
      break;
    }
  }
  return year;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3TimeCalendarReflection)
