//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java
//

#include "J2ObjC_source.h"
#include "OrgApacheCommonsLang3MathNumberUtils.h"
#include "OrgApacheCommonsLang3MutableMutableShort.h"
#include "java/lang/Short.h"

@interface OrgApacheCommonsLang3MutableMutableShort () {
 @public
  jshort value_;
}

@end

inline jlong OrgApacheCommonsLang3MutableMutableShort_get_serialVersionUID();
#define OrgApacheCommonsLang3MutableMutableShort_serialVersionUID -2135791679LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgApacheCommonsLang3MutableMutableShort, serialVersionUID, jlong)

@implementation OrgApacheCommonsLang3MutableMutableShort

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgApacheCommonsLang3MutableMutableShort_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)initWithShort:(jshort)value {
  OrgApacheCommonsLang3MutableMutableShort_initWithShort_(self, value);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSNumber:(NSNumber *)value {
  OrgApacheCommonsLang3MutableMutableShort_initWithNSNumber_(self, value);
  return self;
}

- (instancetype)initWithNSString:(NSString *)value {
  OrgApacheCommonsLang3MutableMutableShort_initWithNSString_(self, value);
  return self;
}

- (JavaLangShort *)getValue {
  return JavaLangShort_valueOfWithShort_(self->value_);
}

- (void)setValueWithShort:(jshort)value {
  self->value_ = value;
}

- (void)setValueWithId:(NSNumber *)value {
  self->value_ = [((NSNumber *) nil_chk(value)) shortValue];
}

- (void)increment {
  value_++;
}

- (jshort)getAndIncrement {
  jshort last = value_;
  value_++;
  return last;
}

- (jshort)incrementAndGet {
  value_++;
  return value_;
}

- (void)decrement {
  value_--;
}

- (jshort)getAndDecrement {
  jshort last = value_;
  value_--;
  return last;
}

- (jshort)decrementAndGet {
  value_--;
  return value_;
}

- (void)addWithShort:(jshort)operand {
  self->value_ += operand;
}

- (void)addWithNSNumber:(NSNumber *)operand {
  self->value_ += [((NSNumber *) nil_chk(operand)) shortValue];
}

- (void)subtractWithShort:(jshort)operand {
  self->value_ -= operand;
}

- (void)subtractWithNSNumber:(NSNumber *)operand {
  self->value_ -= [((NSNumber *) nil_chk(operand)) shortValue];
}

- (jshort)addAndGetWithShort:(jshort)operand {
  self->value_ += operand;
  return value_;
}

- (jshort)addAndGetWithNSNumber:(NSNumber *)operand {
  self->value_ += [((NSNumber *) nil_chk(operand)) shortValue];
  return value_;
}

- (jshort)getAndAddWithShort:(jshort)operand {
  jshort last = value_;
  self->value_ += operand;
  return last;
}

- (jshort)getAndAddWithNSNumber:(NSNumber *)operand {
  jshort last = value_;
  self->value_ += [((NSNumber *) nil_chk(operand)) shortValue];
  return last;
}

- (jshort)shortValue {
  return value_;
}

- (jint)intValue {
  return value_;
}

- (jlong)longLongValue {
  return value_;
}

- (jfloat)floatValue {
  return value_;
}

- (jdouble)doubleValue {
  return value_;
}

- (JavaLangShort *)toShort {
  return JavaLangShort_valueOfWithShort_([self shortValue]);
}

- (jboolean)isEqual:(id)obj {
  if ([obj isKindOfClass:[OrgApacheCommonsLang3MutableMutableShort class]]) {
    return value_ == [((OrgApacheCommonsLang3MutableMutableShort *) nil_chk(((OrgApacheCommonsLang3MutableMutableShort *) cast_chk(obj, [OrgApacheCommonsLang3MutableMutableShort class])))) shortValue];
  }
  return false;
}

- (NSUInteger)hash {
  return value_;
}

- (jint)compareToWithId:(OrgApacheCommonsLang3MutableMutableShort *)other {
  cast_chk(other, [OrgApacheCommonsLang3MutableMutableShort class]);
  return OrgApacheCommonsLang3MathNumberUtils_compareWithShort_withShort_(self->value_, ((OrgApacheCommonsLang3MutableMutableShort *) nil_chk(other))->value_);
}

- (NSString *)description {
  return NSString_java_valueOfInt_(value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, 3, -1, -1, -1 },
    { NULL, "LJavaLangShort;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "S", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangShort;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 12, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithShort:);
  methods[2].selector = @selector(initWithNSNumber:);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(getValue);
  methods[5].selector = @selector(setValueWithShort:);
  methods[6].selector = @selector(setValueWithId:);
  methods[7].selector = @selector(increment);
  methods[8].selector = @selector(getAndIncrement);
  methods[9].selector = @selector(incrementAndGet);
  methods[10].selector = @selector(decrement);
  methods[11].selector = @selector(getAndDecrement);
  methods[12].selector = @selector(decrementAndGet);
  methods[13].selector = @selector(addWithShort:);
  methods[14].selector = @selector(addWithNSNumber:);
  methods[15].selector = @selector(subtractWithShort:);
  methods[16].selector = @selector(subtractWithNSNumber:);
  methods[17].selector = @selector(addAndGetWithShort:);
  methods[18].selector = @selector(addAndGetWithNSNumber:);
  methods[19].selector = @selector(getAndAddWithShort:);
  methods[20].selector = @selector(getAndAddWithNSNumber:);
  methods[21].selector = @selector(shortValue);
  methods[22].selector = @selector(intValue);
  methods[23].selector = @selector(longLongValue);
  methods[24].selector = @selector(floatValue);
  methods[25].selector = @selector(doubleValue);
  methods[26].selector = @selector(toShort);
  methods[27].selector = @selector(isEqual:);
  methods[28].selector = @selector(hash);
  methods[29].selector = @selector(compareToWithId:);
  methods[30].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgApacheCommonsLang3MutableMutableShort_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "value_", "S", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "S", "LNSNumber;", "LNSString;", "LJavaLangNumberFormatException;", "setValue", "add", "subtract", "addAndGet", "getAndAdd", "longValue", "equals", "LNSObject;", "hashCode", "compareTo", "LOrgApacheCommonsLang3MutableMutableShort;", "toString", "Ljava/lang/Number;Ljava/lang/Comparable<Lorg/apache/commons/lang3/mutable/MutableShort;>;Lorg/apache/commons/lang3/mutable/Mutable<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _OrgApacheCommonsLang3MutableMutableShort = { "MutableShort", "org.apache.commons.lang3.mutable", ptrTable, methods, fields, 7, 0x1, 31, 2, -1, -1, -1, 16, -1 };
  return &_OrgApacheCommonsLang3MutableMutableShort;
}

@end

void OrgApacheCommonsLang3MutableMutableShort_init(OrgApacheCommonsLang3MutableMutableShort *self) {
  NSNumber_init(self);
}

OrgApacheCommonsLang3MutableMutableShort *new_OrgApacheCommonsLang3MutableMutableShort_init() {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableShort, init)
}

OrgApacheCommonsLang3MutableMutableShort *create_OrgApacheCommonsLang3MutableMutableShort_init() {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableShort, init)
}

void OrgApacheCommonsLang3MutableMutableShort_initWithShort_(OrgApacheCommonsLang3MutableMutableShort *self, jshort value) {
  NSNumber_init(self);
  self->value_ = value;
}

OrgApacheCommonsLang3MutableMutableShort *new_OrgApacheCommonsLang3MutableMutableShort_initWithShort_(jshort value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableShort, initWithShort_, value)
}

OrgApacheCommonsLang3MutableMutableShort *create_OrgApacheCommonsLang3MutableMutableShort_initWithShort_(jshort value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableShort, initWithShort_, value)
}

void OrgApacheCommonsLang3MutableMutableShort_initWithNSNumber_(OrgApacheCommonsLang3MutableMutableShort *self, NSNumber *value) {
  NSNumber_init(self);
  self->value_ = [((NSNumber *) nil_chk(value)) shortValue];
}

OrgApacheCommonsLang3MutableMutableShort *new_OrgApacheCommonsLang3MutableMutableShort_initWithNSNumber_(NSNumber *value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableShort, initWithNSNumber_, value)
}

OrgApacheCommonsLang3MutableMutableShort *create_OrgApacheCommonsLang3MutableMutableShort_initWithNSNumber_(NSNumber *value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableShort, initWithNSNumber_, value)
}

void OrgApacheCommonsLang3MutableMutableShort_initWithNSString_(OrgApacheCommonsLang3MutableMutableShort *self, NSString *value) {
  NSNumber_init(self);
  self->value_ = JavaLangShort_parseShortWithNSString_(value);
}

OrgApacheCommonsLang3MutableMutableShort *new_OrgApacheCommonsLang3MutableMutableShort_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(OrgApacheCommonsLang3MutableMutableShort, initWithNSString_, value)
}

OrgApacheCommonsLang3MutableMutableShort *create_OrgApacheCommonsLang3MutableMutableShort_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(OrgApacheCommonsLang3MutableMutableShort, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsLang3MutableMutableShort)
