//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/kgalligan/devel-doppl/commons-lang/src/main/java/org/apache/commons/lang3/concurrent/AbstractCircuitBreaker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker")
#ifdef RESTRICT_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker 0
#else
#define INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker 1
#endif
#undef RESTRICT_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker

#if !defined (OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker))
#define OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_

#define RESTRICT_OrgApacheCommonsLang3ConcurrentCircuitBreaker 1
#define INCLUDE_OrgApacheCommonsLang3ConcurrentCircuitBreaker 1
#include "OrgApacheCommonsLang3ConcurrentCircuitBreaker.h"

@class JavaUtilConcurrentAtomicAtomicReference;
@class OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State;
@protocol JavaBeansPropertyChangeListener;

@interface OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker : NSObject < OrgApacheCommonsLang3ConcurrentCircuitBreaker > {
 @public
  JavaUtilConcurrentAtomicAtomicReference *state_;
}

#pragma mark Public

- (instancetype)init;

- (void)addChangeListenerWithJavaBeansPropertyChangeListener:(id<JavaBeansPropertyChangeListener>)listener;

- (jboolean)checkState;

- (void)close;

- (jboolean)incrementAndCheckStateWithId:(id)increment;

- (jboolean)isClosed;

- (jboolean)isOpen;

- (void)open;

- (void)removeChangeListenerWithJavaBeansPropertyChangeListener:(id<JavaBeansPropertyChangeListener>)listener;

#pragma mark Protected

- (void)changeStateWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)newState;

+ (jboolean)isOpenWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State:(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)state;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker)

J2OBJC_FIELD_SETTER(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker, state_, JavaUtilConcurrentAtomicAtomicReference *)

inline NSString *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_get_PROPERTY_NAME();
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_PROPERTY_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker, PROPERTY_NAME, NSString *)

FOUNDATION_EXPORT void OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_init(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker *self);

FOUNDATION_EXPORT jboolean OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_isOpenWithOrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *state);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker)

#endif

#if !defined (OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_) && (INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker || defined(INCLUDE_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State))
#define OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_Enum) {
  OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_Enum_CLOSED = 0,
  OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_Enum_OPEN = 1,
};

@interface OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State : JavaLangEnum < NSCopying >

#pragma mark Public

- (OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)oppositeState;

+ (OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_values_[];

inline OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_get_CLOSED();
J2OBJC_ENUM_CONSTANT(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State, CLOSED)

inline OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_get_OPEN();
J2OBJC_ENUM_CONSTANT(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State, OPEN)

FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_values();

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State *OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker_State)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgApacheCommonsLang3ConcurrentAbstractCircuitBreaker")
